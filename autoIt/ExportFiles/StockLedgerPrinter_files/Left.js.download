var clLeft = new function()
{
    var me = this;
    var g_iPrvActiveAnchorIndex = -1;
    var g_iCurrentSpIndex = -1;
    var g_iPrvSpIndex = -1;
    var g_isEditOrView = false;
    var g_iRecentItems=0;
    /** function is used for displaying dailog for Quick create list
     * */
    this.onClkQuickCreate = function(sQuickCreate,sTitle)
    {

        var sUrl;//,sTitle;
        sUrl = sQuickCreate.getAttribute("value");
//        sTitle = cross.getInnerText(sQuickCreate);
        
        //        alert("sUrl-->" + sUrl+"--"+sTitle);
        if (sUrl != undefined && sUrl != "")
        {
            sUrl +="&sFnSaveCallback=parent.clLeft.hideQuickCreate";
            var arrActions = new Array();
            arrActions[0] = MsgHandler.getMsg(MsgConstants.OK)+"|moduleView.saveModuleDetails";
            arrActions[1] = MsgHandler.getMsg(MsgConstants.CANCEL)+"|parent.clLeft.hideQuickCreate";
            app.showPopUp(sUrl, sTitle, 380, 280, arrActions);
        }
    };

    this.hideQuickCreate=function()
    {
        app.hidePopUp();
        //getDialogBox("dlg").hide();
    };



    this.onClkNewModuleCreate = function(sCreateNew)
    {
        var sUrl,sTitle,iModuleId;
        sUrl = sCreateNew.getAttribute("url");
        sTitle = sCreateNew.getAttribute("menuname");
        iModuleId=sCreateNew.id;
        //alert("sUrl-->" + sUrl+"--"+sTitle+"==="+iModuleId);
        if (sUrl != undefined && sUrl != "")
        {
            sUrl+="&moduleId="+iModuleId+"&viewIn="+Constants.MODULE_IN_DLG+"&sFnSaveCallback=parent.clLeft.hideNewModuleDlg";
            /*var arrActions = new Array();
             arrActions[0] = "Ok|moduleView.onClkSaveQuickCreate";
             arrActions[1] = "Cancel|moduleView.hideQuickCreate";*/
            app.showPopUp(sUrl, sTitle, 680, 380, null);
        }
    };

    this.hideNewModuleDlg = function()
    {
        app.hidePopUp();
       // getDialogBox("dlg").hide();
    };

    /**
     * This method purpose is to get the menu names and urls and  returns array of values
     *
     * */
    this.getCommnads = function (sSearchKey)//getCommands
    {
        var arrElems,sArrMenus,sUrl,sName,elemFld,sValue,i; //sData,sContent,sFn
        arrElems = $('[rrole]');

        var sArrNames = new Array();
        var sArrIds = new Array();

        for (i = 0; i < arrElems.length; i++)
        {
            elemFld = arrElems[i];

            if ((sUrl = elemFld.getAttribute("src")) != null && elemFld.className != "popNavLink")
            {
                sName = cross.getInnerText(elemFld);
                sValue = sName.substring(0, sSearchKey.length);
                if (sValue.toLowerCase() >= sSearchKey.toLowerCase())
                {
                    /* sFn = elemFld.onclick;
                     if (sFn != null)
                     {
                     sData = sFn.toString();
                     sContent = sData.substring(sData.indexOf('{') + 1, sData.indexOf('}') - 1);
                     sUrl = sContent.substring(sContent.indexOf('(') + 2, sContent.indexOf(',') - 1);*/
                    //                        alert("sUrl-->"+sUrl)

                    if (sUrl != null && util.trim(sUrl).length != 0)
                    {
                        sArrNames[sArrNames.length] = sName;
                        sArrIds[sArrIds.length] = sUrl;
                    }
                    //                    }
                }
            }
        }
        sArrMenus = this.bubbleSort(sArrIds, sArrNames);
        return  sArrMenus;
    };

    this.getSetupCommnads = function (sSearchKey)//getCommands
    {
        var arrElems,sArrMenus,sUrl,sName,elemFld,sValue,i; //sData,sContent,sFn
        arrElems = $('[isparent]');

        var sArrNames = new Array();
        var sArrIds = new Array();

        for (i = 0; i < arrElems.length; i++)
        {
            elemFld = arrElems[i];
            if ( (sUrl = elemFld.getAttribute("onclick")) != null && (elemFld.className == "aChildFont aMenuColor") && (elemFld.getAttribute("isparent")=="false"))
            {
                sName = cross.getInnerText(elemFld);
                sValue = sName.substring(0, sSearchKey.length);
                if (sValue.toLowerCase() >= sSearchKey.toLowerCase())
                {
                    /* sFn = elemFld.onclick;
                     if (sFn != null)
                     {
                     sData = sFn.toString();
                     sContent = sData.substring(sData.indexOf('{') + 1, sData.indexOf('}') - 1);
                     sUrl = sContent.substring(sContent.indexOf('(') + 2, sContent.indexOf(',') - 1);*/
                    //                        alert("sUrl-->"+sUrl)

                    if (sUrl != null && util.trim(sUrl).length != 0)
                    {
                        sArrNames[sArrNames.length] = sName;
                        sArrIds[sArrIds.length] = sUrl;
                    }
                    //                    }
                }
            }
        }
        sArrMenus = this.bubbleSort(sArrIds, sArrNames);
        return  sArrMenus;
    };

    this.bubbleSort = function(sArrUrls, sArrMods)
    {

        var sArrDumMods,sArrDumUrls,iLength,iIndex,iInnerIndex;
        iLength = sArrMods.length;
        for (iIndex = 0; iIndex < iLength; iIndex++)
        {
            for (iInnerIndex = iIndex + 1; iInnerIndex <= iLength; iInnerIndex++)
            {
                if (sArrMods[iInnerIndex] <= sArrMods[iIndex])
                {
                    sArrDumMods = sArrMods[iIndex];
                    sArrMods[iIndex] = sArrMods[iInnerIndex];
                    sArrMods[iInnerIndex] = sArrDumMods;

                    sArrDumUrls = sArrUrls[iIndex];
                    sArrUrls[iIndex] = sArrUrls[iInnerIndex];
                    sArrUrls[iInnerIndex] = sArrDumUrls;

                }
            }
        }
        return new Array(sArrMods, sArrUrls);
    };

    /**
     * This method purpose is to set the runcombo box data based on the user search key
     */
    this.setCommandData = function(sSearchKey)
    {
        if (util.trim(sSearchKey).length > 0)
        {
            var sArrMenus,cbRun;
            sArrMenus = clLeft.getCommnads(sSearchKey);
            cbRun = getComboInstance("cbRun");
            //            cbRun.removeAllItems();
            /*if (sArrMenus)
             cbRun.fillCombo(sArrMenus[0], sArrMenus[1]);*/
        }
    };
    /**
     * This method purpose is to set the runcombo box data based on the user search key in pref setup
     */
    this.setSetUpCommandData = function(sSearchKey)
    {
        if (util.trim(sSearchKey).length > 0)
        {
            var sArrMenus,cbRun;
            sArrMenus = clLeft.getSetupCommnads(sSearchKey);
            cbRun = getComboInstance("cbRun");
            //            cbRun.removeAllItems();
            if (sArrMenus)
                cbRun.fillCombo(sArrMenus[0], sArrMenus[1]);
        }
    };
    /**
     * Thid method purpose is to set the Callback function in the combobox,and used to get the data based the search key
     * entered in the combobox(RUN combobox)
     */
    this.setCallBackRun = function()
    {
        var cbRun = getComboInstance("cbRun");
        if(cbRun)
            cbRun.setScriptCallBack(clLeft.setCommandData);
    };

    this.setCallBackSetUpRun = function()
    {
        var cbRun = getComboInstance("cbRun");
        cbRun.setScriptCallBack(clLeft.setSetUpCommandData);
    };

    /**
     * This method purpose is to get the page details based on the event fired at the Run combo box
     *  and response is set at home page center panel.
     * @param objRun of type Combobox object
     */
    this.onBlurShowPage = function(e)
    {

        var cbRun = getComboInstance("cbRun");
        var iModuleId = cbRun.getSelectedId();

        header.clearSelection(e);
        home.updateUrlStack(true);

        if (iModuleId > 0)
        {
            var iStatus;
//            if(!sMenuUrl.substring(sMenuUrl.indexOf("=")+1))
//            {
//                iStatus = tabmenu.setMenuSelection(sMenuUrl.substring(sMenuUrl.indexOf("=")+1,sMenuUrl.indexOf("=")+(sMenuUrl.indexOf("&")-sMenuUrl.indexOf("="))));
//                home.setCenterUI(sMenuUrl);
//            }
//            else
//            {

                    var bCheckOldTabmenu=false;

                   if(document.getElementById(iModuleId+"tablink")!=null) {
                       util.toggleBackground(true,false);
                       bCheckOldTabmenu=true;
                       iStatus = tabmenu.setMenuSelection(iModuleId, 0);
                       document.getElementById(iModuleId+"tablink").onmousedown();

                   }
                 else if(document.getElementById(iModuleId+"_toggleTitle")!=null)
                  {
                      util.toggleBackground(true,false);
                      document.getElementById(iModuleId + "_toggleTitle").onclick();
                      var timer = setInterval( function()
                      {
                          clearTimeout(timer);
                          cbRun.setSelectedIndex(-1);
                      }, 1000);
                  }
                  else
                  {
                      if(!bCheckOldTabmenu)
                        util.toggleBackground(true,false,MsgHandler.getMsg(MsgConstants.SWITCHING_APPLICATION));
                      window.location.href = clAppBuffer.getContextPath() + "/crmhome.do?modtype=" + iModuleId + "&isBuffer=true";
                  }
//            }

            /*if(iStatus == 0)
                home.setCenterUI(sMenuUrl);*/
        }
    };

    this.onBlurShowSetUpPage = function(objThis)
    {
        var sOnclick = getComboInstance("cbRun").getSelectedId();
        sOnclick=sOnclick.substring(sOnclick.indexOf("(")+2,sOnclick.indexOf(",")-1);
        if(sOnclick)
        {
            home.setCenterUI(sOnclick);
        }
    };

    this.onClkItemMenu = function(objAn,iActIndex)
    {
        var objFld,dvItem,arrDiv=[],iDirection,bVisible,sItemTit,imgItem,iIndex;
        iDirection= (iActIndex == 0)?clNotifyMessage.DIRECTION_RIGHT:clNotifyMessage.DIRECTION_LEFT;
        arrDiv[arrDiv.length] = document.getElementById('dvItems'+iActIndex);
        clNotifyMessage.runAnimation(arrDiv,iDirection);
        iIndex = 0;
        objFld = document.getElementById('anhRecent'+iIndex);
        while(objFld)
        {
            dvItem = document.getElementById('dvItems'+iIndex);
            imgItem = document.getElementById('anhRecent'+iIndex);
            sItemTit = document.getElementById('items'+iIndex);
            if(objAn == objFld){
                objAn.className = 'active';
                bVisible = true;
            }
            else{
                bVisible = false;
                document.getElementById('anhRecent'+iIndex).className = 'defaultRecentList';
            }
            cross.setVisible(dvItem,bVisible);
            cross.setVisible(sItemTit,bVisible);
            cross.setVisible(imgItem,(iActIndex != iIndex));

            iIndex ++;
            objFld = document.getElementById('anhRecent'+iIndex);
        }





        /*objAn.className = 'selectRecentItem';
         var sAchId = objAn.id,sId,iIndex;
         sId = sAchId.substring(0, sAchId.length - 1);
         iIndex = sAchId.substring(sAchId.length - 1);
         document.getElementById("dvItems" + iIndex).style.display = '';
         if (iIndex == 0)
         iIndex = 1;
         else
         iIndex = iIndex - 1;
         document.getElementById(sId + (iIndex)).className = 'unselectRecentItem';
         document.getElementById("dvItems" + iIndex).style.display = 'none';  */
    };

    this.addRecentItems = function(sTitle, sURL)
    {
        var tblRecentMenus,objTr,objNewTr,tBodies,objAn,iLen;
        tblRecentMenus = document.getElementById("tblRecentMenus");
        tBodies = tblRecentMenus.tBodies[0];
        objTr = tBodies.rows[0];
        iLen = tBodies.rows.length;
        if (iLen == 10)
            tBodies.removeChild(tBodies.rows[iLen - 1]);
        objNewTr = objTr.cloneNode(true);
        tBodies.insertBefore(objNewTr, objTr);
        objAn = objNewTr.cells[0].childNodes[0];
        objAn.innerHTML = sTitle;
        objAn.onclick = function() {
            home.setCenterUI(sURL);
        };
    };
    this.showRecentItems = function(sUrl)
    {
        home.setCenterUI(sUrl);
    };

    this.addRecentMenus = function(sTitle, sURL)
    {
        document.getElementById("anhRecent1").appendChild();
    };

    this.setComboScope = function()
    {
        var cbRun = getComboInstance("cbRun");
        if (cbRun)
            cbRun.setScope(COMBO_APP_SCOPE);
    };

    this.toggleShow = function(objImg,sId)
    {
        // var objImg = cross.getChildren(element)[0];
        if(objImg.getAttribute("isDown") == 'true')
        {
            //objImg.isDown=false;
            objImg.setAttribute("isDown",false);
//            objImg.src = app.getImagePath(true)+"up.gif";
            objImg.src = app.getImagePath(true)+"blank.png";
            objImg.className = "sModule s-up";
        }
        else
        {
            //objImg.isDown=true;
            objImg.setAttribute("isDown",true);
//            objImg.src = app.getImagePath(true)+"down.gif";
            objImg.src = app.getImagePath(true)+"blank.png";
            objImg.className = "sModule s-down";
        }
        app.toggleShow(sId);
    };

    me.bShowMsg = true;
    this.evOverShowDetails = function(obj,e)
    {
        var arrIds,iModuleId,iTransId,iListId,iMemberId,sId = obj.getAttribute("recentMenuId"),sParams = "";
        arrIds = sId.split("_");
        iModuleId = arrIds[0];
        iTransId = arrIds[1];
        iMemberId = arrIds[2];
        iListId = arrIds[3];
        g_iCurrentSpIndex = obj.parentNode.parentNode.rowIndex;
        util.addClass(obj,"recentItemsOver");
        sParams = "moduleId="+iModuleId+"&transId="+iTransId+"&memberId="+iMemberId;
        me.setOverColor(obj);
        app.evOverShowDetails(obj,sId,Constants.PRONG_LEFT,sParams,"recentMenu","recentItemsOver",null,e);
    };


    this.evmOutClearTimer = function(obj,e)
    {
        app.evmOutClearTimer(obj,e);
        obj.className = 'recentMenu';
    };

    this.onClkDrill = function(iTransId,iFieldId)
    {
        var arrValues = new Array();
        arrValues[0] = document.getElementById("hfFilterField_"+iTransId+"_"+iFieldId).value;
        arrValues[1] = 0;
        arrValues[2] = document.getElementById("hfFilterValue_"+iTransId+"_"+iFieldId).value;
        listView.setFldFilterCriteria(arrValues);
    };

    this.onClkRecentActions = function(objFld,sUrl,iValue,iModuleId,bNewWindow,isFromActivities,iCalledFromModuleId)
    {
     //   sUrl = sUrl+"&calledFrom="+iCalledFromModuleId;
        if(iValue == 2)      /*recent menus*/
        {
            //tabmenu.setMenuSelection(iModuleId);
            g_iPrvActiveAnchorIndex = objFld.parentNode.parentNode.rowIndex;
        }
        else
        {
            g_iPrvSpIndex = g_iCurrentSpIndex;
            g_isEditOrView = true;
        }
        if(document.getElementById(iModuleId+"tablink") != null)
        {

            tabmenu.setMenuSelection(iModuleId,0);//for recent menus and items
            me.setOverColor(objFld);
            util.toggleBackground(true);
            con.sendPostRequest(sUrl,null, null,home.handleResponse);
        }
        else
        {
            if(bNewWindow)
            {
                sUrl = clAppBuffer.getContextPath() + "/crmhome.do?modtype=" + iModuleId + "&url=" + escape(sUrl);
                window.open(sUrl);
            }
            else
            {
                if(isFromActivities)
                    clOverlay.closeOverlay(null,clOverlay.OVERLAY_RIGHT,'dvOverlayActivities');

                util.toggleBackground(true);
                home.setCenterUI(sUrl);
            }
        }
    };
    this.setOverColor = function(obj)
    {
        var  trRecentItems,iCurrIndex,i = 0,iRowLen = 0;
        trRecentItems = obj.parentNode.parentNode;
        iCurrIndex = trRecentItems.rowIndex;

        trRecentItems = trRecentItems.parentNode.rows;

        iRowLen =  trRecentItems.length;
        if(!g_isEditOrView)
        {
            var elem =  null;
            for(i = 0; i < iRowLen; i++)
            {
                if(iCurrIndex != i)
                {
                    elem = cross.getFirstElement(trRecentItems[i].cells[1].childNodes);
                    if(elem)
                        elem.className = ' recentMenu';
                }
            }
            if(obj.nodeName == "A")
            {
                if(g_iPrvActiveAnchorIndex!= -1)
                    cross.getFirstElement(trRecentItems[g_iPrvActiveAnchorIndex].cells[1].childNodes).className = ' recentMenu liSelect';
            }
            if(obj.nodeName == "SPAN")
            {
                g_iRecentItems = trRecentItems.length;

                if(g_iPrvSpIndex != -1 && iCurrIndex == g_iPrvSpIndex)
                    cross.getFirstElement(trRecentItems[g_iPrvSpIndex].cells[1].childNodes).className = ' recentItemsOver liSelect';
                else if(g_iPrvSpIndex != -1)
                    cross.getFirstElement(trRecentItems[g_iPrvSpIndex].cells[1].childNodes).className = ' recentMenu liSelect';
            }
        }
        else
        {
            for(i=0;i< g_iRecentItems;i++)
            {
                if(i == g_iPrvSpIndex)
                    document.getElementById("recentItem"+i).className = ' recentMenu liSelect';
                else
                    document.getElementById("recentItem"+i).className = ' recentMenu';

            }
        }

        g_isEditOrView = false;

        /*else if( iValue !=0 && iValue != 1)
         {
         if(g_iPrvActiveSpanIndex!= -1)
         cross.getFirstElement(trRecentItems[g_iPrvActiveSpanIndex].cells[0].childNodes).className = ' recentMenu liSelect';
         }*/
        //                obj.className = "recentItemsOver";
    };
    this.evOverShowStyle = function(obj)
    {
          util.addClass(obj,"recentItemsOver");
        //        me.setOverColor(obj);
    };
    /*function is used to change the menus items for every 2mins*/
    this.getRecentDetails = function()
    {
        /*me.recentItemsTimer = setInterval(function()
         {
         var  sUrl = getStruts2Url("security","home.do","getRecentItems",null);
         sendPostRequest(sUrl,null, null,clLeft.handleResponse);
         }, 10000);*/
    };
    this.handleResponse = function(sResponse)
    {
        var tdRecentRes = document.getElementById("tdRecentRes");
        if(tdRecentRes != null)
        {
            tdRecentRes.innerHTML = sResponse;
            clLeft.onClkItemMenu(document.getElementById("anhRecent0"));
        }
    };

    this.onClkSetDetailView = function(obj,sUrl,iModuleId,e)
    {
        home.updateUrlStack(true);

        clearTimeout(app.timer);
        if(document.getElementById(iModuleId+"tablink") != null)
            home.setCenterUI(sUrl);
        else
        {
            //util.toggleBackground(true);
           window.location.href=clAppBuffer.getContextPath()+"/crmhome.do?modtype="+iModuleId+"&url="+escape(sUrl);
        }

    };
};

