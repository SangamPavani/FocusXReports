var clGeoMapUtils = new function()
{
    //app.registerInstance("clGeoMapUtils",clGeoMapUtils);

    var me = this;
    this.DEFAULT_ZOOM_LEVEL = 13;
    this.DEFAULT_MAP_TYPE = 0;//google.maps.MapTypeId.ROADMAP;//google.maps.MapTypeId.ROADMAP;
    this.MARKER_TYPE_DEFAULT = 0;
    this.MARKER_TYPE_CIRCLE = 1;
    this.MARKER_TYPE_STYLED = 2;
    this.MARKER_TYPE_NUMBER = 3;
    this.MARKER_TYPE_SQUARE = 4;
    this.MARKER_TYPE_TEXT = 5;

    this.MARKER_TYPE_CUSTOM = 6;

    this.infoWindow = null;
    this.global_marker = null;

    this.createMap = function(sMapContainer, clLatLng, iZoomLevel)
    {
        if (!me.DEFAULT_MAP_TYPE)
            me.DEFAULT_MAP_TYPE = google.maps.MapTypeId.ROADMAP;
        var arrMapOptions = {};
        if (!iZoomLevel)
            iZoomLevel = me.DEFAULT_ZOOM_LEVEL;
        arrMapOptions['zoom'] = iZoomLevel;
        arrMapOptions['mapTypeId'] = me.DEFAULT_MAP_TYPE;
        if (clLatLng)
            arrMapOptions['center'] = clLatLng;

        return new google.maps.Map(getMapContainer(sMapContainer), arrMapOptions);
    };

    this.createInfoWindow = function()
    {
        me.infoWindow = new google.maps.InfoWindow({maxWidth:330});//{size: new google.maps.Size(150,100)});
        return me.infoWindow;
    };

    this.createMarker = function(map, clLatLng, iMarkerType, sTitle, sColor, sValue, isBlink,sTextColor,sMarkerUrl)
    {

        var marker;
        var arrMarkerOptions = {};
        arrMarkerOptions['position'] = clLatLng;
        arrMarkerOptions['map'] = map;

        if (sTitle)
            arrMarkerOptions['title'] = sTitle;
        if (!sColor)
            sColor = "FE6256";
        if(isBlink)
            arrMarkerOptions['opacity'] = 1;

        if (iMarkerType == me.MARKER_TYPE_STYLED)
        {
            arrMarkerOptions['animation'] = google.maps.Animation.DROP;
            arrMarkerOptions['styleIcon'] = new StyledIcon(StyledIconTypes.MARKER, {color:sColor});
            marker = new StyledMarker(arrMarkerOptions);
        }
        else
        {
            if (iMarkerType == me.MARKER_TYPE_CIRCLE)
                arrMarkerOptions['icon'] = {path: google.maps.SymbolPath.CIRCLE,scale:2.5,strokeColor:"#" + sColor,strokeWeight:5};
            else if (iMarkerType == me.MARKER_TYPE_SQUARE)
                arrMarkerOptions['icon'] = {path: 'M-24-48h48v48h-48z',scale:0.25,fillColor: '#' + sColor,fillOpacity: 1,strokeWeight: 0};
            else if (iMarkerType == me.MARKER_TYPE_NUMBER)
            {
                var sMarkerTextColor = "000000";
                if(sTextColor)
                    sMarkerTextColor = sTextColor;
                arrMarkerOptions['icon'] = "http://www.googlemapsmarkers.com/v1/" + sValue + "/" + sColor + "/"+sMarkerTextColor+"/FFFFFF/";
                //arrMarkerOptions['icon'] = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=' + sValue + '|' + sColor + '|000000';
            }
            else if(iMarkerType == me.MARKER_TYPE_TEXT) {
                var markerIcon = {
                    url: clAppBuffer.getImagePath(true)+"textMarker"+sColor+".svg",
                    scaledSize: new google.maps.Size(40, 40),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(16,32),
                    labelOrigin: new google.maps.Point(20,16)
                };
                arrMarkerOptions['icon'] = markerIcon;
                arrMarkerOptions['label'] = {
                    text: sValue,
                    color: "#ffffff",
                    fontSize: "12px",
                    fontWeight: "bold"
                };

            }
            else if(iMarkerType == me.MARKER_TYPE_CUSTOM)
            {
                var markerIcon = {
                    url: sMarkerUrl,
                    scaledSize: new google.maps.Size(30, 30),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(16,32),
                    labelOrigin: new google.maps.Point(20,16)
                };
                //arrMarkerOptions['animation'] = google.maps.Animation.BOUNCE;
                arrMarkerOptions['icon'] = markerIcon;

            }
            //else
            //arrMarkerOptions['icon']={path: google.maps.SymbolPath.FORWARD_OPEN_ARROW,scale: 3,strokeColor:"#"+sColor};
            marker = new google.maps.Marker(arrMarkerOptions);

            if (isBlink)
            {
                var interval = setInterval(function () {
                    toggleMarker()
                }, 500);

                function toggleMarker() {
                    if (marker.getOpacity() ==1) {
                        marker.setOpacity(0.5);
                    } else {
                        marker.setOpacity(1);
                    }
                }
            }
        }

        return marker;
    };


    this.getLatLng = function(iLatitude, iLongitude)
    {

        return new google.maps.LatLng(iLatitude, iLongitude);
    };

    this.getAddressByPincode=function(zip,fnOnLoadAddress)
    {
        var iLatitude,iLongitude;
        var geocoder = new google.maps.Geocoder();
        if(zip.length >= 5 && typeof google != 'undefined')
        {
            geocoder.geocode({ 'address': zip }, function(results, status)
            {
                if (status == google.maps.GeocoderStatus.OK)
                {
                    iLatitude = results[0].geometry.location.lat();
                    iLongitude = results[0].geometry.location.lng();
                    /*var map = new google.maps.Map(document.getElementById('map'), {
                        center:{lat: latitude,lng:longitude},
                        zoom:13
                    });*/

                    me.getAddressFromGeocoder(fnOnLoadAddress,results[0].geometry.location);
                   //me.getAddress(iLatitude, iLongitude,fnOnLoadAddress);
                }
                else
                    alert("Location is not Found");

            });
        }
        else
            alert("Invalid Postal Code");

    };


    this.getAddressFromGeocoder=function(fnCallback,clLatLng,isMultipleFlds,sFnCallBackAfterAddressChange,iFldPosition,sFldId,isFromManualAddressAdress,isFromOnLoad)
    {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({latLng: clLatLng}, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK)
            {
                var place = results[0];
                if (place)
                {
                    if(isMultipleFlds)
                    {
                        document.getElementById("tflatlng_"+sFldId).value=clLatLng.lat()+","+clLatLng.lng();
                        var sPlace = place.formatted_address;
                        if(isFromManualAddressAdress)
                        sPlace = document.getElementById(sFldId).value;
                        fnCallback(clLatLng.lat(),clLatLng.lng(),sPlace,place.address_components,sFnCallBackAfterAddressChange,iFldPosition,sFldId,isFromOnLoad);
                    }

                    else
                        me.getAddressComponents(fnCallback,clLatLng.lat(),clLatLng.lng(),place.formatted_address,place.address_components);

                }
//                    fnCallback(place.address_components);

            }
        });
        return null;
    }


    this.getAddressComponents=function(fnCallback,iLatitude,iLongitude,sAddressText,arrAddressComponents)
    {
        var arrAddrComponents = {"address":"","street":"","city":"","state":"","country":"","pincode":""};

        var sLocationName,sLocationType,sAddress = "";

        for (var i = 0; i < arrAddressComponents.length; i++)
        {
            sLocationType = arrAddressComponents[i].types[0];
            sLocationName = arrAddressComponents[i].long_name;
            //alert(sLocationType+"---"+sLocationName)

            if(!sLocationType)
                sAddress += ","+sLocationName;
            else if (sLocationType == "street_number" || sLocationType.indexOf('sublocality')!=-1)
                arrAddrComponents["street"] = arrAddrComponents["street"]+sLocationName+" ";//street
            else if (sLocationType == "locality")
                arrAddrComponents["city"] = sLocationName;//city
            else if (sLocationType == "administrative_area_level_1")
                arrAddrComponents["state"] = sLocationName;
            else if (sLocationType == "country")
                arrAddrComponents["country"] = sLocationName;
            else if (sLocationType == 'postal_code')
                arrAddrComponents["pincode"] = sLocationName;
            else
            {
                /*if (sLocationType == "street_number")
                    sAddress = sLocationName + ",";  //street
                else if (sLocationType == "route")
                    sAddress += sLocationName + ",";  //1 Road name
                else if (sLocationType == 'neighborhood')
                    sAddress += sLocationName + ","; //2 near by
                else if (sLocationType == 'sublocality')
                    sAddress += sLocationName; //3 area*/

                //|| sLocationType=="administrative_area_level_2"
                if (sLocationType == "premise" || sLocationType == "route" || sLocationType == 'neighborhood'
                                 || sLocationType=="train_station") //sublocality_level_1,sublocality_level_2
                    sAddress += ","+sLocationName;  //street


                /*else if(sLocationType== 'administrative_area_level_2')
                 sAddress+=","+sLocationName;//Political*/
            }
        }
        if(sAddress.length>1)
            arrAddrComponents["address"] = sAddress.substring(1);
        arrAddrComponents["lat"] = iLatitude;
        arrAddrComponents["lng"] = iLongitude;

        //this.arrAddrComponents = {"country":sCountry,"postalCode":iPostalCode,"state":sStateName,"destrict":sDestrict,"locality":sLocality,"route":sRoute,}
       //alert(arrAddrComponents)

         fnCallback(arrAddrComponents,sAddressText);
    }


    this.getAddress = function(iLatitude, iLongitude, fnOnLoadAddress)
    {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({latLng: new google.maps.LatLng(iLatitude, iLongitude)},
                function(results, status)
                {
                    if (status == google.maps.GeocoderStatus.OK)
                    {
                        var sAddress = "";
                        var place = results[0];

                        if (place)
                        {
                            for (var i = 0; i < place.address_components.length; i++)
                            {
                                var sLocationType = place.address_components[i].types[0];
                                var sLocationName = place.address_components[i].long_name;
                                //                         alert(sLocationType+"---"+sLocationName)

                                if (sLocationType == "locality")
                                    sAddress += sLocationName + ",";//city
                                else if (sLocationType == "administrative_area_level_1")
                                    sAddress += sLocationName + ",";
                                else if (sLocationType == "country")
                                        sAddress += sLocationName;

                            }
                        }
                    }
                    fnOnLoadAddress(sAddress);
                });
    };

    this.getMapLocationByAddress = function(arrAddresses, fnCallback,isSetCallBackOnChange,sMapContainerId,fnCallAfterChange)
    {
        var arrLatLngs = [];
        var geocoder = new google.maps.Geocoder();

        for (var i = 0; i < arrAddresses.length; i++)
        {
            function fnAddress(i)
            {
                var iIndex = i;

                return function(results, status)
                {
                    if (status == google.maps.GeocoderStatus.OK)
                    {
                        arrLatLngs[iIndex] = [results[0].geometry.location.lat(), results[0].geometry.location.lng()];

                        if (arrLatLngs.length == arrAddresses.length)
                        {
                            if(isSetCallBackOnChange)
                                fnCallback(arrLatLngs,sMapContainerId,fnCallAfterChange);
                            else
                                fnCallback(arrLatLngs);
                        }
                    }
                    else
                        alert("Address request status:  " + status);
                };
            }

            var fn = fnAddress(i);
            geocoder.geocode({ 'address': arrAddresses[i]}, fn);

            //{ componentRestrictions: {country: 'AU',postalCode: '2000'} }
        }
    };


    var iCurrentLatitude = 0;
    var iCurrentLongitude = 0;

    this.showCurrentLocation = function(map, isIgnoreMarker)
    {
        if (iCurrentLatitude == 0 && iCurrentLongitude == 0)
        {
            if (navigator.geolocation)
            {
                navigator.geolocation.getCurrentPosition(function (position)
                {
                    iCurrentLatitude = position.coords.latitude;
                    iCurrentLongitude = position.coords.longitude;
                    me.setCurrentLocationMarker(map, iCurrentLatitude, iCurrentLongitude, isIgnoreMarker);
                });
            }
            else if (google.loader.ClientLocation)
            {
                iCurrentLatitude = google.loader.ClientLocation.latitude;
                iCurrentLongitude = google.loader.ClientLocation.longitude;
                me.setCurrentLocationMarker(map, iCurrentLatitude, iCurrentLongitude, isIgnoreMarker);
            }
        }
        else
            me.setCurrentLocationMarker(map, iCurrentLatitude, iCurrentLongitude, isIgnoreMarker);
    };


    this.setCurrentLocationMarker = function(map, iLat, iLong, isIgnoreMarker)
    {
        var clLatLng1 = new google.maps.LatLng(iLat, iLong);
        map.setCenter(clLatLng1);

        if (!isIgnoreMarker)
        {
            if (me.global_marker == null)
            {
                me.global_marker = new google.maps.Marker({
                    position: clLatLng1,
                    map: map,
                    id:1000
                });
            }
            else
            {
                me.global_marker.setPosition(clLatLng1);
            }
        }
    };

    this.attachInfoMessage=function(clMarker,sMessage,isShowInfoWindow,isCreateNewInfo)
    {
        var infoWindow;

        if(isCreateNewInfo)
            infoWindow=me.createInfoWindow();
        else if(me.infoWindow==null)
        {
            me.infoWindow=me.createInfoWindow();
            infoWindow=me.infoWindow;
        }
        else
            infoWindow=me.infoWindow;

        google.maps.event.addListener(clMarker, 'click', function()
                                                        {
                                                            infoWindow.setContent(sMessage);
//                                                            me.infoWindow.setContent("<div style='line-height:1.35;overflow:hidden;white-space:nowrap;'>"+sMessage+"</div>");
            infoWindow.open(clMarker.get('map'), clMarker);
                                                        });


        if (isShowInfoWindow)
        {
            //var infoWindow=me.createInfoWindow();
            infoWindow.setContent(sMessage);
            infoWindow.open(clMarker.get('map'), clMarker);
        }

    };


    me.distance = 0;
    this.findDistance = function(lat1, lon1, lat2, lon2,fnCallBack,arrParams,iCount)
    {
        if(!iCount)
            iCount = 0;
        var start = new window.google.maps.LatLng(lat1, lon1);
        var end = new window.google.maps.LatLng(lat2,lon2);
        var directionsService = new google.maps.DirectionsService();
        var request = {
            origin: start,
            destination: end,
            travelMode: window.google.maps.TravelMode.DRIVING,//BICYCLING //WALKING
            unitSystem: window.google.maps.UnitSystem.METRIC,//IMPERIAL
            provideRouteAlternatives: true,
            avoidFerries: true,
            avoidHighways: false,
            avoidTolls: true
        };
        directionsService.route(request, function (result, status) {
            if (status == window.google.maps.DirectionsStatus.OK) {
                me.distance = result.routes[0].legs[0].distance.value;
                me.distance=(parseInt(me.distance)/1000).toFixed(1);
                fnCallBack(me.distance,arrParams)
            }else if(status == window.google.maps.DirectionsStatus.OVER_QUERY_LIMIT)
            {
                iCount++;
                if(iCount < 5)
                    setTimeout(function() { clGeoMapUtils.findDistance(lat1, lon1, lat2, lon2, fnCallBack, arrParams, iCount); }, 500);
            }else if(status == window.google.maps.DirectionsStatus.ZERO_RESULTS ||
                status == window.google.maps.DirectionStatus.NOT_FOUND)
            {
                fnCallBack(0,arrParams)
            }

        });

        //return (parseInt(me.distance)/1000).toFixed(1);


        /*var R = 6371; // Radius of the earth in km
        var dLat = deg2rad(lat2 - lat1);  // deg2rad below
        var dLon = deg2rad(lon2 - lon1);
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c; // Distance in km
        return d.toFixed(1);*/
    };

    function getMapContainer(sMapContainer)
    {
        if (!sMapContainer)
            sMapContainer = "map_canvas";
        return document.getElementById(sMapContainer);
    }

    function deg2rad(deg)
    {
        return deg * (Math.PI / 180);
    }

    ;

};


function CLGeoMapMarkerDTO()
{

}

/*
 function CLUserLocationMarkerDTO(userId,dateTime,distance,latitude,longitude,title,description)
 {
 this.iUserId=userId;
 this.lDateTime=dateTime;
 this.dLatitude=latitude;
 this.dLongitude=longitude;
 this.dDistance=distance;
 this.title=title;
 this.description=description;
 }
 */
