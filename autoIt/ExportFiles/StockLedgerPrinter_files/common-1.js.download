
/**
 * Author     : chakradhar
 * Description: THE MAIN PURPOSE OF CREATE  THIS JS IS COMMON SOME FUNCTIONS FOR SUPPORT CROSS BROWSER
 * Functions  :isFunction,createCallback,isDefinegetInnerText,isShiftPressed,isCtrlPressed,isAltPressed,addListener,
 *             removeListener,cancelBubble,getKeyCode,getCharacter,getPosition, getSrcElement,getEvent,getChildren,
 *             removeChlildren,isContains,isFlashSupported,getIndexOf
 *
 */
var cross = new function()
{
    //app.registerInstance("CrossBrowser",this);
    var me=this;

    me.EVENT_ONCLICK=1;
    me.EVENT_ONDBLCLICK=2;
    me.EVENT_ONKEYDOWN=3;
    me.EVENT_ONKEYUP=4;
    me.EVENT_ONKEYPRESS=5;
    me.EVENT_ONMOUSEOVER=6;
    me.EVENT_ONMOUSEOUT=7;
    me.EVENT_ONMOUSEDOWN=8;
    me.EVENT_ONBLUR=9;
    me.EVENT_ONFOCUS=10;
    me.EVENT_ONCONTEXTMENU=11;

    me.EVENT_INTERVAL=12;
    me.EVENT_TIMEOUT=13;
    me.EVENT_ON_WND_UNLOAD=14;
    me.EVENT_ON_WND_MOUSEMOVE=15;
    me.EVENT_ON_WND_HASH_CHANGE=16;
    me.EVENT_ON_WND_SCROLL=17;
    me.EVENT_ON_WND_RESIZE=18;

    me.EVENT_ONMOUSEMOVE=18;
    me.EVENT_ONMOUSEUP=19;
    me.EVENT_ON_WND_FOCUS=20;

    me.TYPE_EXTRASMALL = 0;
    me. TYPE_SMALL = 1;
    me. TYPE_MEDIUM = 2;
    me. TYPE_LARGE = 3;

    this.isIE=function()
    {
        return ( (/msie/i.test(navigator.userAgent) || document.documentMode||(/edge/.test(navigator.userAgent.toLowerCase()))) && (!/opera/i.test(navigator.userAgent)) );
    };

    this.isSafari=function()
    {
        return (/^((?!chrome|android).)*safari/i.test(navigator.userAgent));
    };

    this.isIOS=function()
    {
        return (/iPhone/i.test(navigator.userAgent) || /iPod/i.test(navigator.userAgent) || /iPad/i.test(navigator.userAgent));
    };

    this.isAndroid=function()
    {
        return (/android/i.test(navigator.userAgent));
    };

    this.getIEVersion=function()
    {
        if(/edge/.test(navigator.userAgent.toLowerCase()))
            return navigator.appVersion.match(/Edge\/([\d.]+)/)[1];
        else if(/msie/i.test(navigator.userAgent))
            return navigator.appVersion.match(/MSIE ([\d.]+)/)[1];
        else if(document.documentMode)
            return 11;
        
    };

    /**
     * @author chakradhar
     * @return   float browser version
     */
    this.getBrowserVersion=function()
    {
        var N=navigator.appName, ua=navigator.userAgent, tem;
        var M=ua.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i);
        if(M && (tem= ua.match(/version\/([\.\d]+)/i))!= null) M[2]= tem[1];
        M=M? [M[1], M[2]]: [N, navigator.appVersion, '-?'];
        return M[1];
    };

    this.isFunction=function(sFn)
    {
        return (typeof window[sFn]=="function");
    };

    this.createCallbackFunc=function(obj, fn, args)
    {
        //new
        return  function()
        {
            //writeToLog("typeOf agrs= "+(typeof args) );
            if(typeof args=="object")
            {
                fn.apply(obj, args);
            }
            else
            {
                /*return new function()
                 {*/
                var newargs = [args];
                for (var i = 0; i < arguments.length; i++)
                    newargs.push(arguments[i]);
                fn.apply(obj, newargs);
                /* };*/
            }
        };
    };


    this.callFunction=function(obj, fn, args,iIntervalTime)
    {
        if(iIntervalTime>0)
        {
            me.timer=setTimeout(function()
            {
               return callFunction2(obj,fn,args);
            },iIntervalTime);
        }
        else
            return callFunction2(obj,fn,args);

    };


    this.isDefined=function(objValue)
    {
     //   alert(typeof(objValue))
        return !(typeof(objValue) === 'undefined' || typeof(objValue) === 'unknown' || objValue === null);
      //  return typeof(type) != 'undefined' && typeof(type) != 'unknown';
    };

    this.getInnerText=function(elem)
    {   //alert(elem.tagName)
       if(elem)
       {
        if(elem.textContent)
            return util.trim(elem.textContent);  // mozilla ,safari
        else
            return util.trim(elem.innerText);
       }
    };

    this.setInnerText=function(elem,sText)
    {
        //var sText;

        if(elem)
        {
            if(elem.textContent)
            {
                elem.textContent=sText;
            }
            else
                elem.innerText=sText;
        }
        //return trim(sText);
    };


    // works only for keydown event
    this.isShiftPressed=function(evt)
    {

        /*
         var nav4 = window.Event ? true : false;
         if (nav4)
         {
         if(evt)
         return evt.modifiers & Event.SHIFT_MASK;
         }
         else
         return  window.event.shiftKey;
         return false;
         */
        evt=cross.getEvent(evt) ;
        return evt.shiftKey;
    };

    // works only for keydown event
    this.isCtrlPressed=function(evt)
    {
        evt=cross.getEvent(evt) ;
        return evt.ctrlKey;
    };

    // works only for keydown event. problem in opera
    this.isAltPressed=function(evt)
    {
        evt=cross.getEvent(evt) ;
        return evt.altKey;
    };

    this.addListener_111=(function()
    {
        if(document.addEventListener)
        {
            return function(element, iEvent, fnHandler,isCancelBubble,args)
            {
                if(!args)
                    args=[];
                var sEvent=getEventName(iEvent,"");
                element.addEventListener(sEvent, function(e){me.invokeListener(fnHandler,args,e)}, false);
            };
        }
        else
        {
            return function(element, iEvent, fnHandler,isCancelBubble,args)
            {
                if(!args)
                    args=[];
                var sEvent=getEventName(iEvent,"on");
                element.attachEvent(sEvent, function(e){me.invokeListener(fnHandler,args,e)});
            };
        }

            function getEventName(iEvent,sPrefix)
            {
                switch(iEvent)
                {
                    case me.EVENT_ONCLICK:
                        return sPrefix+"click";
                    case me.EVENT_ONDBLCLICK:
                        return sPrefix+"dblclick";
                    case me.EVENT_ONKEYDOWN:
                        return sPrefix+"keydown";
                    case me.EVENT_ONKEYPRESS:
                        return sPrefix+"keypress";
                    case me.EVENT_ONKEYUP:
                        return sPrefix+"keyup";
                    case me.EVENT_ONMOUSEOVER:
                        return sPrefix+"mouseover";
                    case me.EVENT_ONMOUSEOUT:
                        return sPrefix+"mouseout";
                    case me.EVENT_ONMOUSEDOWN:
                        return sPrefix+"mousedown";
                    case me.EVENT_ONMOUSEMOVE:
                        return sPrefix+"mousemove";
                    case me.EVENT_ONMOUSEUP:
                        return sPrefix+"mouseup";
                    case me.EVENT_ONBLUR:
                        return sPrefix+"blur";
                    case me.EVENT_ONFOCUS:
                        return sPrefix+"focus";
                    case me.EVENT_ONCONTEXTMENU:
                        return sPrefix+"contextmenu";
                    default:
                        alert("Error with addListener..");
                }
                return "";
            }
    }());



    this.addListener=function(elem,iEvent,fnHandler,isCancelBubble,args,iScope)
    {
        if(elem)
        {
            if(!args)
                args=[];

            cross.registerEventListener(iEvent,fnHandler,args,elem,iScope);

            switch(iEvent)
            {
                case me.EVENT_ONCLICK:
                {
                    elem.onclick=function(e)
                    {
                        me.invokeEventListeners(iEvent,args,elem,e);
                        //me.invokeListener(fnHandler,args,e);
                    }
                    break;
                }
                case me.EVENT_ONDBLCLICK:
                {
                    elem.ondblclick=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }

                case me.EVENT_ONKEYDOWN:
                {
                    elem.onkeydown=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }
                case me.EVENT_ONKEYPRESS:
                {
                    elem.onkeypress=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }

                case me.EVENT_ONKEYUP:
                {
                    elem.onkeyup=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }
                case me.EVENT_ONMOUSEOVER:
                {
                    elem.onmouseover=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }
                case me.EVENT_ONMOUSEOUT:
                {
                    elem.onmouseout=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }
                case me.EVENT_ONMOUSEDOWN:
                {
                    elem.onmousedown=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }
                case me.EVENT_ONMOUSEMOVE:
                {
                    elem.onmousemove=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }
                case me.EVENT_ONMOUSEUP:
                {
                    elem.onmouseup=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }
                case me.EVENT_ONBLUR:
                {
                    elem.onblur=function(e)
                    {
                        //cross.registerEventListener(me.EVENT_ONBLUR,fnHandler,args)

                        me.invokeEventListeners(iEvent,args,elem,e);

//                        me.invokeListener(fnHandlers[i],args,e);
                    }
                    break;
                }
                case me.EVENT_ONFOCUS:
                {
                    elem.onfocus=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }
                case me.EVENT_ONCONTEXTMENU:
                {
                    elem.oncontextmenu=function(e)
                    {
//                        me.invokeListener(fnHandler,args,e);
                         me.invokeEventListeners(iEvent,args,elem,e);
                    }
                    break;
                }
                default:
                    alert("Error with addListener");
            }
        }
    };

    this.invokeEventListeners=function(iEvtType,args,objSrc,e)
    {
         for(var i=0; i < arrListeners.length;i++)
        {
            if(arrListeners[i].type==iEvtType && arrListeners[i].evtSrc==objSrc)
            {
//                util.writeToLog(arrListeners[i].listener)
                me.invokeListener(arrListeners[i].listener,arrListeners[i].args,e);
                //me.invokeListener(arrListeners[i].listener,args,e);
            }
        }
    };

    this.invokeListener=function(fnHandler,args,e)
    {
        e=cross.getEvent(e);
        var arrArgs=[];
        for(var i=0; i < args.length; i++)
            arrArgs[i]=args[i];
        arrArgs[arrArgs.length]=e;
        fnHandler.apply(window,arrArgs);
    };

    this.fireEvent=function(element,event)
    {
        if (document.createEventObject){
            // dispatch for IE
            var evt = document.createEventObject();
            return element.fireEvent('on'+event,evt)
        }
        else{
            // dispatch for firefox + others
            var evt = document.createEvent("HTMLEvents");
            evt.initEvent(event, true, true ); // event type,bubbling,cancelable
            return !element.dispatchEvent(evt);
        }
    };

    this.removeListener1=function(objSrc,iEvtType,fnHandler)
    {
        /*var sEvent;
        if(iEvtType==me.EVENT_ONCLICK)
            sEvent="click";*/
         for(var i=0; i < arrListeners.length;i++)
        {
            if(arrListeners[i].type==iEvtType && arrListeners[i].evtSrc==objSrc && arrListeners[i].listener==fnHandler)
            {
                //me.removeListener(objSrc,sEvent,fnHandler);
                me.unregisterEventListener(arrListeners[i].id);
            }
        }
    };

    this.removeListener=function(objElement, sEvent, fnHandler)
    {
        if(objElement.removeEventListener)
        {
            objElement.removeEventListener(sEvent, fnHandler, false);
        }
        else if(objElement.detachEvent)
        {
            objElement.detachEvent("on" + sEvent, fnHandler);
        }
    };

    this.cancelBubble=function(evt,isEnableDefaultBehavior,isEnableEvtPropagation)
    {
        evt = cross.getEvent(evt);
        if(!evt)
            return false;
        var sSrcElm = cross.getSrcElement(evt);
        if(sSrcElm && sSrcElm.nodeName)
        {
            if((sSrcElm.nodeName).toLowerCase() == "select")
            {
                var iKeyCode=cross.getKeyCode(evt);
                if(iKeyCode==9)
                    return true;
                sSrcElm.blur();
                setTimeout(function(){sSrcElm.focus();},0);
            }
        }

        if(evt.stopPropagation)
        {
            if(!isEnableDefaultBehavior)
                evt.preventDefault(); //commented this line to enable default behaviour
            if(!isEnableEvtPropagation)
            {
                evt.stopPropagation();
            }
        }
        else
        {
            evt.cancelBubble = true;
            if(!isEnableDefaultBehavior)
                evt.returnValue=false;
        }
        return false;
    };

    /** this function works based on event type ,
     *  keyDown ,keyup -- for alphabets it returns uppercase key codes only,
     for number pad keys it returns alphabets key codes ..But OPERA works fine ,
     for backspace problem in OPERA..     problem in chrome(keyup)
     *  keyPress -- some special characters not work, like alt,shift,ctl, ...
     *               for backspace problem in OPERA..     problem in chrome
     */

    this.getKeyCode=function(evt)
    {
        evt = cross.getEvent(evt);
        var iKeyCode = evt.keyCode || evt.charCode;
        return iKeyCode;
    };

    this.getCharacter=function(evt)
    {
        var iKeyCode = cross.getKeyCode(evt);
        return  String.fromCharCode(iKeyCode);
    };


    this.getMousePos=function(mouseevent)
    {
        mouseevent = mouseevent || window.event;

        var cursor = {x:0, y:0};
        if (mouseevent.pageX || mouseevent.pageY)
        {
            cursor.x = mouseevent.pageX;
            cursor.y = mouseevent.pageY;
        }
        else
        {
            cursor.x = mouseevent.clientX +  (document.documentElement.scrollLeft || document.body.scrollLeft) -  document.documentElement.clientLeft;
            cursor.y = mouseevent.clientY +  (document.documentElement.scrollTop ||   document.body.scrollTop) -   document.documentElement.clientTop;
        }
        return cursor;
   }

    this.getPosition=function(obj)
    {
        var curleft =0, curtop = 0;
        if (obj!=null && obj.offsetParent)
        {
            curleft = obj.offsetLeft
            curtop = obj.offsetTop
            while (obj = obj.offsetParent) {
                curleft += obj.offsetLeft
                curtop += obj.offsetTop
            }
        }

        return [curleft,curtop];
    };

    this.getSrcElement=function(evt)
    {
        var  evt=cross.getEvent(evt)
        return (evt.srcElement)?evt.srcElement : evt.target
    };

    this.getEvent=function(evt)
    {
        evt = evt ? evt : window.event;
        //if(!evt)
         //  evt=window.Event; //commented for beforesave rule issue in which event should be null or srcElement should not be null but the returned evt doesn't contain srcElement information
        return evt;
    };

    /**
     * this function returns array of immidiate childrens ..
     * @param elem
     * @param arrIncludeIds -- optional, if this argument is passed, elements with matching ids will only be returned
     */
    this.getChildren=function(elem,arrIncludeIds)
    {
        var arrChilds=new Array();
        var iIndex=0;
        var firstNode= elem.firstChild;
        var isAddNode;

        for(var i=0;i<elem.childNodes.length;i++)
        {
            if(elem.childNodes[i].nodeType !== 3 && elem.childNodes[i].nodeName.toLowerCase()!='br')
            {
                //            alert(elem.childNodes[i].nodeName);
                isAddNode = true;

                if(arrIncludeIds)
                {
                    isAddNode = false;

                    for(var j=0; j < arrIncludeIds.length; j++)
                    {
                        if(arrIncludeIds[j]==elem.childNodes[i].id)
                        {
                            isAddNode = true;
                            break;
                        }
                    }
                }

                if(isAddNode)
                {
                    arrChilds[iIndex] = elem.childNodes[i];
                    iIndex++;
                }

            }
        }

        return   arrChilds;

    };

    /**
     * this functiion removes children of element
     * @param elem
     */
    this.removeChlildren=function(elem)
    {
        if(elem)
        {
        while(elem.childNodes.length>0)
            elem.removeChild(elem.childNodes.item(0));
        }
    };
    /**
     * it return true -if the parent contains  that child element
     * @param elemParent
     * @param elemChild
     */
    this.isContains=function(elemParent,elemChild)
    {
        var elemNode=elemChild;
        while(elemNode && elemParent!=elemNode)
            elemNode=elemNode.parentNode;
        return elemNode==null;
    };
    /*
     * this function is used to stop selection in specified area in all browsers
     * */
    this.enableSelection=function(elem,bIsEnable)
    {
        if (typeof elem.onselectstart != "undefined") //IE
            elem.onselectstart = function(){return bIsEnable;};
        /* //Commented for dashboard drag issue
         else if(typeof elem.style.MozUserSelect!="undefined") //Firefox
         {
         if(bIsEnable)
         elem.style.MozUserSelect = "";
         else
         elem.style.MozUserSelect = "none";
         }*/
        else //All other
        {
            if(bIsEnable)
                elem.onmousedown = null;
            else
                elem.onmousedown = function(){return bIsEnable;};
        }
    };

    /* Functions for registering document event listeners */
    var arrListeners=[];
    var iListenerId=1;
    var arrWindowEvents=null;
    /**
     * This function is used for registering an event on an element. If src is null event will be registered on document. For document events scope parameter is used for mentioning either GLOBAL or SCREEN. 
     * @param iEvtType
     * @param objFn
     * @param arrArgs
     * @param objSrc
     * @param iScope
     */
    this.registerEventListener=function(iEvtType,objFn,arrArgs,objSrc,iScope)//objSrc
    {
            //alert(" reg "+objFn);
        if(!objSrc)
            objSrc=null;
        if(!iScope)
            iScope=Constants.SCOPE_APP;

        var iIndex=arrListeners.length;
        arrListeners[iIndex]={"id":iListenerId,"type":iEvtType,"listener":objFn,"args":arrArgs,"evtSrc":objSrc,"scope":iScope};
        iListenerId++;

        return arrListeners[iIndex].id;
    };

    this.unregisterEventListener=function(iListenerId)
    {
        for(var i=0; i < arrListeners.length;i++)
        {
            if(arrListeners[i].id==iListenerId)
            {
                //alert("unreg "+arrListeners[i].listener);
                //            alert("delete "+arrListeners.length+",i="+i);
                arrListeners.splice(i,1);
                //            alert("delete "+arrListeners.length);
                break;
            }
        }
        //alert(arrListeners.length)
    };

    this.unregisterAllListeners=function(iScope)
    {
        //alert("unregisterAllListeners  "+arrListeners.length)
        if(arrListeners)
        {
            if(!iScope)
                iScope=Constants.SCOPE_SCREEN;

            for(var i=0; i < arrListeners.length;)
            {
                //alert(arrListeners[i].scope+","+arrListeners[i].listener)
                if(arrListeners[i].scope==iScope)
                {
                    //alert("removing "+arrListeners[i].listener)
                    arrListeners.splice(i,1);            
                    continue;
                }
                i++;
            }

            /*if(arrListeners)
                alert("length "+arrListeners.length)*/

        }
    };
    
    this.registerWindowEvent=function(iEventId,iType,objFn,arrArgs,iScope)
    {
        if(!arrWindowEvents)
            arrWindowEvents=[];

        if(!iScope)
            iScope=Constants.SCOPE_APP;

        arrWindowEvents[arrWindowEvents.length]={"id":iEventId,"type":iType,"listener":objFn,"args":arrArgs,"scope":iScope};
    };

    this.unregisterWindowEvents=function(iScope)
    {
         if(!iScope)
            iScope=Constants.SCOPE_SCREEN;

        if(arrWindowEvents)
        {
            for(var i=0; i < arrWindowEvents.length;)
            {
                if(arrWindowEvents[i].scope==iScope)
                {
                    if(arrWindowEvents[i].type==me.EVENT_INTERVAL)
                        clearInterval(arrWindowEvents[i].id);
                    arrWindowEvents.splice(i,1);
                    continue;
                }
                i++;
            }
            //arrWindowEvents=null;
        }
    };

    this.getBodyScrollLeft=function()
    {
        return cross.f_filterResults (
                window.pageXOffset ? window.pageXOffset : 0,
                document.documentElement ? document.documentElement.scrollLeft : 0,
                document.body ? document.body.scrollLeft : 0
                );
    };

    this.getBodyScrollTop=function()
    {
        return cross.f_filterResults (
                window.pageYOffset ? window.pageYOffset : 0,
                document.documentElement ? document.documentElement.scrollTop : 0,
                document.body ? document.body.scrollTop : 0
                );
    };

    this.getClientWidth=function()
    {
        return cross.f_filterResults (
                window.innerWidth ? window.innerWidth : 0,
                document.documentElement ? document.documentElement.clientWidth : 0,
                document.body ? document.body.clientWidth : 0
                );
    };

    this.getClientHeight=function()
    {
        return cross.f_filterResults (
                window.innerHeight ? window.innerHeight : 0,
                document.documentElement ? document.documentElement.clientHeight : 0,
                document.body ? document.body.clientHeight : 0
                );
    };

    this.f_filterResults=function(n_win, n_docel, n_body)
    {
        var n_result = n_win ? n_win : 0;
        if (n_docel && (!n_result || (n_result > n_docel)))
            n_result = n_docel;
        return n_body && (!n_result || (n_result > n_body)) ? n_body : n_result;
    };

    /*
     *  this function is used to retun element at specified index
     * arrElems - array of elements
     * iIndex - element position
     * bReverseSearch - search elements in assending or desending order
     * */
    this.getElementNode=function(arrElems, iIndex, bReverseSearch)
    {
        var iElemCount = 0;
        var i = 0;
        if (bReverseSearch)
        {
            for (i = arrElems.length - 1; i >= 0; i--)
            {
                if (arrElems[i].nodeType == 1)// 1=Element_Node
                {
                    iElemCount++;
                }
                if (iElemCount == iIndex)
                {
                    return arrElems[i];
                }
            }

        }
        else
        {
            for (i = 0; i < arrElems.length; i++)
            {
                if (arrElems[i].nodeType == 1)// 1=Element_Node
                {
                    iElemCount++;
                }
                if (iElemCount == iIndex)
                {
                    return arrElems[i];
                }
            }
        }
        return null;
    };

    /*
     *  this function used to return array of elements only, i.e only elements with nodeType=1
     *  arrChilds - array of elements
     * */
    this.getElements=function(arrChilds)
    {
        var arrElems = new Array();
        for (var i = 0; i < arrChilds.length; i++)
        {
            if (arrChilds[i].nodeType == 1)// 1=Element_Node
            {
                arrElems[arrElems.length] = arrChilds[i];
            }
        }
        return arrElems;
    };

    /*
     * this function used to return first element from array of elements
     *  arrElems - array of elements
     * */
    this.getFirstElement=function(arrElems)
    {
        return cross.getElementNode(arrElems, 1, false);
    };

    /*
     * this function used to return last element from array of elements
     *  arrElems - array of elements
     * */
    this.getLastElement=function(arrElems)
    {
        return cross.getElementNode(arrElems, 1, true);
    };

    /*
     * this function used to return element at specified index from array of elements
     *  arrElems - array of elements
     *  iIndex - specific position
     * */
    this.getElementAt=function(arrElems, iIndex)
    {
        /*if((iIndex > this.length/2))
         return getElementNode(this,iIndex,true);
         else*/
        return cross.getElementNode(arrElems, iIndex + 1, false);
    };

    /*
     * this function used to return next element
     * elem -
     * */
    this.getNextSibiling=function(elem)
    {
        elem = elem.nextSibling;
        while (elem && elem.nodeType != 1)// 1=Element_Node
        {
            elem = elem.nextSibling;
        }
        return elem;
    };

     /*
     * this function used to return next element
     * elem -
     * */
    this.getParentElement=function(elem)
    {
        elem = elem.parentNode;
        while (elem && elem.nodeType != 1)// 1=Element_Node
        {
            elem = elem.parentNode;
        }
        return elem;
    };

    /*
     * this function used to return previous element
     * elem -
     * */
    this.getPrevSibiling=function(elem)
    {
        elem = elem.previousSibling;
        while (elem && elem.nodeType != 1)// 1=Element_Node
        {
            elem = elem.previousSibling;
        }
        return elem;
    };

    /*
     *  this function is used to show or hide element
     * */
    this.setVisible=function(elem, bVisible)
    {
        if(elem)
        if (bVisible)
        {
           /// td,tr,table need to be handled differently
            elem.style.display = '';
        }
        else
        {
            elem.style.display = 'none';
        }
    };

    /*
     *  this function is used to return elements's visibility
     * */
    this.isVisible=function(elem)
    {
        var sDisplay = elem.style.display;
        if (util.trim(sDisplay).length == 0 || sDisplay == 'block')
        {
            return true;
        }
        else
        {
            return false;
        }
    };

    /**//*
     *  this function is used to return only text with in element
     * *//*
    this.getInnerText=function(elem)
    {
        var sText;
        sText = elem.innerText;
        if (!sText)
        {
            sText = elem.textContent;
        }
        return util.trim(sText);
    };*/

    this.docOnClick=function(e)
    {
        e=e?e:window.event;

        for(var i=0; i < arrListeners.length;i++)
        {

            if(arrListeners[i].type==me.EVENT_ONCLICK && arrListeners[i].evtSrc==null)
            {
                //alert(arrListeners[i].type+"  calling "+arrListeners[i].evtSrc+"======="+arrListeners[i].listener)
                invokeListener(arrListeners[i].listener,arrListeners[i].args,e);
            }
        }
    };

    this.docOnKeyUp=function(e)
    {
        e=e?e:window.event;

        for(var i=0; i < arrListeners.length;i++)
        {
            if(arrListeners[i].type==me.EVENT_ONKEYUP && arrListeners[i].evtSrc==null)
                invokeListener(arrListeners[i].listener,arrListeners[i].args,e);
        }

        if(me.getKeyCode(e) == 27 && (parent.document.getElementsByClassName("SWindow").length > 0
                || document.getElementsByClassName("SWindow").length > 0)){
            var sParentDlgId,sDlgId;
            sParentDlgId = parent.document.getElementsByClassName("SWindow")[0].id;

            if(document.getElementsByClassName("SWindow").length > 0)
                sDlgId = document.getElementsByClassName("SWindow")[0].id;

            if(sDlgId)
                getDialogBox(sDlgId.substring(0,sDlgId.length-7)).hide();
            else
                parent.getDialogBox(sParentDlgId.substring(0,sParentDlgId.length-7)).hide();
        }
    };

    this.docOnKeyDown=function(e)
    {
        e=e?e:window.event;

        for(var i=0; i < arrListeners.length;i++)
        {
            if(arrListeners[i].type==me.EVENT_ONKEYDOWN && arrListeners[i].evtSrc==null)
                invokeListener(arrListeners[i].listener,arrListeners[i].args,e);
        }
    };

    this.docOnContextMenu=function(e)

    {
        e=cross.getEvent(e);
        var clSrcElement=cross.getSrcElement(e);
       //alert (clSrcElement.nodeName)
       //alert (clSrcElement.getAttribute('type'))
       if(clSrcElement
               && clSrcElement.nodeType==1
               && ((clSrcElement.nodeName.toLowerCase()=='input' && clSrcElement.getAttribute('type') && clSrcElement.getAttribute('type').toLowerCase()=='text')
                    || clSrcElement.nodeName.toLowerCase()=='textarea')
       )
        {
           //alert(clSrcElement.getAttribute('type'))
           return true;
        }
       else
       {
        cross.cancelBubble(e);
        return false;
       }
    };

    this.wndOnUnload=function(e)
    {
        e=e?e:window.event;
        if(arrWindowEvents)
        {
            for(var i=0; i < arrWindowEvents.length;i++)
            {
                if(arrWindowEvents[i].type==me.EVENT_ON_WND_UNLOAD)
                    invokeListener(arrWindowEvents[i].listener,arrWindowEvents[i].args,e);
            }
        }
    };


    this.wndOnMouseMove=function(e)
    {
        e=e?e:window.event;
          //clAppBuffer.setScreenPos()
      if(arrWindowEvents)
        {
            for(var i=0; i < arrWindowEvents.length;i++)
            {
                if(arrWindowEvents[i].type==me.EVENT_ON_WND_MOUSEMOVE)
                    invokeListener(arrWindowEvents[i].listener,arrWindowEvents[i].args,e);
            }
        }
    };

    this.wndOnHashChange=function(e)
    {
        e=e?e:window.event;
          //clAppBuffer.setScreenPos()
      if(arrWindowEvents)
        {
            for(var i=0; i < arrWindowEvents.length;i++)
            {
                if(arrWindowEvents[i].type==me.EVENT_ON_WND_HASH_CHANGE)
                    invokeListener(arrWindowEvents[i].listener,arrWindowEvents[i].args,e);
            }
        }
    };

    this.wndOnScroll=function(e)
    {
        e=e?e:window.event;

        if(arrWindowEvents)
        {
            for(var i=0; i < arrWindowEvents.length;i++)
            {
                if(arrWindowEvents[i].type==me.EVENT_ON_WND_SCROLL)
                    invokeListener(arrWindowEvents[i].listener,arrWindowEvents[i].args,e);
            }
        }
    };
    this.wndOnFocus=function(e)
    {
        e=e?e:window.event;

        if(arrWindowEvents)
        {
            for(var i=0; i < arrWindowEvents.length;i++)
            {
                if(arrWindowEvents[i].type==me.EVENT_ON_WND_FOCUS)
                    invokeListener(arrWindowEvents[i].listener,arrWindowEvents[i].args,e);
            }
        }
    };

    this.wndResize=function(e)
    {
        e=e?e:window.event;
        if(arrWindowEvents) {
            for (var i = 0; i < arrWindowEvents.length; i++) {

                if(arrWindowEvents[i].type==me.EVENT_ON_WND_RESIZE)
                    invokeListener(arrWindowEvents[i].listener,arrWindowEvents[i].args,e);
            }
        }
    };

    /**
     * Private function used in common document event handlers
     */
    function invokeListener(fnListener,arrArgs,e)
    {
        var args =[];
        if(arrArgs!=null)
        {
            for(var j=0; j < arrArgs.length; j++)
                args[j]=arrArgs[j];
        }

        args[args.length]=e;
        cross.callFunction(window,fnListener,args);
    }

    this.removeInstanceFromPool=function(objInstancePool,key)
    {
        var value=objInstancePool[key];
        if(objInstancePool[key])
        { delete objInstancePool[key];
            value=null;
        }

        if(window[key])
        {
            try{
                delete window[key] ;    //deleting singleton objects
                window[key]=null;
            }
            catch(e)
            {
                window[key]=null;// IE work around
            }

        }

    };
    this.getImageDimensions = function(clImageElement)
    {
        var iWidth=0,iHeight=0;

        //clElement;// assumed as image element
        if(me.isIE())
        {
            return getNatural(clImageElement);
        }
       /* if ('naturalWidth' in new Image)// IE 8,7
        {
            return getNatural(clImageElement);
        }
        else if(clImageElement.naturalWidth)//IE 9
        {
            iWidth=clImageElement.naturalWidth;
            iHeight=clImageElement.naturalHeight;
        }*/
        else // other browers
        {
            iWidth=clImageElement.width;
            iHeight=clImageElement.height;
        }
        function getNatural (DOMelement)
        {
            var img = new Image();
            img.src = DOMelement.src;
            return {width: img.width, height: img.height};
        }
        return {width: iWidth, height: iHeight};
    };

    /**
     * returns true if flash is installed.
     */
    this.isFlashSupported = function()
    {
        var isSupported=false;
        if(navigator.plugins && navigator.mimeTypes.length)
        {
            var x = navigator.plugins["Shockwave Flash"];
            if(x && x.description)
            {
                isSupported=true;
            }
            else
                isSupported=false;
        }
        else
        {
            try {
                axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
                isSupported=true;

            }
            catch(e)
            {
                isSupported=false
            }
        }
        return isSupported;
    };

    this.isSupportsHTML5ColorPicker=function()
    {
        var i = document.createElement("input");
        i.setAttribute("type", "color");
        return ((i.type !== "text" && !me.isSafari() )?1:0);
    };

    /**
     *    return index of the element from parentNode
     * @param elem
     */
    this.getIndexOf=function(childEl)
    {
        var arr,i=0,iLen;
        arr=me.getChildren(childEl.parentNode);
        iLen=arr.length;
        for(i;i<iLen;i++)
        {
            if(childEl==arr[i])
                break;
        }
        return i;
    };

     /**
     *   it unescapes the html special code like &amp; etc.. and returns the normal string
     * @param elem
     */
   this.unescapeHTML=function(html)
   {
       var sReturn=null;
        var htmlNode = document.createElement("DIV");
        htmlNode.innerHTML = html;
        if(htmlNode.innerText !== undefined)
           sReturn=htmlNode.innerText; // IE
       else
           sReturn= htmlNode.textContent; // FF

       //delete htmlNode;
       return sReturn;
   };
    /**
     * returns center positions of the document.
     */
   this.getCenterPositions=function()
   {
       var x,y;
       x=document.body.clientWidth / 2 ;
       y=document.body.clientHeight/ 2 ;
       if(me.isIE&&document.getElementById("containerDiv")){
           x+=document.getElementById("containerDiv").scrollLeft;
           y+=document.getElementById("containerDiv").scrollTop;
       }
       else{
           x+=document.body.scrollLeft;
           y+=document.body.scrollTop;
       }
       return [x,y];
   };



    this.fireEvent2=function (obj, evt)
    {
     var fireOnThis = obj;
     if( document.createEvent ) {
       var evObj = document.createEvent('MouseEvents');
       evObj.initEvent( evt, true, false );
       fireOnThis.dispatchEvent( evObj );
     }
      else if( document.createEventObject ) { //IE
       var evObj = document.createEventObject();
       fireOnThis.fireEvent( 'on' + evt, evObj );
     }
    };

     /**
     * returns font-family name of the given fontid.
     */
    this.getFontFamily=function(byFontId)
    {
        var sFamilyName=null;
        byFontId=parseInt(byFontId);
        switch(byFontId)
        {
            case Constants.IFont.ARIAL :
                sFamilyName="Arial";
                break;
            case Constants.IFont.CALIBRI :
                sFamilyName="Calibri";
                break;
            case Constants.IFont.CAMBRIA :
                sFamilyName="Cambria";
                break;
            case Constants.IFont.CAMBRIA_MATH :
                sFamilyName="Cambria Math";
                break;
            case Constants.IFont.CANDARA :
                sFamilyName="Candara";
                break;
            case Constants.IFont.COMIC_SANS_MS :
                sFamilyName="Comic Sans MS";
                break;
            case Constants.IFont.CONSOLAS :
                sFamilyName="Consolas";
                break;
            case Constants.IFont.CONSTANTIA :
                sFamilyName="Constantia";
                break;
            case Constants.IFont.CORBEL :
                sFamilyName="Corbel";
                break;
            case Constants.IFont.COURIER :
                sFamilyName="Courier";
                break;
            case Constants.IFont.COURIER_NEW :
                sFamilyName="Courier New";
                break;
            case Constants.IFont.FIXEDSYS :
                sFamilyName="Fixedsys";
                break;
            case Constants.IFont.FRANKLIN_GOTHIC :
                sFamilyName="Franklin Gothic";
                break;
            case Constants.IFont.GABRIOLA :
                sFamilyName="Gabriola";
                break;
            case Constants.IFont.GEORGIA :
                sFamilyName="Georgia";
                break;
            case Constants.IFont.IMPACT :
                sFamilyName="Impact";
                break;
            case Constants.IFont.LUCIDA_CONSOLE :
                sFamilyName="Lucida Console";
                break;
            case Constants.IFont.LUCIDA_SANS_UNICODE :
                sFamilyName="Lucida Sans Unicode";
                break;
            case Constants.IFont.MICROSOFT_SANS_SERIF :
                sFamilyName="Microsoft Sans Serif";
                break;
            case Constants.IFont.MS_SANS_SERIF :
                sFamilyName="MS Sans Serif";
                break;
            case Constants.IFont.MS_SERIF :
                sFamilyName="MS Serif";
                break;
            case Constants.IFont.PALATINO_LINOTYPE :
                sFamilyName="Palatino Linotype";
                break;
            case Constants.IFont.SEGOE_PRINT :
                sFamilyName="Segoe Print";
                break;
            case Constants.IFont.SEGOE_SCRIPT :
                sFamilyName="Segoe Script";
                break;
            case Constants.IFont.SEGOE_UI :
                sFamilyName="Segoe UI";
                break;
            case Constants.IFont.SEGOE_UI_SYMBOL :
                sFamilyName="Segoe UI Symbol";
                break;
            case Constants.IFont.SYSTEM :
                sFamilyName="System";
                break;
            case Constants.IFont.TAHOMA :
                sFamilyName="Tahoma";
                break;
            case Constants.IFont.TIMES_NEW_ROMAN :
                sFamilyName="Times New Roman";
                break;
            case Constants.IFont.TREBUCHET_MS :
                sFamilyName="Trebuchet MS";
                break;
            case Constants.IFont.VERDANA :
                sFamilyName="Verdana";
                break;
        }
        return sFamilyName;
    };

    this.isDocumentScrollExist = function()
    {
        return me.isScrollExist(me.getDocumentScrollObject());
    };

    this.isDocumentHorizontalScrollExist = function()
    {
        return me.isHorizontalScrollExist(me.getDocumentScrollObject());
    };

    this.isDocumentVerticalScrollExist = function()
    {
        return me.isHorizontalScrollExist(me.getDocumentScrollObject());
    };

    this.getDocumentScrollObject=function()
    {
        if(me.isIE()&& me.getBrowserVersion() < 9 && document.getElementById("containerDiv"))
            return document.getElementById("containerDiv");
        else
            return document.body;
    };

    this.isScrollExist = function(objContainer)
    {
        return (me.isHorizontalScrollExist(objContainer) || me.isVerticalScrollExist(objContainer));
    };

    this.isHorizontalScrollExist = function(objContainer)
    {
        return objContainer.scrollWidth>objContainer.clientWidth;
    };

    this.isVerticalScrollExist = function(objContainer)
    {
       return objContainer.scrollHeight>objContainer.clientHeight;
    };

    this.getScreenType = function()
    {
        var iWidth = cross.getClientWidth();
        if(iWidth>=1200)
            return me.TYPE_LARGE;
        else if(iWidth>=992 && iWidth<=1200)
            return me.TYPE_MEDIUM;
        if(iWidth>=768 && iWidth<992)
            return me.TYPE_SMALL;
        else if(iWidth < 768)
            return me.TYPE_EXTRASMALL;
    };


    this.addVisibilityChangeListener=function()
    {
        document.visibilitychange=null;
        var isVisibilityChangeCalled=false;

        if(!document.isVisibilityChangeCalled)
        {
            //console.log("*******  registred ****"+isVisibilityChangeCalled);
            clAppBuffer.setDocumentVisible(true);
            document.addEventListener('visibilitychange',a);
        }

        function a()
        {
            //console.log("*******  called ****"+isVisibilityChangeCalled);
            document.isVisibilityChangeCalled=true;

            if (isVisibilityChangeCalled && document.hidden)
            {
                //console.log("*******  hidden ****");
                clAppBuffer.setDocumentVisible(false);
            }
            else
            {
                //console.log("*******  visible ****");
                clAppBuffer.setDocumentVisible(true);
            }
            isVisibilityChangeCalled=true;
        }
    };

    this.isSupportsHTML5FileAPI=function()
    {
            // Checking all the possible window objects needed for file api
            //if (window.File && window.FileReader && window.FileList && window.Blob)
            if (window.File && window.FileList && window.Blob) //removed window.FileReader  for supporting safari browser
                return true;
            return false;
        };

    /*this.isSupportsHTML5ColorPicker=function()
         {
         var i = document.createElement("input");
         i.setAttribute("type", "color");
         return (i.type !== "text"?1:0);
         };*/
    this.getHTML5Support=function()
    {
            var iHTML5Support=0;
            if(me.isSupportsHTML5FileAPI())
                iHTML5Support=util.packBit(iHTML5Support,Constants.IHTML5_SUPPORT.UPLOAD);

            var objInput = document.createElement("input");
            objInput.setAttribute("type", "color");
            if(objInput.type !== "text")
                iHTML5Support=util.packBit(iHTML5Support,Constants.IHTML5_SUPPORT.COLOR_PICKER);
            return iHTML5Support;
        };

};

function callFunction2(obj, fn, args)
{
    if(fn)
    {
        if(typeof args=="object")
        {
            return fn.apply(obj, args);
        }
        else
        {
            var newargs = [args];
            for (var i = 0; i < arguments.length; i++)
                newargs.push(arguments[i]);
            return fn.apply(obj, newargs);
        }
    }
    return null;
};


document.onclick=cross.docOnClick;
document.onkeyup=cross.docOnKeyUp;
document.onkeydown=cross.docOnKeyDown;
document.oncontextmenu=cross.docOnContextMenu;


/*if ("onpagehide" in window) // chrome/safari
{
    window.onpagehide=cross.wndOnUnload;
    alert(window.onpagehide)
}
else*/

if(window.onbeforeunload || window.onbeforeunload==null)// html5
{
    if(cross.isIE() && cross.getIEVersion()!=9)
        window.onbeforeunload=cross.wndOnUnload;
}
else // IE,firefox
    window.onunload=cross.wndOnUnload;


  window.onmousemove=cross.wndOnMouseMove;
if ("onhashchange" in window)
{
    window.onhashchange=cross.wndOnHashChange;
}

window.onscroll=cross.wndOnScroll;
window.onfocus=cross.wndOnFocus;
window.onresize=cross.wndResize;


window.addEventListener('error', function (e)
{
    var stack = e.error.stack;
    var message = e.error.toString();
    if (stack)
    {
        message += '\n' + stack;

    }

    if(console)
        console.log(message);
    message=util.encodeHTML(message);
//    msg.showMessage(0,message,"Script Error",500);
        //alert(message);


});

var Constants = new function()
{

    this.IOPERATOR_EQUALTO = 0;
    this.IOPERATOR_NOTEQUALTO = 1;
    this.IOPERATOR_LESSTHAN = 2;
    this.IOPERATOR_GREATERTHAN = 3;
    this.IOPERATOR_LESSTHANOREQUALTO = 4;
    this.IOPERATOR_GREATERTHANOREQUALTO = 5;
    this.IOPERATOR_CONTAINING = 6;
    this.IOPERATOR_NOTCONTAINING = 7;
    this.IOPERATOR_ISBLANK = 8;
    this.IOPERATOR_ISNOTBLANK = 9;
    this.IOPERATOR_BEGINSWITH = 10;
    this.IOPERATOR_DOESNOTBEGINSWITH = 11;
    this.IOPERATOR_MATCHPATTERN = 12;
    this.IOPERATOR_DOESNOTMATCHPATTERN = 13;
    this.IOPERATOR_VALUECHNAGES = 20;

    this.IOPERATOR_EQUALSANY = 14;
    this.IOPERATOR_EQUALSALL = 15;
    this.IOPERATOR_BETWEEN= 16;
    this.UNIQUEBY=17;

    this.IOPERATOR_WITH= 18;
    this.IOPERATOR_WITHOUT= 19;
    this.IOPERATOR_VALUECHANGE= 20;
    this.IOPERATOR_SLABBYDAY= 21; //SlabByDay
    this.IOPERATOR_SLABBYMONTH= 22;
    this.IOPERATOR_SLABBYQUARTER= 23;
    this.IOPERATOR_SLABBYFISCALQUARTER= 24;
    this.IOPERATOR_SLABBYYEAR= 25;



    this.DATATYPE_TEXT = 0;
    this.DATATYPE_NUMBER = 1;
    this.DATATYPE_BOOLEAN = 2;
    this.DATATYPE_DATETIME = 3;
    this.DATATYPE_DATE = 4;
    this.DATATYPE_TIME = 5;
    this.DATATYPE_FRACTION = 6;
    this.DATATYPE_PICTURE = 7;
    this.DATATYPE_STRINGLIST = 8;
    this.DATATYPE_NUMBERLIST = 9;
    this.DATATYPE_DOCVIEWER = 10;
    this.DATATYPE_UPDATEDTIME = 11;
    this.DATATYPE_MASTER = 12;
    this.DATATYPE_BIGNUMBER = 13;
    this.DATATYPE_EXT_TABLE = 14;
    /*this.DATATYPE_EMAIL = 101;
     this.DATATYPE_PHONE = 102;*/


    //Control Type
    this.CONTROLTYPE_TXTBOX = 0;
    this.CONTROLTYPE_SPINCTRL = 1;
    this.CONTROLTYPE_COMBOBOX = 2;
    this.CONTROLTYPE_RADIOBUTTON = 3;
    this.CONTROLTYPE_OPTIONCTRL = 4;
    this.CONTROLTYPE_DATEPICKER = 5;
    this.CONTROLTYPE_TIMEPICKER = 6;
    this.CONTROLTYPE_DOCUMENTCTRL = 7;
    this.CONTROLTYPE_PICTUREBOX = 8;
    this.CONTROLTYPE_CHECKBOX = 9;
    this.CONTROLTYPE_SLIDERCTRL = 10;
    this.CONTROLTYPE_COMPOSITE_FLD = 11;
    this.CONTROLTYPE_PHONE = 12;
    this.CONTROLTYPE_EMAIL = 13;
    this.CONTROLTYPE_WEBSITE = 14;
    this.CONTROLTYPE_COLOR_PICKER = 15;
    this.CONTROLTYPE_BUTTON = 16;
    this.CONTROLTYPE_APPROVAL_STATUS= 51;
    this.CONTROLTYPE_MULTI_SELECT = 52;
    this.CONTROLTYPE_RADIO_WITH_IMAGE = 56;
    this.CONTROLTYPE_DURATION = 57;
    this.CONTROLTYPE_SIGNATURE = 58;
    this.CONTROLTYPE_TIMER = 59;
    this.CONTROLTYPE_BILL_ADDRESS= 64;
    this.CONTROLTYPE_COMBOBOX_WITH_COLOR = 66;
    this.CONTROLTYPE_COMBOBOX_WITH_IMAGES = 67;
    this.CONTROLTYPE_RADIO_WITH_COLOR = 68;
    this.CONTROLTYPE_CARD_SCAN = 72;
    this.CONTROLTYPE_LINK_START = 80;
    this.CONTROLTYPE_CARD_NO= 111;
    this.CONTROLTYPE_HEADER_CODE=150;
    this.CONTROLTYPE_VIDEO= 112;
    this.CONTROLTYPE_AUDIO= 113;


    //Display Type
    this.DISPLAYTYPE_NONE = 0;
    this.DISPLAYTYPE_READONLY = 1;
    this.DISPLAYTYPE_INFOFIELD = 2;
    this.DISPLAYTYPE_HIDDEN = 3;
    this.DISPLAYTYPE_HIDDENINGRP = 4;
    this.DISPLAYTYPE_HIDDENINLEAF = 5;
    this.DISPLAYTYPE_MANDATORY = 6;
    this.DISPLAYTYPE_MANDATORYINGRP = 7;
    this.DISPLAYTYPE_MANDATORYINLEAF = 8;


    //Field Properties
    this.PROP_AUDITTRIAL = 0;
    this.PROP_COPYFROMPARENT = 1;
    this.PROP_CANNOTEXPORT = 2;
    this.PROP_CANNOTIMPORT = 3;
    this.PROP_INCLINQUICKCREATE = 4;
    this.PROP_NOTAVAILFORREPORTS = 5;
    this.PROP_MERGEFIELD = 6;
    this.PROP_MASSUPDATABLE = 7;
    this.PROP_SPELLCHECK = 8;

    //Behaviour
    this.BEHAVIOUR_NONE = 0;
    this.BEHAVIOUR_PASSWORD = 1;
    this.BEHAVIOUR_SELECTION = 2;
    this.BEHAVIOUR_AUTOCOMPLETE = 3;
    this.BEHAVIOUR_MULTILINE = 4;
    this.BEHAVIOUR_INCREMENTAL = 5;

    //Charecter Casing
    this.CHARCASING_NONE = 0;
    this.CHARCASING_UPPER = 1;
    this.CHARCASING_LOWER = 2;
    this.CHARCASING_PROPERSENTENCE = 3;

    //Text Alignment
    this.TEXTALIGN_LEFT = 0;
    this.TEXTALIGN_RIGHT = 1;
    this.TEXTALIGN_CENTER = 2;

    // Position of the image,....
    this.POSITION_TOP = 0;
    this.POSITION_BOTTOM = 1;
    this.POSITION_BOTH = 2;

    this.SORTBY_NAME = 0;
    this.SORTBY_DATATYPE = 1;
    this.SORTBY_GROUP = 2;

    this.CHANGEVAL_NONE = 0;
    this.CHANGEVAL_VALUE = 1;
    this.CHANGEVAL_FIELD = 2;
    this.CHANGEVAL_FORMULA = 3;

    this.RULES_DISP_NONE = 0;
    this.RULES_DISP_MANDATORY = 1;
    this.RULES_DISP_HIDDEN = 2;
    this.RULES_DISP_DISABLE = 3;
    this.RULES_DISP_HIDEGROUP = 4;
    this.RULES_DISP_DISABLE_GROUP = 5;
    this.DISPLAYTYPE_DISABLE_ROW_ADDITION = 6;
    this.DISPLAYTYPE_DISABLE_ROW_DELETION = 7;

    this.MSGTYPE_INFO = 0;
    this.MSGTYPE_WARNANDPROCEED = 1;
    this.MSGTYPE_WARNANDRESTRICT = 2;




    //rules
    /*this.APPLYON_ONEDIT = 0;
     this.APPLYON_BEFORESAVE = 1;
     this.APPLYON_BEFOREDELETE = 2;

     this.APPLYON_ONLEAVE = 3;*/

    this.APPLYON_CREATEGROUPS = 0;
    this.APPLYON_LOAD = 1;
    this.APPLYON_NEWRECORD = 2;
    this.APPLYON_ONEDIT = 3;
    this.APPLYON_BEFORESAVE = 4;
    this.APPLYON_BEFOREDELETE = 5;
    this.APPLYON_ONENTER = 6;
    this.APPLYON_ONLEAVE = 7;

    this.COMPARE_WITH_VALUE = 1;//old=0
    this.COMPARE_WITH_FIELD = 2;//old=1
    this.COMPARE_WITH_FORMULA = 3;//old=2
    this.COMPARE_WITH_TEXT = 4;//old=3

    this.CONJUNCTION_ONLY = 0;
    this.CONJUNCTION_OR = 2;//old=1
    this.CONJUNCTION_AND = 1;//old=2
    this.CONJUNCTION_LIKE = 10; // used in the query builder ex:lookup window

    //    this.COMPARE_WITH_VALUE = 0;
    //    this.COMPARE_WITH_FIELD = 1;
    //    this.COMPARE_WITH_FORMULA = 2;

    //    this.COMPARE_WITH_TEXT = 3;
    //
    //    this.CONJUNCTION_ONLY = 0;
    //    this.CONJUNCTION_OR = 1;
    //    this.CONJUNCTION_AND = 2;
    //    this.CONJUNCTION_LIKE = 10; // used in the query builder ex:lookup window

    this.ALERTTYPE_SMS = 0;
    this.ALERTTYPE_EMAIL = 1;
    this.ALERTTYPE_DASHBOARD = 2;
    this.ALERTTYPE_POPUP = 3;
    this.ALERTTYPE_GTALK = 4;

    this.TYPE_USER = 0;
    this.TYPE_ROLE = 1;
    this.TYPE_TEAM= 2;
    this.TYPE_HIERARCHY =3;
    this.TYPE_LOGGEDINUSER=4;
    this.TYPE_LEVEL =5;
    this.TYPE_QUEUES=6;
    this.TYPE_ALL_USERS=7;
    this.TYPE_PROFILE=8;// used in addprofilerights method
    this.TYPE_CONTACT=9; // customer from contacts, requests, ect  ( added for showing notifications for customer)


    //Horizetanl alignment
    this.HOR_ALIGN_LEFT = 0;
    this.HOR_ALIGN_RIGHT = 1;
    this.HOR_ALIGN_CENTER = 2;

    //Vertical alignment
    this.VER_ALIGN_TOP = 0;
    this.VER_ALIGN_BOTTOM = 1;
    this.VER_ALIGN_CENTER = 2;

    //Sign
    this.SIGN_NONE = 0;
    this.SIGN_DR = 1;
    this.SIGN_PLUS_MINUS = 2;

    //calendar
    this.SUNDAY = 0;
    this.MONDAY = 1;
    this.TUESDAY = 2;
    this.WEDNESDAY = 3;
    this.THURSDAY = 4;
    this.FRIDAY = 5;
    this.SATURDAY = 6;



    this.JANUARY = 1;
    this.FEBRUARY = 2;
    this.MARCH = 3;
    this.APRIL = 4;
    this.MAY = 5;
    this.JUNE = 6;
    this.JULY = 7;
    this.AUGUST = 8;
    this.SEPTEMBER = 9;
    this.OCTOBER = 10;
    this.NOVEMBER = 11;
    this.DECEMBER = 12;

    this.FIRST = 0;
    this.SECOND = 1;
    this.THIRD = 2;
    this.FOURTH = 3;
    this.LAST = 4;


    this.DAY = 0;
    this.WEEK = 1;
    this.MONTH = 2;
    this.YEAR = 3;
    this.MINUTES = 4;
    this.HOURS = 5;

    this.IMKT_MINUTES = 1;
    this.IMKT_HOURS = 2;
    this.IMKT_DAYS = 3;
    this.IMKT_WEEKS = 4;
    this.IMKT_MONTHS= 5;
    this.IMKT_YEARS = 9


    this.ENDAFTER = 0;
    this.ENDBY = 1;
    this.NEVRENDING = 2;

    this.ON_DAY = 0;
    this.THE = 1;

    this.RETURN_DUPLICATE_CALENDAR = -1;
    this.RETURN_DUPLICATE_SHIFTNAME = -2;
    this.RETURN_DUPLICATE_HOLIDAY = -3;
    this.RETURN_DUPLICATE_EXCEPTION = -4;
    this.RETURN_DUPLICATE_WORKWEEK = -5;

    this.IMPORT_MODULETYPE_NEW = 0;

    this.IMPORT_TYPE_TXT = 1;
    this.IMPORT_FILE_CSV = 2;
    this.IMPORT_FILE_VCF = 3;
    this.IMPORT_FILE_EXCEL = 4;
    this.IMPORT_FILE_DBF = 5;
    this.IMPORT_FILE_TABSEPERATED = 6;
    this.IMPORT_FILE_CUSTOMDELIMITED = 7;

    this.IMPORT_FILEFORMAT_NONE = 1;
    this.IMPORT_FILEFORMAT_DOUBLEQUOTE = 2;
    this.IMPORT_FILEFORMAT_SINGLEQUOTE = 3;
    this.IMPORT_FILEFORMAT_OTHER = 4;

    this.IMPORT_DUPREC_UPDATE = 1;
    this.IMPORT_DUPREC_SKIP = 2;
    this.IMPORT_DUPREC_CLONE = 3;

    this.IMPORT_NEWREC_INSERT = 1;
    this.IMPORT_NEWREC_SKIP = 2;

    this.UTF8 = 1;
    this.ISO = 2;
    this.UTF16 = 3;

    this.INR = 1;
    this.DOLLAR = 2;
    this.AUSDOLLAR = 3;
    this.EURO = 4;
    this.POUND = 5;
    this.YEN = 6;

    this.DDMMYYYY = 0;/// as 20/2/YYYY
    this.MMDDYYYY = 1;/// as 02/20/YYYY
    this.YYYYMMDD = 2;// as  YYYY/02/20

    this.DD_MM_YYYY = 3;/// as 20-2-YYYY
    this.MM_DD_YYYY = 4;// as 02-20-YYYY
    this.YYYY_MM_DD = 5;//as YYYY-02-20

    this.DD___MM___YYYY = 6;// as 0705YYYY
    this.MM___DD___YYYY = 7;// as 0507YYYY
    this.YYYY___MM___DD = 8;// as YYYY0705

    this.DDMMYY = 9;/// as 20/2/YY
    this.MMDDYY = 10;/// as 02/20/YY
    this.YYMMDD = 11;/// as YY/02/12

    this.DD_MM_YY = 12;/// as 20-02-07
    this.MM_DD_YY = 13;/// as 02-20-07
    this.YY_MM_DD = 14;/// as 07-02-17

    this.DD___MM___YY = 15; // as 070522
    this.MM___DD___YY = 16; // as 220507
    this.YY___MM___DD = 17; // as 220507

    this.DD____MM____YYYY = 18;/// as 07\05\YYYY
    this.MM____DD____YYYY = 19;/// as 02\20\YYYY
    this.YYYY____MM____DD = 20;/// as YYYY\02\20

    this.DD____MM____YY = 21; /// as 07\05\yy
    this.MM____DD____YY = 22; /// as 05\07\yy
    this.YY____MM____DD = 23; /// as yy\07\05

    this.DDMONYYYY = 24; /// as 20/jun/YYYY
    this.DDMONYY = 25; /// as 20/jun/07

    this.DD_MON_YYYY = 26;/// as 20-jun-YYYY
    this.DD_MON_YY = 27;/// as 20-jun-07

    this.DD___MON___YYYY = 28; /// as 20junYYYY
    this.DD___MON___YY = 29; /// as 20jun07

    this.DD__MON__YYYY = 30;/// as 20 jun YYYY
    this.DD__MON__YY = 31;/// as 20 jun 07

    this.MON__DD__YYYY__TIME_HHMMAMPM = 51;/// as Oct 13, 2011 11:59 AM,

    /*this.DDMMYYYY = 0;/// as 20/2/YYYY
     this.MMDDYYYY = 1;/// as 02/20/YYYY
     this.YYYYMMDD = 2;// as  YYYY/02/20
     this.DDMMYY = 3;/// as 20/2/YYYY
     this.DD_MM_YYYY = 4;/// as 20-2-YYYY
     this.DD_MM_YY = 5;/// as 20-2-07
     this.DDMONYYYY = 6; /// as 20junYYYY
     this.DDMONYY = 7; /// as 20jun07
     this.DD__MON__YYYY = 8;/// as 20 jun YYYY
     this.DD__MON__YY = 9;/// as 20 jun 07

     this.MM_DD_YYYY = 10;// as 02-20-YYYY
     this.YYYY_MM_DD = 11;//as YYYY-02-20
     this.DD___MM___YYYY = 12;//0705YYYY
     this.DD___MM___YY = 13; //070507
     this.MMDDYY = 14;/// as 02/20/07
     this.DD____MM____YYYY = 15;//07\05\YYYY
     this.DD____MM____YY = 16; //07\05\yy
     this.MM____DD____YYYY = 17; //02\20\YYYY
     this.DD_MON_YY = 18;/// as 20-jun-07
     this.DD_MON_YYYY = 19;/// as 20-jun-YYYY*/

    this.HHMM = 1; //TODO: remove
    this.HHMMAMPM = 2;//TODO: remove

    this.TIME_HHMM = 1;
    this.TIME_HHMMAMPM = 2;
    this.TIME_HHMMSS = 3;
    this.TIME_HHMMSSAMPM = 4;

    this.LINEISTIME = 1;
    this.PHOENIXISTIME = 2;
    this.TONGATIME = 3;
    this.CHATHAMSTANDARDTIME = 4;
    this.PETROPAVLOVSKKAMCHATSKISUMMERTIME = 5;
    this.NEWZEALANDSTANDARDTIME = 6;
    this.FIJITIME = 7;
    this.NORFOLKTIME = 8;
    this.SOLOMONISTIME = 9;

    // SECURITY RELATED CONSTANTS
    this.ACCESS_PRIVATE = 1;
    this.ACCESS_PARENT = 2;
    this.ACCESS_PUBLIC_READONLY = 3;
    this.ACCESS_PUBLIC_READWRITE = 4;
    this.ACCESS_PUBLIC_READWRITETRANSFER = 5;
    this.ACCESS_PUBLIC_FULL = 6;
    this.PROFILE_MODULE = 1;
    this.PROFILE_RELATEDMODULE = 2;
    //for all users
    this.TEAM_ALLUSERS = 0;
    this.TEAM_ALLTEAMS = 1;
    // SECURITY ACTIONS(PRFILE AND ROLES)
    this.ACTION_FULL = 1;
    this.ACTION_READ = 2;
    this.ACTION_CREATE = 3;
    this.ACTION_WRITE = 4;
    this.ACTION_MODIFY = 5;
    this.ACTION_DELETE = 6;
    this.ACTION_SHARE = 7;
    this.ACTION_TRANSFER = 8;
    this.ACTION_APPEND = 9;
    this.ACTION_HIDE = 10;

    //profiles field
    this.ACTION_GLOBALSHARING = 0;//
    this.ACTION_PROFILE = 1;
    this.ACTION_ROLE = 2;
    this.ACTION_RELATEDMODULE = 3;
    this.ACTION_FIELDS = 4;
    //profiles field
    // SECURITY ACTIONS(PRFILE AND ROLES)
    // SECURITY RELATED CONSTANTS

    //Standard fields
    this.STANDARADFLD = 1;
    this.USERDEFINEDFLD = 0;

    //Table type
    this.TABLETYPE_HEADER = 0;
    this.TABLETYPE_BODY = 1;

    //AssignmentRule
    this.SCOPE_PUBLIC = 0;
    this.SCOPE_PRIVATE = 1;

    this.ALLOC_MANUAL = 1;
    this.ALLOC_AUTO = 2;

    this.ROUND_ROBIN = 1;
    this.LOAD_BASED = 2;
    this.PERCENT_BASED = 3;

    /*
     this.TYPE_USER = 1;
     this.TYPE_TEAM = 2;
     this.TYPE_ROLE = 3;
     */
    this.SHIPMENT_BOOKING=2460;  //// todo Need to delete
    this.MSTR_USER = 2564;
    //    this.MSTR_ROLES = 54; /// Commented by Koti
    this.MSTR_ROLES = 2568;
    this.MODULE_FIELDS = 152;
    this.MSTR_TEAMS = 2569;
    this.MSTR_HIERARCHYLEVELS = 2069;

    //// Work flow popup menu related
    this.PERIODIC = 4;
    this.EMAIL_RECEIVE= 8;
    this.EMAIL = 1;
    this.SMS = 2;
    this.TASK = 3;
    this.UPDATEFIELD = 4;
    this.EXMODULE = 5;
    this.ALERT = 6;
    this.NEWRECORD = 7;
    this.FOLLOWUP = 8;
    this.SHARING = 9;
    this.LINKMODULE = 10;
    this.SOCIAL_TEMPLATE = 13;
    this.DOCUMENTSIGNING = 14;
    this.WHATSAPP = 15;

    this.MODULE_EXTERNAL_TABLE = 154;

    //Trans modules
    this.TRANS_MODULE = 255;
    this.LEADS = 256;
    this.TELELEADS = 257;
    this.TASKS = 512;
    this.APPOINTMENTS = 768;
    this.ACTIVITIES = 1536;
    this.OPPORTUNITIES = 1792;
    this.LISTMASTER = 2048;
    this.OPPORTUNITY_STATUS = 2056;

    this.COMMUNICATION = 12800;
    this.TELE_CALLS = 1280;

    //Master modules
    this.MASTER_MODULE = 2304;
    this.ACCOUNTS = 2305;
    this.PRODUCTS = 2306;
    this.CONTACTS = 2309;
    this.CAMPAIGNS = 2310;
    this.LOCATION_MODULE = 2312;
    this.COUNTRIES = 2317;
    this.STATE = 2318;
    this.CITY = 2319;
    this.UNITS_MODULE = 2321;
    this.SERVICES = 2324;
    this.PERIODS = 2357;
    this.SOLUTIONS=9984;
    this.ROUTE_PLAN=9216;
    this.PRICEBOOK_RATES=2649;
    this.CAMPAIGN_MAIL=2659;

    //Internal modules
    this.CRM_CUSTOM_MODULE_START=2460;
    this.INTERNAL_MODULES = 2560;
    this.EMAILS = 2562;
    this.DOCUMENTS = 2563;
    this.CURRENCY_MODULE = 2565; //added by yugandhar. added '_MODULE' since there is another variable already defined with the name cuurency
    this.TEMPLATES = 2567;
    this.CLOSED_ACTIVITIES = 2570;
    this.OPEN_ACTIVITIES = 2572;
    this.SALES_STAGES = 2574;
    this.CAMPAIGN_MEMBERS = 2576;
    this.PRICE_BOOKS = 2580;
    this.DASHBOARD = 2581;
    this.NOTES = 2584;
    this.MESSAGES = 2585;
    this.HOME = 2589;
    this.ALLACTIVITIES=2590;
    this.CALLTEMPLATES=2595;
    this.CALL_NOTES=2596;
    this.CALL_STATUS=2601;
    this.ATTACHMENTS=2602;
    this.STAGE_HISTORY = 2608;
    this.ANNOUNCEMENT = 2611;
    this.CONTACT_ROLES = 2612;
    this.REMINDERS=2613;
    this.SURVEY_MODULE=2615;
    this.CUST_SPARE_PARTS=2621;
    this.LOCATION_TRACKER=2617;
    this.TRACKER=2586;

    //Trans modules 2
    this.QUOTE=2816;
    this.SALES_ORDER=3072;
    this.CONTRACTS=3328;
    this.CUST_ASSETS=3584;
    this.REQUEST=3840;
    this.CALL_CLOSE=4096;
    this.CALL_WORKLOG=4352;
    this.PARTS_REPLACED=4608;
    this.PARTS_REQUESTED=4864;
    this.CALL_TASKS=5120;
    this.CALL_RESOLUTION=5376;
    this.INCIDENTS=5632;
    this.CALL_REOPEN=5888;
    this.REVENUE=6144;
    this.SUSPECTS=6400;
    this.PMS_ENQUIRY=6912;
    this.PMS_CONTRACTS=7168;

    this.ESTIMATION=8704;
    this.SERVICE_QUOTE=8192;
    this.SERVICE_ORDER=8448;
    this.PROBLEMS=9472;
    this.CHANGES=9728;
    this.SOLUTIONS=9984;
    this.WON_COMPETITOR=10240;
    this.LOST_COMPETITOR=10496;

    this.CMS_BOOKING=11008;
    this.CMS_CHECKER=11264;
    this.CMS_MANIFEST=11520;
    this.CMS_DISPATCH=11776;
    this.CMS_ARRIVALS=12032;
    this.CMS_INVESTIGATION=12288;
    this.CMS_DELIVERIES=12544;

    this.EDU_REGISTER=13568;
    this.EDU_ENQUIRY = 13824;
    this.EDU_APPLICATION = 14080;
    this.EDU_STUDENT=14336;
    this.EDU_INVOICE_TEMPLATE = 14592;
    this.EDU_PROFORMA_INVOICE = 14848;
    this.EDU_INVOICE = 15104;
    this.EDU_RECEIPT = 15360;

    this.INCIDENT_CONVERTED = 146;
    this.INCIDENT_NEW = 566;

    this.IModuleTypes=new function()
    {

        this.FIN_SALES_ESTIMATES = 16384;
        this.EDU_PROFORMA_INVOICES = 16385;   //Proforma Invoice

        this.FIN_SALES_ORDERS = 16640;
        this.FIN_RECURRING_INVOICES = 16896;
        this.FIN_SALES_INVOICES = 17152;   //Invoice
        this.EDU_SALES_INVOICES = 17153;   //EDU Invoice
        this.EDU_ADHOC_INVOICES = 17154;   //Adhoc Invoice
//            this.EDU_PROFORMA_INVOICES=17155;   //Proforma Invoice
        this.FIN_PAYMENTS_RECEIVED = 17408; // Receipt
        this.EDU_PAYMENTS_RECEIVED = 17409; // EDU Receipt
        this.FIN_JOURNALS = 17664; //JV
        this.EDU_JOURNALS = 17665; //EDU JV
        this.EDU_STUDENT_JOURNALS = 17666; //EDU Student JV
        this.FIN_SALES_RETURNS = 17920;
        this.FIN_DELIVERY_NOTES = 18176;
        this.FULFILLMENTS = 18177;//child module of delivery note
        this.FIN_CREDIT_NOTES = 18432;
        this.EDU_DISCOUNT_VOUCHER = 18433;
        this.FIN_PURCHASE_ORDERS = 18688;

        this.FIN_BILLS = 19200;
        this.FIN_RECURRING_EXPENSES = 19456;
        this.FIN_RECURRING_BILLS = 19712;
        this.FIN_PAYMENT_MADE = 19968;
//            this.EDU_PAYMENT_MADE=19969;
        this.FIN_EXPENSES = 19969;//18944
        this.EDU_PAYMENTS = 19970;
        this.FIN_GOODS_RECEIPT_NOTES = 20224;
        this.FIN_DEBIT_NOTES = 20480;
        this.EDU_DEBIT_NOTES = 20481;   // EDU Debit Note
        this.FIN_PURCHASE_RETURNS = 20736;

        this.FIN_PRICE_LISTS = 20992;
        this.FIN_TAXES = 21248;
        this.FIN_PAYMENT_TERMS = 21504;
        this.FIN_ITEM_ADJUSTMENTS = 21760;
        this.FIN_OPENING_BALANCES = 22016;
        this.EDU_OPENING_BALANCES = 22017;
        this.FIN_OPENING_STOCK = 22528;
        this.FIN_PDC = 22784;

        this.ECART_RETURN_REQUEST = 27136;
    };

    this.Attach_Type_File = 1;
    this.Attach_Type_Url = 2;
    //// Work flow popup menu related

    this.IMPORTED_TELE_PROSPECTS_TO_TELE_EXEC = 1;
    this.TELE_MKT_CONV_LEADS_TO_MKT_EXEC = 2;
    this.WEB_LEADS_TO_MKT_EXEC = 3;
    this.WEB_LEADS_TO_TELE_MKT_EXEC = 4;
    this.SUPPORT_CASES_TO_SUPPORT_EXEC = 5;
    this.SUPPORT_EMAILS_TO_SUPPORT_EXEC = 6;
    this.WEB_SUPPORT_TICKETS_TO_SUPPORT_EXEC = 7;

    this.PAGE_LAYOUT = 2;
    this.SEARCH_LAYOUT = 4;
    this.HOMEPAGE_LAYOUT = 3;

    ///////// Email settings created by S.L.Sreenivas
    this.POP3 = 1;
    this.IMAP = 2;
    this.EXCHANGE_OFFICE365 = 3;
    this.GMAIL=4;
    ///////// Email settings created by S.L.Sreenivas

    /////IEMAIL_TYPES//////

    this.EMAIL_TYPES_EML=1;
    this.EMAIL_TYPES_MSG=2;
    this.EMAIL_TYPES_S2M=3;

    //    this.IPRICEBOOK=new function()
    //    {
    this.LOCATION = 1;
    this.CUSTOMER = 2;
    this.DATERANGE = 3;
    this.PRODUCT = 4;
    this.CURRENCY = 5;
    this.UNITS = 6;
    this.QTYRANGE = 7;
    //    };

    // Commission Policies

    this.PERIOD = 1;//COMMISSION PER
    this.TRANSACTION = 2;
    this.TRANSACTION_LINEITEM = 3;

    this.Comm_ITEM = 1;//CATEGORIZED BY
    this.Comm_DEPARTMENT = 2;
    this.Comm_LOCATION = 3;
    this.Comm_CLASS = 4;
    this.Comm_NOCATEGORY = 5;

    this.MSTR_PRODUCT = 2306;
    this.MSTR_DEPARTMENT = 2307;
    this.MSTR_LOCATION = 2312;
    this.MSTR_SHIFT =166 ;


    this.FLATRATE = 1;//CALCULATION SCALE
    this.MARGINAL = 2;
    this.LINEAR = 3;
    this.MARGINAL_LINEAR = 4;


    // sales lifecycle

    this.TYPE_HEIRARCHY = 4;//HEIRARCHY=DESIGNATIONS todo: checked with koti sir
    this.MSTR_DESIGNATIONS = 2316;
    this.TYPE_EMPLOYEE = 4;
    //    this.MSTR_EMPLOYEES = 2315;
    this.BEFORE = 0;
    this.MINUTES = 1;

    // sales lifecycle

    /////////// users/roles/teams..... search Type //////////////
    this.TYPE_LEAFS = 0;
    this.TYPE_GROUPS = 1;
    this.TYPE_ALL = 2;
    this.TYPE_INACTIVE_LEAFS= 3;
    this.TYPE_INACTIVE_GROUPS= 4;


    this.ACCESS = 11;  //REPORT RIGHTS TAB
    ////////////////////////////

    /*Filter Constants*/
    //filter type
    this.FILTERMODES_NORMAL = 1;
    this.FILTERMODES_RULES = 2;
    this.FILTERMODES_WORKFLOW = 3;

    //filter coloum names
    this.FILTER_COL_FIELDS = 1;
    this.FILTER_COL_OPERATOR = 2;
    this.FILTER_COL_VALUE = 3;
    this.FILTER_COL_FIELDID2 = 4;
    this.FILTER_COL_CONJUNCTION = 5;
    this.FILTER_COL_COMPARE = 6;
    this.FILTER_COL_LINKFIELDS = 7;
    this.FILTER_COL_PERIOD = 8;
    this.FILTER_COL_MODULENAME = 9;
    this.FILTER_COL_MODULENAME2 = 10;
    this.FILTER_COL_SOURCE_FIELD = 11;
    /*Filter Constants*/

    /* static combo mastertype*/
    //    this.MODULE_FIELDS = 51;    //
    this.MODULE_FIELDS = 152;    //changed by Koti
    this.RELATED_MODULES = 162;
    this.MODULE_FIELDS_WITH_EMAIL_FIELDS = 178;
    this.MODULE_FIELDS_WITH_PHONE_FIELDS = 179;

    this.IStdMasters_GENERAL_STATIC_VALUES = 56;
    this.IStdMasters_GENERALMASTER = 58;

    this.Genernal_StaticValues = 56;  // dont store id and do not call servlet
    this.Genernal_Narration = 57;  // dont store id and do not call servlet
    this.Genernal_Master = 58;        // store id and do not call servlet
    this.Genernal_SCRIPTValues = 59;        // store id and do not call servlet
    this.Genernal_SERVER_VALUES = 200;        // connect to the server only once and get values  //todo

    this.COMBO_APP_SCOPE = 1;


    this.COMBO_BY_NAME = 0;
    this.COMBO_BY_CODE = 1;
    this.COMBO_BY_ALIAS = 2;
    this.COMBO_BY_USER_REQUEST= 10;

    this.COMBO_TYPE_LEAFS = 0;
    this.COMBO_TYPE_GROUPS = 1;
    this.COMBO_TYPE_ALL = 2;

    this.COMBO_APP_SCOPE = 1;

    this.COMBO_ATTR_SYSVAL="sysval"

    this.FIELDID_LINK_FIELD = -102;


    this.COMBO_RENDER_MODE_CUTOMIZE=1;// used for combo byFlags to differentiate the real or customize mode for the combo values
    this.COMBO_RENDER_MODE_REAL=2;
    this.COMBO_RENDER_MODE_ADV_FILTER=3;

    /* static combo mastertype*/

    this.RULE_LINKTYPE_MODULE = 0;
    this.RULE_LINKTYPE_VIEW = 1;
    this.RULE_LINKTYPE_FIELD = 2;
    this.RULE_LINKTYPE_PAGEVIEW_FIELD = 3;

    this.LIST_LAYOUT = 1;
    this.HOMEPAGE_LAYOUT = 3;
    this.RELATEDMODULE_LAYOUT=6;
    this.EDIT_LAYOUT = 8;
    this.DETAILED_LAYOUT = 9;
    this.MENU_LAYOUT=10;
    this.TREE_VIEW_LAYOUT=11;
    this.SIDE_PANEL_LAYOUT=12;
    this.DASHBOARD_LAYOUT=13;
    this.PRINT_LAYOUT= 14;

    this.Layout_name_size=50;
    this.Layout_desc_size=100;

    //ISearchin
    this.RECORDS_I_SEE = 1;
    this.RECORDS_I_OWN = 2;
    this.RECORDS_I_OWN_TEAM = 3;
    this.RECORDS_I_AND_SUB_OWN = 4;
    this.RECORDS_I_AND_SUB_OWN_TEAM = 5;
    this.RECORDS_DEFAULT_LOOKIN = 6;
    this.RECORDS_SPECIFIC_TEAM= 7;
    this.RECORDS_SPECIFIC_USER = 8;
    this.RECORDS_I_CREATED=9;
    this.RECORDS_I_AND_SUB_CREATED=10;
    this.RECORDS_SPECIFIC_USER_HEIRARCHY=11;
    this.RECORDS_SHARED_WHT_ME=12;
    this.RECORDS_SHARED_BY_ME=13;

    this.INPUT_TYPE_DEFAULT = 0;  // Default
    this.INPUT_TYPE_MULTIPLE = 1;  // entry fields like (min and max), multi combo
    this.INPUT_TYPE_RANGE = 2;  // select range like slider, date_ranges

    /*Templates*/
    this.TEMPLATES_EMAIL = 1;
    this.TEMPLATES_SMS = 2;
    this.TEMPLATES_TASK = 3;
    this.TEMPLATES_POPUP = 6;
    this.TEMPLATES_NOTIFICATION = 11;
    this.TEMPLATES_SOCIAL_TEMPLATE = 13;

    /*Task Template Assign Type*/
    this.TEMPLATES_TASK_OWNER = 1;
    this.TEMPLATES_TASK_MANAGER = 2;
    this.TEMPLATES_TASK_USER = 3;

    /*Below constants are stardard Module homepage components related to the table primary key contstants*/

    this.COMP_RECENTITEMS = 1;

    this.ACTION_RECENTLY_CREATED = 37;
    this.ACTION_RECENTLY_VIEWED = 38;
    this.ACTION_RECENTLY_MODIFIED = 39;
    this.ACTION_NEW = 4;
    this.ACTION_LIST_DELETE = 29;

    /*webleads related*/
    this.ITemplateType_MARKETING = 1;
    this.ITemplateType_TELE_MARKETING = 2;
    this.ITemplateType_CAMPAIGN = 3;

    this.ITemplateType_WEB = 1;
    this.ITemplateType_EMAIL = 2;
    this.ITemplateType_ATTACH = 3;

    /*webleads related*/

    /*Duplicate Search*/
    this.DUPLICATE_NONE = 0;
    this.DUPLICATE_APPEND = 1;
    /*Duplicate Search*/

    /* Module */
    this.VIEW_MODE_EDIT = 1;
    this.VIEW_MODE_EDIT_TABPANE = 3;
    this.VIEW_MODE_DETAILED = 2;
    this.VIEW_MODE_DETAILED_TABPANE = 4;
    this.VIEW_MODE_IMPORT = 5;
    this.VIEW_MODE_QUICK_CREATE = 6;
    this.VIEW_MODE_EDIT_FIELD = 7;
    this.VIEW_MODE_FIND_FIELDS = 8;
    this.VIEW_MODE_MASS_UPDATE=9;

    this.MODULE_IN_DLG = 1;
    this.MODULE_IN_TREE_DLG = 2;
    this.MODULE_IN_OTHER_SCREEN = 3;
    this.MODULE_IN_WITHOUT_ACTIONS=8;
    //    this.MODULE_IN_IMPORTVIEW = 4;
    /* Module */

    /* Assignment*/
    this.ASSIGNMENT_RULE = 1;
    this.ASSIGNTO = 2;
    this.SPLIT_ASSIGN = 3;
    /* Assignment*/

    /*campaings*/
    this.ICampaign_TELEMARKETING = 5;

    this.CUST_FIELD = 300001;// customFields
    this.CUST_LAYOUT = 100000;// customLayout

    /* MultiSelect */
    this.AVAIL_FIELDS = 1;
    this.SELECTED_FIELDS = 2;

    this.LIST_VALUES = 1;
    this.LIST_NAMES = 2;
    this.LIST_NAMES_VALUES = 3;
    this.LIST_NAMES_VALUES_GROUPIDS = 4;
    /* MultiSelect */
    /* Imports */

    this.ACCOUNTS_CONTACTS = 1;
    /*this.TASKS = 512;
     this.APPOINTMENTS = 768;
     this.ACTIVITIES = 1536;
     this.OPPORTUNITIES = 1792;
     this.ACCOUNTS = 2305;
     this.PRODUCTS = 2306;
     this.CONTACTS = 2309;
     this.CURRENCY_MODULE = 2565; //added by yugandhar. added '_MODULE' since there is another variable already defined with the name cuurency
     this.OPEN_ACTIVITIES = 2572;

     this.MASTER_MODULE = 2304;

     this.LISTMASTER = 2048;

     this.INTERNAL_MODULES = 2560;//+256
     this.CUST_ASSETS=3584
     this.CALL_CLOSE=4096;
     this.CALL_REOPEN=5888;*/


    this.MODULE_SLAB = 256;//+256
    this.MODULES_FRM_FIELDID=175;

    ///////////////////////////////////////////////////////////////////

    this.ACCOUNTS_NAME_FIELDID= 5002;
    this.NONE = 0;
    this.NOW = 1;
    this.MAPPING_NEW = 0;


    /* Imports */

    this.LEAD_STATUS_NEW=84;
    this.LEAD_STATUS_CONVERTED=87;

    /*Recurrence*/
    this.IRECURRENCE_DAILY = 0;
    this.IRECURRENCE_WEEKLY = 1;
    this.IRECURRENCE_MONTHLY = 2;
    this.IRECURRENCE_YEARLY = 3;
    this.IRECURRENCE_PERIODIC = 4;
    this.IRECURRENCE_ONETIME = 5;

    this.IRECURRENCE_EVERYWEEKDAY = 0;

    this.IRECURRENCE_ONDAY_EVERY = 0;
    this.IRECURRENCE_ONTHE = 1;

    this.IRECURRENCE_TIME = 0;
    this.IRECURRENCE_USAGE = 1;
    this.IRECURRENCE_EITHER = 2;

    this.IRECURRENCE_ENDBYDATE = 0;
    this.IRECURRENCE_ENDAFTER = 1;

    /*Recurrence*/

    //treeview
    this.USERS = 2564;
    //    this.EDIT = 0;
    this.NEWCHILD = 1;
    this.NEWGROUP = 2;
    this.CLONENODE = 3;
    this.GROUPLIST = 4;
    this.NEWNODE = 0;
    this.GROUPNODE = 1;
    this.MOVEUP = 1;
    this.MOVEDOWN = 2;





    //treeview

    //View Events in Listview
    this.VIEW_EVENT_SELECTALL=0;
    this.VIEW_EVENT_SELECT=1;
    this.VIEW_EVENT_FIRST=2;
    this.VIEW_EVENT_LAST=3;
    this.VIEW_EVENT_PREV=4;
    this.VIEW_EVENT_NEXT=5;
    ///////////////////////
    /*********************WebTemplate*****************/
    this.ERR_DUPLICATE_WEBLEADNAME = 2004;
    this.MSG_SERVER_EXCEPTION = -1;
    /*********************WebTemplate*****************/

    /*********************WorkFlow*****************/
        //    this.RELATED_MODULES_WITH_PARENTS = 68;     //
    this.RELATED_MODULES_WITH_PARENTS = 168;     //value changed by Koti
    /*********************WorkFlow*****************/

        //////////////////views////////////////////////
    this.LISTVIEW = 1;
    this.TREEVIEW = 2;

    this.OK = 1;
    this.YES = 2;
    this.NO = 3;
    this.CANCEL = 35;

    this.NOTIFICATIONS=55;


    this.MSG_SUCCESS = 1;
    this.MSG_SUCCESS_STATUS_ONLY = 4;
    this.MSG_EXCEPTIONS = 5;
    //this.MSG_BUSINESS_MESSAGE= 5;

    this.NOTIFY_INFO = 3;
    this.NOTIFY_MODULE = 4;
    this.NOTIFY_ZOOMBACK =5;
    this.NOTIFY_WARNING =6;
    this.NOTIFY_ERROR=7;

    /////////////// register instance/////////
    this.SCOPE_SCREEN=1;
    this.SCOPE_APP=2
    this.SCOPE_DIALOG=3
    /////////////////////////////////////////

    this.ACTIONS_CALL_LEAD = 43;

    /********************* Authorization *****************/
    this.APPROVAL_CRITERIA_ANY_SELECTED = 1;
    this.APPROVAL_CRITERIA_ALL_SELECTED = 2;
    this.APPROVAL_CRITERIA_MAJORITY = 3;
    this.APPROVAL_CRITERIA_PERCENTAGE = 4;


    this.ISecurity_TYPE_ROLE = 1;

    //    this.IAUTH_AUTO_APPROVE=0;
    this.IAUTH_AUTO_APPROVE=3;  //Changed the value from 0 to 3 by KOTI
    this.IAUTH_AUTO_REJECT=1;
    this.IAUTH_ALERT_TO_USER=2;
    /*******************************************************/

    //*******Calendar*******//
    this.PLANS = 1024;
    //    this.CALENDAR = 1;
    this.CALENDAR = 2582;
    this.SOURCE_TYPE_EVENT=10;
    this.SOURCE_TYPE_TASK=2;
    this.SOURCE_TYPE_APPOINTMENT=3;
    this.SOURCE_TYPE_PLANS=4;
    this.SOURCE_TYPE_VISITS=5;
    this.SOURCE_TYPE_MEETING=6;
    this.SOURCE_TYPE_ACTIVITIES=6;/*TABLE ID*/
    this.SOURCE_TYPE_CALL =7;
    this.SOURCE_TYPE_CALL_TASK =8;
    this.SOURCE_TYPE_LEAVE =9;
    this.BUSY=1;
    this.OutofOffice=2;
    this.WEEKOFF = 1;
    //    this.SUNDAY =0;
    //    this.SATURDAY = 6;

    this.SINGLE_USER=0;
    this.MULTI_USER=1;
    this.Day=2;
    this.Week=3;
    this.Month=4;
    this.FOURDAYS=5;
    this.TODAY=10;
    this.PREVIOUS=11;
    this.NEXT=12;
    this.SU_DAY=20;
    //    this.SU_WEEK=21;
    //    this.SU_FOURDAYS=22;
    //    this.SU_MONTH=23;
    //    this.MU_DAY=30;
    //    this.MU_WEEK=31;
    //    this.MU_FOURDAYS=32;
    //    this.MU_MONTH=33;
    this.ListView =6;

    this.FIVEDAYS_A_WEEK=6;
    //view-layouts
    //this.UNASSIGNED=316;

    this.SCHEDULER_REQUEST=0;
    this.SCHEDULER_CALLTASK=1;
    this.SCHEDULER_BOTH=2;

    //*******Calendar*******//

    //******* Company Profile Business Hours *******//
    this.RND_THE_CLOCK=0;
    this.BUSINESS_HRS=1;
    //******* Company Profile Business Hours *******//

    this.VIEW_MODE_QUICK_CREATE=6;

    this.PIPELINE = 41;
    this.BESTCASE = 42;
    this.COMMIT = 43;
    this.CLOSED = 45;
    this.TYPE_REVENUE = 1;
    this.TYPE_REVENUE_QTY = 2;
    this.TYPE_BOTH = 3;
    this.MODE_YEARLY=1;
    this.MODE_HALFYEARLY =2 ;
    this.MODE_QUATERLY=3;
    this.MODE_MONTHLY=4;

    // ***********Actions***************//
    this.NEW_TASK = 1;
    this.LOG_AN_ACTIVITY = 2;
    this.SEND_AN_EMAIL = 3;
    this.VIEW_ALL = 4;
    this.NEW_APPOINTMENT = 5;
    this.ADD_TO_CAMPAIGN = 6;
    //    this.NEW_CONTACT = 7;
    //            this.MERGE_CONTACTS = 8;
    //            this.FIND_DUPLICATES = 8;     ///Conflict occur at IConstants.IModule.ILayout.EDIT_LAYOUT in CLViewHLP, so changed to 51
    //    this.NEW_OPPORTUNITY = 9;
    this.NEW_CASE = 10;
    this.NEW_PARTNER = 11;
    //    this.NEW_NOTE = 12;
    //    this.ATTACH_FILE = 13;
    //    this.NEW_ROLE = 14;
    //    this.NEW_COMPETITOR = 15;
    //    this.ADD_PRODUCT = 16;
    this.SORT=18;
    this.NEW_EVENT = 22;
    this.NEW = 27;
    this.EDIT = 28;
    this.DELETE = 29;
    // genericn actions////////////
    this.MASS_UPDATE = 30;
    this.CONVERT = 31;
    this.CLOSE = 32;
    this.CLONE = 36;

    this.RECENT_CREATED = 37;
    this.RECENT_MODIFIED = 38;
    this.RECENT_VIEWED = 39;


    this.ADD_MEMBER = 40;
    this.EDIT_MEMBER = 41;
    this.IMPORT_MEMBER = 42;
    this.CALL_LEAD = 43;
    this.ASSIGN = 44;    //// Assignment of tele lead/ Mkt. Lead
    this.SPLIT_AND_ASSIGN = 45;    //// Assignment of tele lead/ Mkt. Lead
    this.SHARE = 46;
    this.NEW_MEETING = 47;
    this.NEW_PLAN = 48;
    //    this.NEW_CALL = 49;
    this.NEW_TELE_CALL = 50;
    this.FIND_DUPLICATES=51;
    this.MERGE_CALLS=52;

    this.GROUP=67;
    this.ADD_GROUP=68;
    this.DELETE_ALL=69;
    this.MOVE=70;
    this.MOVE_UP=71;
    this.MOVE_DOWN=72;
    this.SELECT_ALL=73;
    this.UNSELECT_ALL=74;
    this.CUSTOMIZZE_LIST=75;
    this.LIST_VIEW=76;
    this.EXPAND=77;

    this.COLLAPSE=78;

    this.ASSIGN_TEAMS=79;
    this.UNLOCK_USERS=80;
    //quote actions
    //    this.PRINT_QUOTE=95;
    this.PRINT=95;

    this.RAISE_SALESORDER=96;

    //    this.PRINT=101;
    this.ACTIVATE_USERS=104;
    //    this.NEW_DOCUMENT=81;
    //    this.NEW_QUOTE=93;
    //    this.NEW_SALES_ORDER=94;


    this.GET_NOTES=106;
    this.GET_EMAILS=107;
    this.GET_TASKS=108;
    this.NEW_CALL_WORKLOG=110;
    //    this.NEW_CALL_NOTES=111;//
    //    this.NEW_CALL_ATTACH=112;//
    this.ASSIGN_BY_QUEUE=113;
    this.ADD_PART_REPLACED=114;
    this.ADD_PART_REQUESTED=115;


    //    this.NEW_CONTRACT=116;
    this.ALL_USERS= 116; //need to change
    this.CLOSE_REQUEST=117;
    this.EMAIL_QUOTE=118;
    this.ACTION_CALL_RESOLUTION=121;
    this.PICK_REQUEST=122;
    //    this.NEW_CALL_TASK=123;
    this.RE_OPEN=124;
    this.MASS_TRANSFER=125;
    //    this.NEW_MESSAGE=126;

    this.CUSTOMIZE = 127;
    this.APPROVE = 128;
    this.REJECT=129;
    //    this.NEW_ANNOUNCEMENT=132;
    this.PRINT_LABEL=133;
    //    this.NEW_CONTACT_ROLES=134;
    //    this.PRINT_MODULE_DATA=135;
    this.MAP_VIEW=136;
    this.RESET_PASSWORD=137;
    this.SURVEY=140;
    this.EMAIL_MODULE_DATA=146;

    this.TERMINATE = 141;
    this.LEGAL_CASE = 142;
    this.RENEWAL = 143;
    this.CONTRACT_CLOSE = 144;
    this.CONTRACT_TRANSFER = 145;
    this.RAISE_SERIVICE_QUOTE=147;

    //Layout Ids
    this.ACTIVE_USERS= 146;
    this.INACTIVE_USERS= 147;
    this.LOCKED_USERS= 148;

    this.CHANGE_ISSUE = 149;
    this.IN_ACTIVATE = 153;
    this.UNIT_TO_ENQUIRY=154;
    this.UNIT_TO_CONTRACT=155;
    this.PMS_BOOKINGS=157;
    this.EMAIL_SERVICE_QUOTE=158;
    this.RAISE_SPAREPART_REQUEST = 159;
    this.RAISE_SPAREPART_REPLACED = 160;
    this.REPLY =161;
    this.REPLY_ALL =162;
    this.MISSING =163;
    this.VALIDATE =164;
    this.DELIVERY_CLOSE =165;
    this.DRIVERCHANGE =166;
    this.TRUCKCHANGE =167;
    this.SHIPMENT_RETURN =168;
    this.DAMAGE_SHIPMENT =169;
    this.ROUTE_CHANGE =170;
    this.RETURN_WAYBILL =171;
    this.PICKED_UP =174;
    this.TRUCKANDDRIVERCHANGE =178;
    this.CONFIRM_BY_CHECKER=179;
    this.CONSIGNEE_WILL_COLLECT=180;
    this.REQUESTED_TO_DELIVER=181;
    this.PAYMENT_PROCESSED=182;
    this.CMS_ACCIDENT=183;
    this.CMS_TRUCKDISPATCHED=184;
    this.CMS_HOLD=186;
    this.CMS_RELEASE=187;
    this.CALL_RESPONSE=188;
    this.EXPORT_MAILCHIMP=189;
    this.CHANGE_STATUS=190;
    this.APPLICATION_FEE=191;
    this.ACCEPT_APPLICATION=192;
    this.REJECT_APPLICATION=193;
    this. ADMISSION_FEE=194;
    this.REGISTER=195;
    this.CONFIRM_DELIVERY=196;
    this.RETURN_TO_WAREHOUSE=197;

    this.CONVERT_TO_LEAD = 175;
    this.CONVERT_TO_OPPORTUNITIES = 176;
    this.CONVERT_TO_REQUEST = 177;
    this.ADD_TO_OPPORTUNITIES = 185;
    this.CONFIRM_BOOKING = 301;
    this.SCAN_BARCODE_LABELS=302;
    this.SIGNWITH_SIGNEASY=304;
    this.PULL_DOCUMENTS=306;
    this.IMPORT_FROM_MAILCHIMP=307;
    this.CLOSE_LINK = 309;
    this.CONVERT_TO_MODULE = 311;
    this.PAYMENT_MODULE = 312;

    this.PRESENT_ATTENDANCE=401;
    this.ABSENT_ATTENDANE=402;

    this.CONVERT_TO_CONTACT = 805;



    this.ABSENT_SICK_LEAVE=20001;
    this.ABSENT_NO_STIPEND=20002;
    this.OTHERS_NO_STIPEND=20003;
    this.EXCUSE_ABSENT=20004;




    this.STANDARD_ACTIONS_LIMIT = 1000;

    // ***********Actions***************//

    // *********** ToastWiondow ***************//
    this.PRONG_NONE = 0;
    this.PRONG_LEFT = 1;
    this.PRONG_RIGHT = 2;
    this.PRONG_TOP = 3;
    this.PRONG_BOTTOM = 4;
    // *********** ToastWiondow ***************//

    //*********** Support Queue ************//
    this.ISSUES = 2323;
    this.PRIORITY = 2051;
    this.CATEGORY = 2313;
    this.SUBCATEGORY = 2314;

    //*********** Support Queue ************//


    /*targets*/
    this.YEARLY =1;
    this.PRODUCTWISE_VALUES = 3;
    this.PRODUCTWISE_QTY = 4;
    this.CATEGORYWISE_VALUES = 5;
    this.CATEGORYWISE_QTY = 6;
    this.VALUES = 1;
    this.QTY = 2;
    this.VALUES_QTY = 3;
    /*targets*/

    /*Integration Settings*/
    this.USE_SAME_CREDITIALS_AS_CRM=0;
    this.USE_COMMON_USERPWD=1;
    this.TYPE_FOCUS7=1;
    this.TYPE_FOCUS8=2;
    this.TYPE_MYOB=3;
    this.TYPE_TALLY=4;
    this.TYPE_XERO=5;
    this.TYPE_QUICKBOOKS=6;
    this.TYPE_OTHERS=7;
    // External Other Integrations 101 to 200
    this.TYPE_MAILCHIMP=101;
    this.TYPE_KNOWLARITY=102;
    this.TYPE_AMEYO=103;
    this.TYPE_SIGNEASY=104;
    this.TYPE_TWILIO=105;
    this.TYPE_RINGCENTRAL=106;
    this.TYPE_ZAPIER=107;
    this.TYPE_SHOPIFY=108;
    this.TYPE_SKYPE=109;
    this.TYPE_PAYPAL=110;
    this.TYPE_STRIPE=111;
    this.TYPE_PAYTM=112;
    this.TYPE_TELR=113;
    this.TYPE_EAZYPAY=114;
    this.TYPE_VAGENT=116;
    this.TYPE_PAYU=117;
    this.TYPE_FATOORAH=118;
    this.TYPE_EZETAP=119;
    this.INDIAMART_API = 120;
    this.TYPE_MASTER_CARD=121;
    this.TYPE_RAZOR_PAY=123;
    this.TYPE_PINELABS_DEVICE_PAY = 124;
    this.TYPE_PAYTABS = 125;
    this.TYPE_WATI = 126;

    // External Social Integrations 201 to 300 todo
    this.FACEBOOK=201;
    this.FACEBOOK_FEED_MESSAGES=207;
    this.GOOGLE_CONTACTS=281;
    this.GOOGLE_CALENDAR=282;
    this.GOOGLE_MAIL=283;
    this.GOOGLE_DRIVE=284;
    this.GOOGLE_CLOUD_PRINT=285;
    this.GOOGLE_BUSINESS_API = 287;
    this.GOOGLE_MAP_API = 288;


    /*this.ERP_INTEGRATION_SETTINGS= 629;
     this.ERP_FOCUS_MAPPINGS= 630;*///old
    this.ERP_INTEGRATION_SETTINGS= 1681;
    this.ERP_FOCUS_MAPPINGS= 1682;
    this.APP_TYPE_PUBLIC= 1;
    this.APP_TYPE_PARTNER= 2;
    this.GET_REQUEST_TOKEN = 1;
    this.GET_ACCESS_TOKEN = 3;

    //************ HOMEPAGE **********************//
    this.HEADER_LOGINUSER = 0;
    this.HEADER_PROFILE= 1;
    this.HEADER_SITEMAP= 2;
    this.HEADER_SETUP= 3;
    this.HEADER_CHANGEPASSWORD= 4;
    //************ /HOMEPAGE **********************//

    this.IAccessTypes = new function()
    {
        this.PUBLIC = 1;
        this.PRIVATE = 2;
        this.SPECIFIC = 3;
    }

    /*************Module Types**************/
    //this.MODULETYPE_STRINGLIST = 70;
    //  this.MODULETYPE_NUMBERLIST = 71;

    //************ Dashboard **********************//

    /*profile*/
    this.LANGUAGE_UPDATED = 2;

    this.IDashboard=new function()
    {
        this.TYPE_OWNER=0;
        this.TYPE_ASSIGNED=1;
        this.TYPE_SHARED=2;

        this.DASHLET_GRAPH =1;
        this.DASHLET_REPORTS =2;
        this.DASHLET_RSSFEEDS =3;
        this.DASHLET_WEBLINK =4;
        this.DASHLET_ALERTS =5;
        this.DASHLET_MAP = 6;
        this.DASHLET_HTML = 7;
        this.DASHLET_METRIC = 8;
        this.DASHLET_IMAGE = 9;
        this.DASHLET_COMPOSITE_GRAPH = 10;
        this.DASHLET_COMPOSITE_REPORT = 11;
        this.DASHLET_ANNOUNCEMENT = 12;
        this.DASHLET_MESSAGES = 13;
        this.DASHLET_FOCUS_REPORTS=14;
        this.DASHLET_CALENDAR=15;
        this.DASHLET_GROUP_CAROSUEL=16;
        this.DASHLET_NOTIFICATIONS=17;
        this.DASHLET_SHORTCUTS=18;
        this.DASHLET_HASHTAGS=19;
        this.DASHLET_RECENTITEMS = 20;
        this.DASHLET_GANTTCHART = 21;
        this.DASHLET_LIST = 22;
        this.DASHLET_SUMMARY = 23;

        this.BORDER_TYPE_SIMPLE=1;
        this.BORDER_TYPE_CURVE=2;

        this.DASHBOARD_VER1=0;
        this.DASHBOARD_VER2=1;

        this.VALUE_AS_ACTUAL=0;
        this.VALUE_AS_PERCENT=1;
        this.VALUE_AS_THOUSANDS=2;
        this.VALUE_AS_LAKHS=3;
        this.VALUE_AS_MILLIONS=4;
        this.VALUE_AS_CRORES=5;
        this.VALUE_AS_BILLIONS=6;
        this.GROUP_CAROSUEL=1;
        this.DISPLAYTYPE_LIST=1;
        this.DISPLAYTYPE_LIST_WITH_COLUMN=2;
        this.DISPLAYTYPE_TABULAR=0;


    };

    //************ Dashboard **********************//

    //************ Incremental Condition **********************//
    this.FIELD = 1;
    this.LOGIN = 2;
    this.CHARACTER_INPUT = 3;
    this.DATE = 4;
    this.INCREMENT = 5;
    this.DECREMENT = 6;
    this.USER_INPUT = 7;
    this.INCREMENT_LOCATION = 8;
    this.INCREMENT_DEPARTMENT = 9;
    //************ Incremental Condition **********************//
    //************ Customization **********************//
    this.BUSINESSCARDCUST = 0;
    this.FOLLOWUPCUST = 1;
    //************ Customization **********************//

    // ************************ Date Range ************************//
    /* this.FY_CURRENT = 1;
     this.FY_PREVIOUS = 2;
     this.FY_NEXT = 3;
     this.FY_CURRENT_PREVIOUS = 4;
     this.FY_CURRENT_NEXT = 5;

     this.FQ_CURRENT = 6;
     this.FQ_PREVIOUS = 7;
     this.FQ_NEXT = 8;
     this.FQ_CURRENT_PREVIOUS = 9;
     this.FQ_CURRENT_NEXT = 10;

     this.YEAR_CURRENT = 11;
     this.YEAR_PREVIOUS = 12;
     this.YEAR_NEXT = 13;
     this.YEAR_CURRENT_PREVIOUS = 14;
     this.YEAR_CURRENT_NEXT = 15;
     this.YEAR_TO_DATE = 16;

     this.MONTH_CURRENT = 17;
     this.MONTH_PREVIOUS = 18;
     this.MONTH_NEXT = 19;
     this.MONTH_CURRENT_PREVIOUS = 20;
     this.MONTH_CURRENT_NEXT = 21;
     this.MONTH_TO_DATE = 22;

     this.WEEK_CURRENT = 23;
     this.WEEK_PREVIOUS = 24;
     this.WEEK_NEXT = 25;
     this.WEEK_CURRENT_PREVIOUS = 26;
     this.WEEK_CURRENT_NEXT = 27;

     this.DAY_CURRENT = 28;
     this.DAY_PREVIOUS = 29;
     this.DAY_NEXT = 30;
     this.DAY_PREVIOUS_SEVEN = 31;
     this.DAY_PREVIOUS_THIRTY = 32;
     this.DAY_PREVIOUS_SIXTY = 33;
     this.DAY_PREVIOUS_NINETY = 34;
     this.DAY_PREVIOUS_N = 35;
     this.DAY_NEXT_SEVEN = 36;
     this.DAY_NEXT_THIRTY = 37;
     this.DAY_NEXT_SIXTY = 38;
     this.DAY_NEXT_NINETY = 39;
     this.DAY_NEXT_N = 40;*/
    // ************************ Date Range ************************//

    this.PRODRATE_START=1;
    this.PRODRATE_END=50;

    this.EXCHANGERATE_START=51;
    this.EXCHANGERATE_END=55;

    this.STOCK_START=56;
    this.STOCK_END=100;

    this.SLA_START=101;
    this.SLA_END=150;

    this.WORK_TYPE_RATE_START=151;
    this.WORK_TYPE_RATE_END=200;

    this.IDATE=new function()
    {
        // ************************ Date Range ************************//
        this.DT_NONE=-1;
        this.DT_CUSTOM=0;
        this.FY_CURRENT = 1;
        this.FY_PREVIOUS = 2;
        this.FY_NEXT = 3;
        this.FY_CURRENT_PREVIOUS = 4;
        this.FY_CURRENT_NEXT = 5;
        this.FY_CURRENT_TILL_DATE = 41;

        this.FQ_CURRENT = 6;
        this.FQ_PREVIOUS = 7;
        this.FQ_NEXT = 8;
        this.FQ_CURRENT_PREVIOUS = 9;
        this.FQ_CURRENT_NEXT = 10;

        this.YEAR_CURRENT = 11;
        this.YEAR_PREVIOUS = 12;
        this.YEAR_NEXT = 13;
        this.YEAR_CURRENT_PREVIOUS = 14;
        this.YEAR_CURRENT_NEXT = 15;
        this.YEAR_TO_DATE = 16;

        this.MONTH_CURRENT = 17;
        this.MONTH_PREVIOUS = 18;
        this.MONTH_NEXT = 19;
        this.MONTH_CURRENT_PREVIOUS = 20;
        this.MONTH_CURRENT_NEXT = 21;
        this.MONTH_TO_DATE = 22;

        this.WEEK_CURRENT = 23;
        this.WEEK_PREVIOUS = 24;
        this.WEEK_NEXT = 25;
        this.WEEK_CURRENT_PREVIOUS = 26;
        this.WEEK_CURRENT_NEXT = 27;

        this.DAY_CURRENT = 28;
        this.DAY_PREVIOUS = 29;
        this.DAY_NEXT = 30;
        this.DAY_PREVIOUS_SEVEN = 31;
        this.DAY_PREVIOUS_THIRTY = 32;
        this.DAY_PREVIOUS_SIXTY = 33;
        this.DAY_PREVIOUS_NINETY = 34;
        this.DAY_PREVIOUS_N = 35;
        this.DAY_NEXT_SEVEN = 36;
        this.DAY_NEXT_THIRTY = 37;
        this.DAY_NEXT_SIXTY = 38;
        this.DAY_NEXT_NINETY = 39;
        this.DAY_NEXT_N = 40;

        this.MONTH_FIRST_DATE = 41;

        this.CH_CURRENT = 42; // calendar half
        this.CH_PREVIOUS = 43;
        this.CH_NEXT = 44;
        this.CH_CURRENT_PREVIOUS = 45;
        this.CH_CURRENT_NEXT =46;

        this.CQ_CURRENT = 47; // calendar quarter
        this.CQ_PREVIOUS = 48;
        this.CQ_NEXT = 49;
        this.CQ_CURRENT_PREVIOUS =50;
        this.CQ_CURRENT_NEXT = 51;

        this.CALENDAR_DATE = 52;// Date from DateTime ( Ex. 09/12/2011  from  09/12/2011 04:26:43 PM )
        this.CALENDAR_TIME = 53;// Time from DateTime ( Ex. 04:26:43 PM  from  09/12/2011 04:26:43 PM )
        this.CALENDAR_HOUR = 54;// Time from DateTime ( Ex. 04:26:43 PM  from  09/12/2011 04:26:43 PM )
        this.MONTH_WEEK_CURRENT=55;// to date format type --- week with month ex: CW1 -JAN
        this.MONTH_FIRST_DATE = 56;
        this.FIRST_FY_TO_DATE= 57;

        // ************************ Date Range ************************//
    };

    this. IExternalReport = new function()
        {
                this.FOCUS_REPORT = 1;
            this.CRYSTAL_REPORT = 2;
            this.JASPER_REPORT = 3;
            this.FOCUS8_REPORT = 4;
            this.MYOB_REPORT = 5;
            this.TALLY_REPORT = 6;

            };
    this.IResource = new function()
    {
        this.SOURCE_TYPE_DB=1;
        this.SOURCE_TYPE_FOLDER=2;
        this.SOURCE_TYPE_TEMP_FOLDER=3;
    };
    this.CUSTOM_HOURS = 2;
    this.HOURS_24_7 = 3;

    this.SEARCH_ADVANCED = 1;
    this.SEARCH_RUN = 0;
    this.SEARCH_MENU = 3;

    //    ********** SMS Configuration *************
    this.URL = 0;
    this.WEB_SERVICE = 1;
    this.JAVA_SERVICE = 2;

    //    ********** External Module Definition *************
    this.TYPE_LIST = 0;
    this.TYPE_BUTTON = 1;
    this.TYPE_LINK = 2;
    this.TYPE_MODULE_SAVING=3;
    this.TYPE_STD_ACTION=4;
    this.TYPE_SALES_STAGE=5;
    this.TYPE_ON_APPROVAL=6;
    this.TYPE_WORKFLOW=7;
    this.TYPE_RELATED_MODVIEW=8;
    this.TYPE_ON_CREATE=9;
    this.TYPE_ON_UPDATE=10;
    this.TYPE_ON_DELETE=11;
    this.TYPE_ON_FIELD_ENTER=12;
    this.TYPE_ON_FIELD_EXIT=13;
    this.TYPE_ON_LOAD=14;
    this.TYPE_SCHEDULING=16;
    this.TYPE_ON_LOAD_DETAILS=17;
    this.SAVE_BEFORE=1;
    this.SAVE_AFTER=2;
    this.ON_AUTHORIZE=3;
    this.ON_ASSIGN=4;

    this.SRC_URL=0;                     /// bSourceType in cCrm_LayoutActions
    this.SRC_JAVASCRIPT=1;
    this.SRC_JAVASERVICE=2;
    this.SRC_WEBSERVICE=3;
    this.SRC_PROCEDURE=4;
    this.SRC_EXT_REPORT=5;
    this.SRC_STANDARD_ACTION=6;
    this.SRC_INTERNAL_REPORT=7;
    this.SRC_PAGE_LAYOUT=8;
    this.SRC_MOBILE_ACTIVITY=9;
    this.SRC_WORKFLOW=10;

    this.DISP_CURRENT_WINDOW = 0;         /// iDisplayType in cCrm_LayoutActions
    this.DISP_DIALOG = 1;
    this.DISP_NOHEADER = 2;
    this.DISP_BACK_GROUND=3;  // Service
    this.DISP_OVERLAY = 4;

    //    ********** Manage Applications *************
    this.MANAGEAPPS = 162;
    //    ********** Manage Applications *************
    this.REPORTS = 2561;
    //    ********** Switch *************
    this.SWITCH_ON = 1;
    this.SWITCH_OFF = 0;
    //    ********** Switch *************
    this.IChart = new function()
    {
        this.TYPE_BAR=1;
        this.TYPE_BAR_HORIZONTAL=2;
        this.TYPE_PIE=3;
        this.TYPE_LINE=4;
        this.TYPE_AREA=5;
        this.TYPE_FUNNEL=6;
        this.TYPE_BUBBLE=7;
        this.TYPE_GUAGE=8;
        this.TYPE_BOX = 9;
        this.TYPE_BOX_TOTAL= 10;
        this.TYPE_DONUT= 12;
        this.TYPE_BAR_STACKED= 13;
        this.TYPE_BAR_HORIZONTAL_STACKED= 14;
        this.TYPE_METRIC=14;
        this.TYPE_GEO_CHART_COUNTRIES=15;
        this.TYPE_GEO_CHART_CITIES=16;
        this.TYPE_BOX_CHART_CIRCLE=17;
        this.TYPE_BOX_CHART_FILLEDRECT=18;
        this.TYPE_BOX_CHART_LINE=19;
        this.TYPE_PIE_GRID=20;

        this.ILegend = new function()
        {
            this.NONE = 0;
            this.TOP = 1;
            this.BOTTOM = 2;
            this.LEFT = 3;
            this.RIGHT = 4;
        };
    };

    this.IPRIORITY = new function()
    {
        this.NORMAL=10;
        this.LOW=11;
        this.MEDIUM=12;
        this.HIGH=13;
    };

    this.IRECIPIENTS=new function()
    {
        this.SCR_INTRA_NET_EMAIL=1;
        this.SCR_SEND_EMAIL=2;
        this.SCR_NOTIFY_EMAIL=3;
        this.SCR_SHARE_USERS=4;
    };

    this.STANDARD_LIST_LIMIT=20000; /// List Master Std. inserts limit


    this.IModule= new function()
    {
        this.STATUS_STOP_SUBMIT=0;
        this.STATUS_CONTINUE=1;
        this.STATUS_URL=2;
        this.STATUS_RETURN=3;
    };
    this.Report_Focus = 1;
    this.Report_Crystal= 2;
    this.Report_Jasper= 3;
    this.Report_Focus8= 4;
    this.Report_Myob= 5;
    this.Report_Tally= 6;
    this.Normal= 0;
    this.Master_Control= 1;
    this.Report_Combobox= 5;
    this.REP_Integer= 1;
    this.REP_Text= 2;
    this.REP_DATERANGE= 3;
    this.AS_ON_DATE= 4;
    this.REP_TIMEFRAME= 6;
    this.REP_CHECK_BOX=7;
    this.REP_RADIO_BUTTON=8;

    this.IActionType = new function()
    {
        this.CHANGE_COLOR=0;
        this.DISPLAY_ICON=1;
        this.CHANGE_BGCOLOR=2;
        this.CHANGE_STYLE=3;
    };
    this.IIconPlacement = new function()
    {
        this.LEFT=0;
        this.REPLACE=1;
        this.RIGHT=2;
    };
    this.IIndicator = new function()
    {
        this.UP_RED=1;
        this.UP_YELLOW=2;
        this.UP_GREEN=3;
        this.UP_GREY=4;

        this.DOWN_RED=5;
        this.DOWN_YELLOW=6;
        this.DOWN_GREEN=7;
        this.DOWN_GREY=8;

        this.CHECK_RED=9;
        this.CHECK_YELLOW=10;
        this.CHECK_GREEN=11;
        this.CHECK_GREY=12;

        this.CROSS_RED=13;
        this.CROSS_YELLOW=14;
        this.CROSS_GREEN=15;
        this.CROSS_GREY=16;

        this.STAR_RED=17;
        this.STAR_YELLOW=18;
        this.STAR_GREEN=19;
        this.STAR_GREY=20;

        this.WARNING_RED=21;
        this.WARNING_YELLOW=22;
        this.WARNING_GREEN=23;
        this.WARNING_GREY=24;

    };

    this.IRequest = new function()
    {
        // Request State like Open,On-Hold,Resolved,Closed,In-Progress,New
        this.OPEN=57;
        this.ON_HOLD=58;
        this.RESOLVED=59;
        this.CLOSED=60;
        this.NEW= 132;
        this.IN_PROGRESS=131;
        // Request State like UnAssigned,Assigned,Escalated,Re-open,Re-Assigned
        this.UN_ASSIGNED=133;
        this.RE_OPEN=136;
    };
    this.IAPPROVAL_STATUS = new function()
    {
        this.APPROVED=114;
        this.PENDING=115;
        this.STOPPED=116;
        this.REJECTED=117;
        this.MORE_INFO=142;
    };

    this.ICONTRACT_STATUS= new function()
    {
        this.VALID=186 ;
        this.LEGAL_CASE=187 ;
        this.CLOSED=188 ;
        this.RENEWED = 190;
    };

    this.IStdApplications =new function()
    {
        this.CORE=0;
        this.MARKETING=1;
        this.TELEMARKETING=2;
        this.SALES=3;
        this.SUPPORT=4;
        this.ADMINISTRATION=5;
    };
    this.IContractPeriod = new function()
    {
        this.THREE_MONTHS = 1;
        this.SIX_MONTHS = 2;
        this.ONE_YEAR = 3;
        this.TWO_YEARS = 4;
        this.THREE_YEARS = 5;
        this.FOUR_YEARS = 6;
        this.FIVE_YEARS = 7;
        this.CUSTOM = 8;
        this.ONE_MONTH = 9;
        this.TWO_MONTHS = 10;
        this.TEN_MONTHS = 11;
        this.TWENTY_MONTHS = 12;
        this.SIX_YEARS = 13;
        this.SEVEN_YEARS = 14;
        this.EIGHT_YEARS = 15;
        this.NINE_YEARS = 16;
        this.TEN_YEARS = 17;
    };


    this.IActions=new function()
    {
        this.SAVE = 33;
        this.SAVE_AND_NEW = 34;
        this.CANCEL = 35;
        this.CLONE = 36;
        this.MARK_AS_DELIVERY=165;

        this.CONVERT_TO_INVOICE=218;
        this.SAVE_AND_SEND=223;
        this.SAVE_AS_DRAFT=224;
        this.SAVE_AND_PRINT=239;

        this.RECORD_RECEIPT=228;
        this.USE_CREDITS=229;
        this.SEND_REMINDER=230;
        this.EXPECTED_PMT_DATE=231;
        this.CREATE_CREDIT_NOTE=232;

        this.APPLY_TO_INVOICE=245;
        this.CONVERT_TO_BILL=248;
        this.EXPECTED_DELIVERY_DATE=249;
        this.APPLY_TO_BILL=253;
        this.CONVERT_TO_DRAFT=254;
        this.VIEW_EXCHANGE_RATE=255;
        this.MAKE_PAYMENT=257;
        this.PAYMENT_ON_DEVICE = 313;


        /////////////////////  From  901 Shopify
        this.RAISE_FULFILLMENT=901;
        this.RETURN_REQUEST=903;
        this.IMPORT_SFG = 921;

    };

    this.IDismiss_action=new function()
    {
        this.ALL=0;
        this.LIST_VIEW=1;
        this.DETAILED_VIEW=2;
        this.EDIT_VIEW=3;
        this.SPECIFIC_ACTIONS=4;
    };

    this.IWorkFlow =new function()
    {
        this.USER = 1;
        this.RECIPIENT = 2;
        this.MANAGER = 3;
        this.SPECIFIC_USER=4;

        this.ACTIONS = 0;
        this.TIMEBASED_ACTIONS = 1;

        this.WF_SELF = 1;
        this.WF_HIERARCHY = 5;
        this.WF_TEAM = 2;
        this.WF_ROLE = 6;
        this.WF_CONTACT = 7;
        this.WF_CREATEDBY =8;
        this.WF_MODIFIEDBY =9;
        this.WF_APPROVEDBY =10;
        this.WF_USERTYPE =11;
        this.WF_SHARED_USERS =12;

        this.NOTIFICATION_TYPE_MESSAGE = 0;
        this.NOTIFICATION_TYPE_TEMPLATE = 1;
    };

    /*** Rules***/
    this.MASTERID = 1;
    this.TRANSID = 1;
    this.NAME = 2;
    /*** Rules***/
    this.STATUS_IN_PROGRESS = 47;
    this.ISocial=new function(){
        this.OUTLOOK=1;
        this.GOOGLE=1;
        this.FACEBOOK=1;
        this.TWITTER=1;

    };
    this.ITypes=new function(){
        this.LANGUAGES= 164;
    };

    this.IAddressTypes=new function()
    {
        this.BILLING=0;
        this.SHIPPING=1;
    };

    this.APPLICATION=1;
    this.MOBILE_BROWSER=2;
    this.OFFLINE=3;
    this.MOBILE_APP=4;
    this.API=5;
    this.PORTAL=6;
    this.CLOUD=7;
    /*this.APPLICATION=0;
     this.MOBILE_BROWSER=1;
     this.OFFLINE=2;
     this.MOBILE_APP=3;
     this.API=4;
     this.PORTAL=5;
     this.CLOUD=6;*/



    this.IUSERTYPES=new function()
    {
        this.CUSTOMER = 2;
        this.SERVICE=4;
    };

    this.IFont = new function()
    {

        this.ARIAL = 1;
        this.CALIBRI = 2;
        this.CAMBRIA = 3;
        this.CAMBRIA_MATH = 4;
        this.CANDARA = 5;
        this.COMIC_SANS_MS = 6;
        this.CONSOLAS = 7;
        this.CONSTANTIA = 8;
        this.CORBEL = 9;
        this.COURIER = 10;
        this.COURIER_NEW = 11;
        this.FIXEDSYS = 12;
        this.FRANKLIN_GOTHIC = 13;
        this.GABRIOLA = 14;
        this.GEORGIA = 15;
        this.IMPACT = 16;
        this.LUCIDA_CONSOLE = 17;
        this.LUCIDA_SANS_UNICODE = 18;
        this.MICROSOFT_SANS_SERIF = 19;
        this.MS_SANS_SERIF = 20;
        this.MS_SERIF = 21;
        this.PALATINO_LINOTYPE = 22;
        this.SEGOE_PRINT = 23;
        this.SEGOE_SCRIPT = 24;
        this.SEGOE_UI = 25;
        this.SEGOE_UI_SYMBOL = 26;
        this.SYSTEM = 27;
        this.TAHOMA = 28;
        this.TIMES_NEW_ROMAN = 29;
        this.TREBUCHET_MS = 30;
        this.VERDANA = 31;


        this.IStyle = new function()
        {
            this.NORMAL = 0;
            this.BOLD = 1;
            this.ITALIC = 2;
            this.UNDERLINE = 3;
            this.STRIKE_THROUGH = 4;
        };

    };
    this.MY_REMINDER=188;
    this.IACCOUNTTYPE_CUSTOMER = 5;
    this.IACCOUNTTYPE_CUSTOMERVENDOR = 7;
    this.QUEUE_MEMBERS = 176;
    this.FREQUENCY_TEMPLATES=2606;

    this.MINUTES = 1;
    this.HOURS = 2;
    this.DAYS = 3;
    this.WEEKS = 4;

    this.iPopupWidth = 350;

    this.IREMINDERS=new function()
    {
        this.FREQUENCY_TEMPLATES=0;

        this.MINUTES_5=18;
        this.MINUTES_15=19;
        this.MINUTES_30=20;
        this.HOUR_1=21;

        this.MINUTE_BEFORE_START_5=22;
        this.MINUTE_BEFORE_START_15=23;
        this.MINUTE_BEFORE_START_30=24;
        this.HOUR_BEFORE_START_1=25;
    };

    this.IAnnouncement_CUSTOMERS =new function()
    {
        this.CUSTOMERS=0;
        this.ALL_CUSTOMERS=1;
        this.FILTER=2;

    };
    this.IAnnouncement_USERS=new function()
    {
        this.USERS=0;
        this.ROLES=1;
        this.TEAMS=2;
        this.ALL_USERS=3;

    };

    this.IAnnouncement_CONTACTS =new function()
    {
        this.CONTACTS=0;
        this.ALL_CONTACTS=1;
        this.FILTER=2;

    };

    this.IAnnouncement =new function()
    {
        this.ALLUSERS=1;
        this.CUSTOMERS=2;
        this.ALL_CUSTOMERS=3;
        this.CUSTOMER_FILTER=4;
        this.CONTACTS=5;
        this.ALL_CONTACTS=6;
        this.CONTACT_FILTER=7;
        this.USERS=8;
        this.ROLES=9;
        this.TEAMS=10;

    };

    this.ICSSHomeCustomType =new function()
    {
        this.WIDGET=1;
        this.MENU=2;
        this.RIGHT_SECTION=3;
        this.FOOTER=4;
    };
    this.ICSSCustomMenuType =new function()
    {
        this.MODULE=1;
        this.WEB_LINK=2;
        this.HTML=3;
        this.IMAGE=4;
        this.MENU=5;
        this.REPORT=6;

    };
    this.SECURITY=new function()
    {
        //SPECIAL RIGHTS BIT POSITIONS FOR CALLS MODULE
        this.RE_OPEN=1;//Allow Re-Open
        this.EDIT=2;//Allow editing of Calls after close
        //this.DELETE=3;//Allow deleting of Calls
        this.UPDATE=3;//Allow update related modules after close
        this.CALL_CLOSE=4;
        this.SURVEY=5;
        this.CHANGE_ISSUE=6;
        this.REOPEN_CLOSE=7;
    };

    this.IMENU=new function()
    {
        this.ITEMTYPE_SERVICES_PRODUCT=13;
        this.ITEMTYPE_CALL_SLOT_DEFINITION=17;
        this.ITEMTYPE_STAGE_UPDATION=22;

        this.TYPE_MODULE = 1;
        this.TYPE_REPORT = 2;
        this.TYPE_TOOLS = 3;
        this.TYPE_EXTERNALMODULE = 4;
        /// reserved from 5 to 12
        this.TYPE_MODULE_READ_ACTION = 5;
        this.TYPE_MODULE_WRITE_ACTION = 6;
        this.TYPE_MODULE_SHARE_ACTION = 7;
        this.TYPE_MODULE_TRANSFER_ACTION = 8;
        this.ITEMTYPE_ANALYSER=26;//360 degrees dashlet
        this.PRICE_CHANGE=27; //Alma Pricing Change
        this.ITEMTYPE_PROMOTIONS=28; //Centra EDU
    };
    this.ILISTMASTER=new function()
    {
        this.INOTETYPE=new function()
        {
            this.TASK_DETAILS=140;
        };
    };
    this.IDocuments =new function()
    {
        this.IMAGE_ORIGINAL=0; //orginal
        this.IMAGE_LIST=1;
        this.IMAGE_BISSNESSCARD=2; //business card
        this.IMAGE_DETAILED=3;
        this.STARTSWITH=1;
        this.ENDSWITH=2;
    };
    this.IPMSSCHEDULE =new function()
    {

        this.ONETIME =1;
        this.INSTALLMENT =2;
        this.STAGE_WISE =3;

        this.TOKEN_AMOUNT=1;
        this.BOOKING_AMOUNT=2;
        this.INSTALLMENT_AMOUNT=3;
        this.STAGE_AMOUNT=4;
        this.REMAINING_AMOUNT=5;

        /*
         this.BOOKING_AMOUNT=1;
         this.INSTALLMENT_AMOUNT=2;
         this.STAGE_AMOUNT=3;
         this.REMAINING_AMOUNT=4;
         */

        this.AVAILABLE = 167;
        this.BOOKED = 168;
        this.RESERVE = 169;
        this.ALL = 170;
        this.CORNER = 171;
        this.PROPERTY=2327;
        this.UNITS_MODULE=2321;
        this.VENTURES=2332;
        this.BOOKINGS=7680;
        this.UNIT_RESERVATION=8960;
        this.CANCEL_BOOKING=7936;
        this.TRANSFER_BOOKING=10752;
        this.PMS_UNITS=2337;
        this.BLOCKS=2333;
        this.FLOORS=2334;
    };
    this.IPMS_UNIT_STATUS=new function()
    {
        this.VACANT= 162;
        this.OCCUPIED=163;
        this.UNDER_OFFER=164;
        this.RENOVATION=165;
        this.BOOKED=166;
    };

    this.IHTML5_SUPPORT=new function()
    {
        this.UPLOAD=0;
        this.COLOR_PICKER=1;
    };

    this.IListviewFilters=new function()
    {
        this.ALPHA_SEARCH=1;
        this.TEXT_SEARCH=2;
        this.ADVANCE_SEARCH=3;
        this.LAYOUT_SEARCH=4;
        this.LOOKIN_SEARCH=5;
        this.NUMARIC_SEARCH=6;
        this.FIELD_SEARCH=7;
        this.SNAPSHOT_SEARCH=8;
    }

    this.ICreateProductSet=new function()
    {
        this.PERCENTAGE=1;
        this.VALUE=2;
        this.PICK_RATE =1;
        this.FIXED_RATE =2;
        this.TO_SET =1;
        this.INDIVIDUALLY =2;
        this.EQUAL =3;
        this.PROPORTIONATE =4;
    }
    this.IBlackListCust=new function()
    {
        this.ADDTOBLACKLIST=150;
        this.BLACKLIST_RELEASE=151;
        this.BLACKLIST_HISTORY=152;
        this.BLACKLISTED_MODULES = 766;
    }
    this.GROUPNAMES = new function()
    {
        this.APP_CUSTOMIZATION = 13;
        this.SERVICEDESK = 7;
        this.TELEMKT = 9;
    }

    this.FILTERTYPE = new function()
    {
        this.APPROVAL_PROCESS = 1;
    }







    this.IREPORTS = new function(){
        this.NONE = 0;
        this.All_ITEMS = -1;
        this.RECENTLY_VIEWED = -2;
        this.ITEMS_I_CREATED = -3;
    };


    this.ILocationTracker=new function()
    {
        this.USER_STATUS_NORMAL=0;
        this.USER_STATUS_IDLE=1;
        this.USER_TRACKING_STATUS_MOVING=2;
        this.USER_TRACKING_STATUS_STOPPED=3;
        this.USER_TRACKING_STATUS_INACTIVE=4;
        this.USER_TRACKING_STATUS_TRACKED=5;
        //this.USER_TRACKING_STATUS_NONTRACKED=6;
        this.ROUTE_PLAN_TYPE_CUSTOMER=0;
        this.ROUTE_PLAN_TYPE_WORKAREA=1;
        this.ROUTE_PLAN_DATE_TYPE_FIXEDDATE=2;
        this.ROUTE_PLAN_DATE_TYPE_DATERANGE=3;
        this.ROUTE_PLAN_DATE_TYPE_DAYWISE=4;

        this.SHOW_ALL_SYNCED_LOCATIONS = 9;
        this.SHOW_ONLY_CUSTOMERS = 10;
        this.SHOW_CRM_APP_TRACKED_LOCATIONS = 11;
    };
    this.IStringFunctions=new function()
    {
        this.NONE=0;
        this.LOWER=50;
        this.UPPER=51;
        this.TITLE_CASE=52;
        this.ARABIC_NUMBER=53;
        this.MIN=54;
        this.MAX=55;
        this.SUM=56;
    };

    this.IOPPORTUNITYSTATUS = new function()
    {
        this.PROGRESS = 36;
        this.CLOSED = 37;
        this.LOST = 38;
        this.ABANDONED = 39;
        this.NOTINTERESTED = 40;
    };

    this.IStatus=new function()
    {
        this.CANCELLED=49;
        this.COMPLETED=48;
        this.INPROGRESS=47;
        this.NOTSTARTED=46;
    };

    this.ITheme=new function()
    {
        //packbit values from company DTO settings

        this.DEFAULT  = 1;
        this.SEAGREEN=2;
        this.SLATEGREY=3;


    };
    this.IMenuType=new function()
    {
        this.VERTICAL_MENU  = 0;
        this.HORIZONTAL_MENU = 1;


    };
    this.IMODULE_SETTINGS=new function()
    {
        //packbit values from company DTO settings
        this.WINDOW_STYLE_MULTI_PANE =4;
    };

    this.IMODULE_WINDOW=new function()
    {
        //packbit values from company DTO settings

        this.DEFAULT  = 0;
        this.MULTI_PANE =4;
        this.SPLIT_PANE = 5;
        this.TABBEDT_PANE = 6;
        this.REPORT_SPLITPANE = 7;
        this.SPLIT_PANE_WITH_TABBED_PANE = 8;
        this.REPORT_SPLITPANE_WITH_TABBED_PANE = 9;

    };
    this.ISPLIT_PANE_TYPE = new function(){
        this.GENERAL_PANE = 0;
        this.LEFT_PANE = 1;
    };

    this.ICreate_Action_Type=new function()
    {
        this.TYPE_STANDARD_ACTION=0;
        this.TYPE_MODULE_CREATION_ACTION=1;
        this.TYPE_FIELD_CREATION_ACTION_BASE=2;
        this.TYPE_FIELD_CREATION_ACTION_CHILD=3;
    };

    this.INUMBER_FORMAT=new function()
    {
        this.NONE= 0;
        this.LAKH = 1;
        this.MILLION = 2;
        this.DEFAULT = 3;
    };
    this.IAppointment = new function()
    {
        this.TYPE_APPOINTMENT = 1;
        this.TYPE_EVENT = 2;
        this.TYPE_MEETING = 3;
    };
    this.ISave_Url_Type = new function(){
        this.PRIMARY = 0;
        this.SECONDARY = 1;
    };

    this.IPrintAttachments=new function()
    {
        this.ISourceType=new function()
        {
            this.REPORT = 1;
            this.PRINT_LAYOUT = 2;
        };
        this.IAttachmentType=new function()
        {
            this.REPORT = 1;
            this.PDF = 2;
            this.ATTACHMENT_FIELD = 3;
        };
        this.IPosition=new function()
        {
            this.HEADER = 1;
            this.FOOTER = 2;
        };
    };
    this.IListView_Actions = new function(){
        this.REFRESH = 1;
        this.LAYOUT_CHANGE = 2;
        this.SEARCH = 3;
        this.SORTING = 4;
        this.DELETE =5;

    };
    this.ILANGUAGE_TYPE = new function()
    {
        this.ENGLISH = 0;
        this.ARABIC = 1;
        this.PERSIAN = 2;
    }
    this.IMessageCodes=new function()
    {
        this.ERR_INTEGRATION_ALREADY_DEFINED_LOC = 4094;
        this.FAILED_TO_SAVE_INTEGRATION = 4097;
    };

    this.IScheduler = new function()
    {
        this.DAY = 0;
        this.DATE = 1;
        this.TIMINGS = 2;
        this.DAY_VIEW = 0;
        this.WEEK_VIEW = 1;
    }
    this.IGOOGLE_APPTYPES = new function()
    {
        this.CONTACTS = 1;
        this.CALENDAR = 2;
        this.DRIVE = 3;
        this.GMAIL = 4;
        this.FACEBOOK = 5;
        this.TWITTER = 6;
        this.ONEDRIVE = 7;
        //google Authenticator-8
        this.RINGCENTRAL = 9;
        this.INSTAGRAM = 11;
        this.LINKEDIN = 13;

    }
    this.IExternalAuth=new function() {
        this.ILDAP = new function () {
            this.TYPE_MS_ACTIVE_DIRECOTRY = 1;
            this.TYPE_OPEN_LADAP = 2;

            this.CONNECTION_MODE_SSL = 1;
            this.CONNECTION_MODE_NON_SSL = 2;
        };
    };
    this.IPasswordPolicy =new function()
    {
        this.SMS_BASED_AUTHENTICATION =0;
        this.GOOGLE_AUTHENTICATION =1;
    };
    this.ISOCIAL_VIEW_TYPES =new function()
    {
        this.PAGE =1;
        this.GROUP =2;
        this.PROFILE =3;


    }
    this.ISOCIAL_TYPES =new function()
    {
        this.GOOGLE = 2;
        this.FACEBOOK =3;
        this.TWITTER =4;
        this.INSTAGRAM =12;
        this.LINKEDIN = 13;
        this.INDIAMART = 14;
    }
    this.ISOCIAL_APP_TYPES =new function()
    {

        this.FACEBOOK =5;
        this.FACEBOOK_FEED_MESSAGES= 14;
        this.INSTAGRAM = 11;
        this.INDIAMART = 12;

    }
    this.IUPLOAD_TYPES =new function()
    {
        this.UPLOAD_FILE = 1;
        this.DOCUMENT = 2;
        this.PRINTLAYOUT = 3;
    }
    this.IRECIPIENT_TYPES =new function()
    {
        this.CONTACT = 1;
        this.MODULE = 2;
        this.CUSTOM = 3;
    }
    this.IRECEIVER_OPTION =new function()
    {
        this.NO_ACCOUNT_CONTACT_PRESENT = 1;
        this.ONLY_ACCOUNT_PRESENT = 2;
        this.ACCOUNT_AND_SINGLE_FIELD_CONTACT_PRESENT = 3;
        this.ONLY_SINGLE_FIELD_CONTACT_PRESENT = 4;
        this.ONLY_MULTI_FIELD_CONTACT_PRESENT = 5;
    }
    this.ISUBRECIPIENT_TYPES =new function()
    {
        this.ALL_CONTACTS = 1;
        this.RECENT_CONTACTS = 2;
    }
    this.IREPLY_TYPES =new function()
    {
        this.FEEDS =1;
        this.COMMENT =2;
    }
    this.IDIALOG_TYPE =new function()
    {
        this.SHARING =1;
        this.ITEM_LIST =2;
    }

    this.ISOCIAL_VIEW_TYPES =new function()
    {
        this.PAGE =1;
        this.GROUP =2;
        this.PROFILE =3;


    };
    /*this.ISOCIAL_TYPES =new function()
    {
        this.FACEBOOK =3;
        this.TWITTER =4;
    };*/
    this.IREPLY_TYPES =new function()
    {
        this.FEEDS =1;
        this.COMMENT =2;
    };
    this.IDIALOG_TYPE =new function()
    {
        this.SHARING =1;
        this.ITEM_LIST =2;
    };

    this.ILEADSTATE =new function()
    {
        this.UNQUALIFIED = 516;
        this.QUALIFIED = 517;
    };
    this.ICONTRACTSTATE = new function()
    {
        this.ON_CREATION=1;
        this.ON_TERMINATION=2;
        this.ON_LEGAL_CASE=3;
        this.ON_CLOSE=4;
        this.ON_RENEWAL=5;
    };

    this.IMAIL_ACTION=new function()
    {
        this.REPLY=1;
        this.REPLY_ALL=2;
        this.FORWARD=3;
    };

    this.IBARCODES=new function()
    {
        this.BARCODE_1D=1;
        this.BARCODE_2D=2;
    }
    this.IRECIPIENT=new function()
    {
        this.RECIPIENT_NAME=71;
            this.RECIPIENT_EMAIL=72;
        this.RECIPIENT_PHONE=73;
        this.RECIPIENT_MOBILE=74;
        this.RECIPIENT_DESIGNATION=75;
        this.RECIPIENT_ADDRESS=76;
            this.RECIPIENT_ROLE=77;
    };
    this.IPlanType=new function()
    {
        this.UPGRADE=1;
        this.RENEWAL=2;
        this.ADDONS=3;
        this.UPGRADE_USER=4;
    };
    this.ISoftwareVersion=new function()
    {
        this.FREE = 0;
        this.STARTUP = 1;
        this.PROFESSIONAL = 2;
        this.ENTERPRISE = 3;
        this.UNLIMITED = 4;
        //this.ADD_SERVICES_STARTUP = 5;
        //this.ADD_SERVICES_PROFESSIONAL = 6;
        //this.ADD_SERVICES_ENTERPRISE = 7;
        //this.ADD_SERVICES_UNLIMITED = 8;
    };
    this.IVerticalType = new function () {
        this.SALES_MARKETING = 1;
        this.SALES_MARKETING_SERVICE = 2;
        this.REMS_SALES_LEASING = 3;
    }
    this.ISubscriptionType=new function()
    {
        this.TRAIL = 0;
        this.MONTHLY = 1;
        this.YEARLY = 2;
        this.BIYEARLY = 3;

    }

    this.IAddon_Type=new function()
    {
        this.STORAGE=1;
        this.EMAIL=2;
        this.DATA_BACKUP=3;
        this.API_CALLS=4;
        this.PREMIUM_SUPPORT=5;
        this.ONLINE_TRAINING=6;
        this.PREMIUM_CONSULTING=7;
    };
    this.IPeriodic_Type=new function()
    {
        this.DAILY=1;
        this.MONTHLY=2;
        this.YEARLY=3;
        this.LIFETIME=4;
    };
    this.IMeasure_Type=new function()
    {
        this.UNIT_WISE=1;
        this.Number=2;
    };
    this.IMeasure_Unit=new function()
    {
        this.GB=1;
        this.EMAILS=2;
        this.CALLS=3;
        this.BACKUPS=4;
        this.HOURS=5;
        this.NUMBER=6;
    };
    this.IEmailTemplates=new function()
    {
        this.EMBED_EMAIL_BODY=0;
    };

    this.IRecordStatus=new function()
    {
        this.ACTIVE=0;
        this.INACTIVE=1;
        this.DRAFT=6;
    };

    this.ITransStatus=new function()
    {
        this.INVOICED=322;
        this.PAID=326;
    };

    this.IFULFILLMENT_STATUS=new function()
    {
        this.BOOKED=631;
        this.PARTIALLY_FULFILLED=632;
        this.FULFILLED=633;
        this.DELIVERED=634;
        this.RE_STOCKED=634;
        this.CANCELLED=635;
        this.FAILURE=636;
    };

    this.IPaymentStatus=new function()
    {
        this.PENDING=297;
        this.AUTHORIZED=298;
        this.COMPLETE=299;
        this.FAILED=300;
        this.DECLINED=301;
        this.USER_CANCELLED=302;
    };
    this.IFA_TRANS_STATUS=new function () {
        this.OPEN=324;
        this.PARTIALLY_BILLED=327;
        this.PARTIALLY_PAID=330;
        this.PARTIALLY_ADJUSTED=342;
        this.DUE=320;
    };
    this.IActionPosition=new function()
    {
        this.EDIT_VIEW=0;
        this.DETAILED_VIEW=1;
        this.RELATED_VIEW=2;
        this.LIST_VIEW=3;
        this.HOME_VIEW=4;
        this.MENU_ITEM=5;
        this.OUTLOOK_VIEW=6;
    }
    this.IShopifyAutoScheduling=new function()
    {
        this.AUTO_ORDER_IMPORT=1;
        this.AUTO_ORDER_UPDATE=2;
        this.AUTO_UPDATE_STOCK=3;
    }

    this.ADMINISTRATION = new function(){
        this.EMAILTEMPLATES = 611;
        this.SMS = 612;
        this.TASKTEMPLATE = 613;

    }
    this.BUSINESS_PROCESS = new function(){
        this.WORKFLOWS = 151;
    }

    this.IEmailSettingsType = new function()
    {
        this.DEFAULT_SETTINGS = 0;
        this.CUSTOMER_OWN_DETAILS = 1;
        this.CENTRA_MAIL_WITH_CUSTOMER_DOMAIN = 2;
    };
    this.PMS_CONTRACT_CLOSE=25856
    this.ICampaign_MailStatus = new function()
    {
        this.DELIVERED=1;
        this.UNSENT=2;
        this.UNIQUEOPENS=3;
        this.UNOPENED=4;
        this.CLICKSOPENS=5;
        this.UNSUBSCRIBES=6;
    };

    this.IMESSAGE_TYPES =new function()
    {
        this.STATIC_MSG = 1;
        this.TEMPLATE_MSG = 2;
    }
    this.IRequestPayment=new function()
    {
        this.NONE=1;
        this.MANUALLY_VIA_ACTION=2;
        this.MANUALLY_VIA_ACTION_PLUS_ON_MODULE_SAVING=3;
    }

    this.EZETAP_RESPONSE_STATUS = new function()
    {
        this.PAYMENT_REQUEST_FAILED = 0;
        this.PAYMENT_REQUEST_SUCCESS = 1;

        this.CANCEL_PAYMENT_REQUEST_SUCCESS = 2;
        this.CANCEL_PAYMENT_REQUEST_FAILED = 3;


        this.PAYMENT_REQUEST_IN_PROGRESS = 14;
    };

    this.ISOCIAL_TYPE_STATUS=new function()
    {
        this.SINGLE_COMPANY=1;
        this.MULTIPLE_COMPANY=2;
        this.EXCEPTION=3;
    }
    this.ISOCIAL_LOGIN_TYPE=new function()
    {
        this.MANAGE_SOCIAL_INFO=1;
        this.HEADER_DROPDOWN=2;
    }

    this.IMobileThemes =new function()
    {
        this.CYAN_PRIMARY =0;
        this.GREEN_PRIMARY = 1;
        this.TEAL_PRIMARY = 2;
        this.PURPLE_PRIMARY = 3;
        this.ORANGE_PRIMARY = 4;
        this.LIGHT_BLUE_PRIMARY = 5;
        this.AMBER_PRIMARY = 6;
        this.DARY_GRAY_PRIMARY = 7;
        this.DARK_PINK_PRIMARY = 8;
    }
};

var ICMSConstants=new function()
{
    this.IPricingTypes=new function()
    {
        this.DOMESTIC =0;
        this.INTERNATIONAL =1;
    };
    this.IPriceCategories=new function()
    {
        this.WEIGHT_WISE =1;
        this.WEIGHT_CLASS =2;
        this.WEIGHT_SLAB =3;
        this.DELIVERY_TYPE =4;

        this.OVERALL_PALLET=5;
        this.DESTINATION_WISE_PALLET=6;
        this.PALLET_BOX_DESTINATION=7;
        this.PALLET_SIZE_WISE=8;

        this.OVERALL_FTL=9;
        this.OVERALL_LTL=10;
        this.FTL_DESTINATION_GRADES=11;
    };
    this.ICalculationTypes=new function()
    {
        this.Flat=1;
        this.Cumulative=2;
    };
    this.IServiceTypes =new function()
    {
        /*this.Express_Worldwide=1;
        this.Economy_Air=2;
        this.Economy_Road=3;*/
            this.EXPRESS=206;
            this.FRIDAY=207;
            this.INTERNATIONAL_AIR=208;
            this.INTERNATIONAL_ROAD=209;
            this.ODA=210;
            this.SAME_DAY=211;
            this.INTERCITY=212;
            this.EXPRESS_WORLDWIDE=255;
            this.WH_TO_WH=256;
            this.WH_TO_CUSTOMER=257;
            this.CUSTOMER_TO_WH=258;
    };
    this.IFreightCharges =new function()
    {
        this.Doc_Inbound=1;
        this.Doc_Outbound=2;
        this.Non_Doc_Inbound=3;
        this.Non_Doc_Outbound=4;
    };

    this.ISTATUS =new function()
    {
        this.PENDING= 233;
        this.CANCELED= 234;
        this.VALID= 235;
        this.COURIER_ASSIGNED= 236;
        this.COURIER_PICKED_UP= 237;
        this.CONFIRMED= 238;
        this.SHIPMENT_AT_WAREHOUSE= 239;
        /// Need to give another status for pre-paid shipments about payment BARCODE_GENERATED_PAYMENT_PENDING
//        this.BARCODE_GENERATED= 240;
        this.READY_TO_DISPATCH= 240;
        this.MANIFEST_GENERATED= 241;
        this.DISPATCHED= 242;
        this.ARRIVED_AT_DESTINATION= 243;
        this.SHIPMENT_MISSING= 244;
        this.MIS_ROUTED= 245;
        this.DAMAGED= 246;
        this.DELIVERY_ASSIGNED= 247;
        this.ON_THE_WAY_TO_DELIVERY=248;
        this.RETURNED_TO_DESTINATION_WAREHOUSE= 249;
        this.RETURNED_TO_ORIGIN= 250;
        this.DELIVERED= 251;
        this.COMPLETED= 252;
        this.READY_TO_RECEIVE= 259;
        this.READY_TO_COLLECT= 260;
        this.PARTIALLY_DISPATCHED= 261;
        this.CONSIGNEE_WILL_COLLECT= 262;
        this.CONSIGNEE_REQUESTED_TO_DELIVER= 265;
        this.DISPATCH_CANCELLED= 266;
        this.MANIFEST_CANCELLED= 267;
        this.DELIVERY_RETURN_INITIATED= 268;
        this.PAYMENT_CONFIRMATION_AWAITED=269;
        this.SHIPMENT_ON_HOLD=270;
        this.TRUCK_ARRIVED=274;
        this.PAYMENT_CONFIRMED=275;
        this.RELEASED=276;
        this.ACCIDENT=277;
        this.TRUCK_DISPATCHED=285;
        this.ARRIVED_AT_TRANSIT=286;
        this.PARTIALLY_ARRIVED=287;
        this.PARTIALLY_DELIVERED=288;
        this.DELIVERY_SCHEDULED=289;  // DELIVEY VERIFIED
    }

    this.IMANIFEST_SHIPMENT_STATUS=new function()
    {
        //Manifest Shipment Status -> '1,Manifest Prepared,2,Dispatch Prepared,3,Validated,4,Diaptched,5,Arrived,6,Delivered'
        this.MANIFEST_PREPARED=1;
        this.DISPATCH_PREPARED=2;
        this.DISPATCH_VALIDATED=3;
        this.DISPATCHED=4;
        this.ARRIVED=5;
        this.DELIVERED=6;
    }

    this.IDISPATCH_STATUS=new function()
    {
        ///1,prepared,2,validated,3,closed
        this.DISPATCH_PREPARED=1;
        this.VALIDATED=2;
        this.CLOSED=3;
        this.PARTIALLY_VALIDATED=8;
    }
    this.IARRIVAL_STATUS=new function()
    {
        ///1,prepared,2,validated
        this.ARRIVAL_PREPARED=1;
        this.VALIDATED=2;
    }
    this.IDELIVERY_STATUS=new function()
    {
        ///
        this.PENDING=1;
        this.DELIVERY_ASSIGNED=2;
        this.VALIDATED=3;    // BY CHECKER
        this.CONFIRM=4;    // BY DELIVERY EXECUTIVE
        this.DAMAGED=5;
        //            public static final short ON_THE_WAY_TO_DELIVERY=6;
        this.RETURNED_TO_WAREHOUSE=6;
        this.DELIVERED=7;
        this.CLOSED=8;
    };
    this.IBARCODE_SCAN_STATUS=new function()
    {
       this.PENDING=1;
       this.SCANNED=2;
    }
};



var ISuppportConstants = new function()
{
    this.IGENERAL=new function()
    {
        this.WORKLOG_DURATION_BASED_ON_START_END_TIME = 6;
    };
    this.ICHEQUE_STATUS=new function()
    {
        this.NOT_CLEARED=157;
        this.CLEARED=158;
        this.RETURN=159;
        this.HOLD=160;
        this.RETURN_ON_SETTLEMENT=161;
    };

};

var IEDUConstants = new function()
{
    this.IEnQuiryStatus = new function()
    {
       this.NEW=1;
       this.CONVERTED_TO_APPLICATION=2;
    };

    this.IApplicationStatus = new function()
    {
        this.NEW=1;
        this.ACCEPTED=2;
        this.REJECTED=3;
        this.ADMISSION_INCOMPLETE=4;
        this.ADMITTED=5;
    };

    this.IFEETYPE =new function()
    {
        this.ADMISSION_FEE =1;
        this.LIBRARY_FEE =2;
        this.SPORTS_FEE =3;
        this.TUITION_FEE =4;
    }









};





var IRepConstants = new function()
{

    this.CUSTOM_REPORTID_START=200000;
    //Control Types........
    this.NUMERIC= 1;
    this.TEXT= 2;
    this.DATERANGE= 3;
    this.AS_ON_DATE= 4;
    this.COMBOBOX= 5;
    this.TIMEFRAME= 6;
    this.CHECKBOX= 7;
    this.RADIOBUTTON= 8;
    this.COMBOBOX_AS_STRINGLIST= 9;

    this.SUMMARIZED= 10;
    this.DATA_ACCESS_OPTIONS= 11;
    this.LOCATION_ACCESS= 12;

    this.IFieldType=new function()
    {
        this.NORMAL= 0;
        this.MASTER= 1;
        this.EXTRA_FIELDS= 2;
        this.QUERY= 3;
        this.VIEW= 4;
    };
   this.ISelectionMode=new function()
   {
        this.SINGLE= 1;
        this.MULTI= 2;
    };

    this.IDataset=new function()
    {
        this.DEFAULT= 0;
        this.QUERY= 1;
        this.REPORT= 2;
    };

    this.IColumnType=new function()
    {
        this.FIELD=0;
        this.FORMULA=1;
        this.VIRTUAL=2;
        this.QUERY=3;
        this.PARTICULAR=4;
        this.SURVEY_QUESTION=5;
    };

    this.IVirtualFieldDisplayType = new function()
    {
        this.LABEL = 0;
        this.DISPLAY_FIELD = 1;
        this.APPEND_FIELD = 2;
    };

    this.IFunctionType=new function()
    {
        this.FORMULA=0;
        this.FUNCTION=1; //sum, max, min, ....

         this.FORMAT_BIT_RANGE=0x400;
    };

    // Zoom........
    this.ZOOM_NONE = 0;
    this.ZOOM_SIXTY = 60;
    this.ZOOM_EIGHTY = 80;
    this.ZOOM_HUNDRED = 100;
    this.ZOOM_ONETWENTY = 120;
    this.ZOOM_ONEFORTY = 140;

    //Grid ...........
    this.GRIDDISPLAY_BOTH= 0;
    this.GRIDDISPLAY_HORIZONTAL = 1;
    this.GRIDDISPLAY_VERTICAL = 2;
    this.GRIDDISPLAY_NONE = 4;

    this.EXPORT_SCREEN=0;
    this.EXPORT_EXCEL=1;
    this.EXPORT_PDF=2;
    this.EXPORT_CSV=3;

    this.IReportId = new function()
    {
        this.All_Active_Users= 10046;
        this.Documents= 10047;
        this.Users_Logged_In_This_Week= 10048;
        this.All_Deactive_Users= 10049;
        this.User_Rights= 10071;
    };

    this.IReportType = new function()
    {
        this.CUSTOMIZATION= 0;
        this.SUMMARY= 1;
        this.DETAIL= 2;
        this.LABEL= 3;
        this.GRAPH= 4;
        this.COMPARITIVE = 5;
    };

    this.IRowGroupStyle = new function()
    {
        // bit reserved for 1
        this.USER_ACTION=-1;  // user hits show/hide button at render time...
        this.SHOW_DETAILS=0;
        this.HIDE_DETAILS=1;

        this.NONE=0;
        // bit reserved for 1
        this.STYLE_LEFT=1;
        this.STYLE_CENTER=2;
        this.STYLE_PARTICULARS=3;

        this.STYLE_SUMMARY=4;// STYLE_PARTICULARS+ only summary values of the groupsi,e only numberic fields+ Hide details
        this.STYLE_SUMMARY_NO_GROUPS=5;// present groups as columns and  summary values of the groupsi,e only numberic fields+ Hide details
        this.STYLE_WITH_GROUPS_AS_COLUMNS=6; // display row groups as report columns
    };

    this.ISectionFilterType=new function()
    {
        this.GENERATED_BY=1;
        this.GENERATED_ON=2;
        this.SECURITY=3;
        this.DATERANGE=4;
        this.PARAMETER=5;
        this.ADVANCED=6;
    };

    this.IExternalReports=new function()
    {
        this.Report_Focus = 1;
        this.Report_Crystal= 2;
        this.Report_Jasper= 3;

        this.Report= 0;
        this.Module= 1;
        this.Param_Normal= 0;
        this.Param_Master_Control= 1;
    };

    this.IFunction=new function()
    {
        this.NONE=0;
        this.SUM=1;
        this.MAX=2;
        this.MIN=3;
        this.AVG=4;
        this.COUNT=5;
       /*this.SUM=1;
       this.AVG=2;
       this.MIN=3;
       this.MAX=4; 
       this.COUNT=5;*/
    };

    this.ISchedule=new function()
    {
        this.SENDTYPE_SELF=1;
        this.SENDTYPE_OTHER=2;
        this.SENDTYPE_ACCOUNT=3;
        this.SENDTYPE_EMAIL=4;

        this.SAVETYPE_CURRENT=0;
        this.SAVETYPE_FIXED=1;

        /*this.ATTACHED_AS_MAILBODY=1;
        this.ATTACHED_AS_FILE=2;*/

        this.IRecipientType=new function()
        {
            this.USERS=1;
            this.ROLES=2;
            this.DESIGNATIONS=3;
        };

        this.IAttachedAs=new function()
        {
            this.MAILBODY=1;
            this.HTML_FILE=2;
            this.EXCEL_FILE=3;
            this.CSV_FILE=4;
        };

        this.ISendAs=new function()
        {
            this.REPORT=1;
            this.CHART=2;
            this.REPORT_AND_CHART=3;
        };
    };

    this.IGroup=new function()
    {
        this.NONE= -1;
        this.ROW= 0;
        this.COLUMN= 1;
        this.MEASURES= 2;
    };

    this.IAlign=new function()
    {
        this.BITS_RESERVCED=2;

        this.HMAX_BITVALUE=3;
        this.HLEFT=1 ;
        this.HCENTER=2;
        this.HRIGHT=3;

        this.VMAX_BITVALUE=12;
        this.VTOP=1;
        this.VMIDDLE=2;
        this.VBOTTOM=3;
        //RESERVED=7,8;
    };

    this.ILayoutMisc=new function()
    {
        this.DO_NOT_ALLOW_TO_CHANGE_DAATE_FIELD=1;
        this.DO_NOT_RUN_REPORT_AUTOMATICALLY=2;
    };

    this.IColumnMisc=new function()
    {

        this.UNSED=0;//1
        this.HIDE=1;//2
        this.MANDATORYCOLUMN=2;//4
        this.PRINTUNDER=3;//16
        this.TOTAL=4;//32

        this.DECIMALS=5;//64
        this.NUMBER_FORMAT=9;//512
        this.CUMULATIVE_TOTAL=14;//16384
       this.FREEZE_COLUMN=15;// 32768 1 bit


        this.DECIMALS_BITS_USED_VALUE=0xF;
        this.NUMBER_FORMAT_BITS_USED_VALUE=0x1F;

        this.DECIMALS_START_VALUE=0x20;// max value=15
        this.NUMBER_FORMAT_START_VALUE=0x200;// max value=7//512
     this.CUMULATIVE_VALUES_BIT_RANGE=0x4000;// max value=7//16384
    };

    this.IRowGroup=new function()
    {
        this.NOGROUPING=-1;

        this.DISPLAY_TOTALS=0;
        this.NEWLINE_ON_START=1;
        this.NEWLINE_ON_END=2;
        this.DISPLAY_VALUES=3;
        this.SKIPPAGE_ON_END=4;
        this.IGNORE_LINE_NEXT_LEVEL=5;
        this.DISPLAY_COUNTS=6;
        this.DISPLAY_COLUMN_NAME=7;
        this.MANDATORY_GROUP_VALUE=8;
        this.CONTINUOUS_GROUP_VALUES=9;

        this.GROUP_VALUES_ASC=10;
        this.GROUP_VALUES_DESC=11;
        this.DECIMALS=12;  //4 bits used

        this.NUMBER_FORMAT=16; //5 bits used
        this.CUMULATIVE_TOTAL=21; // 1bit

        this.COLUMN_TOTALS=22;// 1 bit
        this.HIDE=23;// 1 bit
        this.HIDE_LABEL=24;// 1 bit
        this.COLUMN_GRAND_TOTALS=25;

        this.DECIMALS_BITS_USED_VALUE=0xF; //4 bits
        this.NUMBER_FORMAT_BITS_USED_VALUE=0x1F; //5 bits

        this.DECIMALS_START_VALUE=0x1000;// max value=15
        this.NUMBER_FORMAT_START_VALUE=0x10000;// max value=7
       this.CUMULATIVE_VALUE=0x4000;

    };

    this.IOrder=new function()
    {
        this.ASCENDING=0;
        this.DESCENDING=1;
    };

    this.IQuery=new function()
    {
        this.IParam_Variable=new function()
        {
            this.START_DATE_TIME="@STARTDATETIME";
            this.END_DATE_TIME="@ENDDATETIME";
            this.START_DATE="@STARTDATE";
            this.END_DATE="@ENDDATE";
        };
    };

    this.IFormat=new function()
    {
        this.IType=new function()
        {
            this.REPORT = 0;
            this.COLUMN = 1;
            this.ROW = 2;
        };

        this.IAction=new function()
        {
            this.ENTIRE_ROW = 0;
        };
    };

    this.IMeasureType=new function()
    {
        this.RECORD_COUNT=1;
        this.REPORT_COLUMN=2;
        this.REPORT_MEASURE=3;
    };

    this.ILimitType=new function()
    {
        this.TOP=0;
        this.BOTTOM=1;
        this.COMPLETE=2;
    };

    this.IRowType=new function()
    {
        this.EMPTY_ROW= -1;
        this.NORMAL=0;

        this.GRP_TITLE_STYLE1=2; // VALUE_AS_TITLE only
        this.GRP_TITLE_STYLE2=3; // VALUE_AS_TITLE_COUNT
        this.GRP_TITLE_STYLE3=4; // COLUMN NAME _VALUE_AS_TITLE
        this.GRP_TITLE_STYLE4=5; // COLUMN NAME_VALUE_AS_TITLE_COUNT

        this.ROWS_COUNT=6;
        this.PAGE_TOTAL =7;/// from 5 to 20 r resserved
        this.BLANK_LINE=8;
        this.PRINT_UNDER_NEW_ROW = 9;
        this.GRAND_TOTAL = 10;


        this.GRP_TOTAL_LEVEL1=21;
        this.GRP_TOTAL_LEVEL2=22;
        this.GRP_TOTAL_LEVEL3=23;
        this.GRP_TOTAL_LEVEL4=24;
        this.GRP_TOTAL_LEVEL5=25;
        this.GRP_TOTAL_LEVEL6=26;
    };
};if(typeof window["clAppBuffer"]!= 'object'){
var __nonMSDOMBrowser = (window.navigator.appName.toLowerCase().indexOf('explorer') == -1);
var ERROR_REDIRECT_LOGIN = -2;
var IGNORE_SESSION_EXPIRED = -3;
var MSG_SUCCESS=1;
var RELOGIN_AJAX = 2;
var RELOGIN_HREF = 3;
var MSG_SUCCESS_STATUS_ONLY=4;  // used in case where back screen is not required to display
var MSG_BUSINESS_MESSAGE = 5;  // used in case od business exception thrown from DAO
var MSG_SECURITY_EXCEPTION=8;
//9 Is different exception refer IMessageCodes.java
var MSG_INTEGRATION_MESSAGE=10;
var MSG_LICENSE_MESSAGE=11;
var MSG_COMPANY_REINDEXING=12;
var MSG_CONFIRMATION=13;

var  MSG_ERR_DUPLICATE=1001;

var  MSG_CANNOT_EXCEED_BASE_VALUE=8581;
var MSG_FISCAL_YEAR_NOT_DEFINED=532;


var ACTION_NORMAL=0;
var ACTION_SAVE=1;
var ACTION_UPDATE=2;
var ACTION_DELETE=3;
var ACTION_SORT=4;
var ACTION_DISPALY=5;
var ACTION_CREATE=6;
var ACTION_CONVERT=7;
var ACTION_REINDEX=8;
var ACTION_SEARCH=9;
var ACTION_SENDING=10;
var ACTION_LOADING=11;
var ACTION_RESTORING=12;
var ACTION_TRANSFERRING=13;
var ACTION_PROCESSING=14;
var ACTION_CHANGING=15;
var ACTION_REGISTERING=16;
var ACTION_SYNCING=17;
var ACTION_BACKUP=18;
var ACTION_IMPORT =19;
var ACTION_POSTING=20;
var ACTION_REPOSTING=21;

///////////////////// Namespace /////////////////////

var Focus= Focus || {};
if(!window.console){ window.console = {log: function(){} }; }

function namespace(sPackage)
{
	var iIndex=0,iEndIndex=-1;
	var objArray=Focus;
	var sCurrPackage;

    if(!util.startsWith(sPackage,'Focus.'))
    {
        alert("Invalid namespace name, it must start with 'Focus' ex: Focus.crm");
        return;
    }
   else
    { if(sPackage)
        sPackage=sPackage.substring(sPackage.indexOf('Focus.')+6);
    }

	while((iEndIndex=sPackage.indexOf(".",iEndIndex+1))>=0)
	{
		sCurrPackage=sPackage.substring(iIndex,iEndIndex);
		objArray[sCurrPackage]=objArray[sCurrPackage] || {};
		objArray=objArray[sCurrPackage];
		iIndex=iEndIndex+1;
	}

	if(iIndex>0)
	{
		sCurrPackage=sPackage.substring(sPackage.lastIndexOf(".")+1);
		objArray[sCurrPackage]=objArray[sCurrPackage] || {};
	}
	else
		Focus[sPackage]=Focus[sPackage] || {};

    //alert(sPackage+"--"+Focus[sPackage])

	//return Focus[sPackage];
}

function isNameSpaceExists(sNameSpace)
{
    if(sNameSpace.indexOf(".")!=-1)
    {
        if(Focus[sNameSpace])
            return true;
    }

    return false;

}

function getInstance(sFunctionWithNamespace)
{
    var sFunction=sFunctionWithNamespace;
    var iIndex=0,iEndIndex=-1;
	var sCurrPackage;
    var fnInstance=Focus;

	while((iEndIndex=sFunction.indexOf(".",iEndIndex+1))>=0)
	{
		sCurrPackage=sFunction.substring(iIndex,iEndIndex);
		//alert(sCurrPackage+"-"+fnInstance);
		fnInstance=fnInstance[sCurrPackage];
		iIndex=iEndIndex+1;
	}

	if(iIndex>0)
	{
		sCurrPackage=sFunction.substring(sFunction.lastIndexOf(".")+1);
		fnInstance=fnInstance[sCurrPackage];
	}

    return fnInstance;
}

/////////////////////

var clAppBuffer=new function()
{
    //var sContextPath = "/in/streamline";
    var sAppUrlPrefix = null;
    var sContextPath = null;
    var sTheme = "";
    var iThemeType = 0;
    var iDateFormat;
    var iTimeFormat;
    var sCompCode = 170,sUser = "",iLoginId=-1; //todo
    var sTodaysDate;
    var iNumOfDecimals;
    var iNumberFormat;
    var sRequestIp;
    var iModulewiseProperties;
    var clScreenPos=null;// stored via window.onMouseMove event need for tracking window close it is like x:pos,y:ps
    var byViewMode=0;
    var arrModuleCaptions=null;
    var arrModuleSingularCaptions=null;
    var clHashtable=null;

    var iActionId = 0;
    var iWindowType = 0;
    var iSubWindowType = 0;
    var bySplitPaneType = 0;
    var iLanguage = 0;
    var iServerVersion=0;
    var iScriptVersion=0;
    var iClientLatitude = 0;
    var iClientLongitude = 0;
    var isFarsiCalendar = false;
    var sFrameTemplateUrl = null;
    var isDocumentVisible = true;
    var sReqToken = null;

     this.getModuleCaptions=function()
    {
             return arrModuleCaptions;
    }

     this.getModuleSingularCaptions=function()
    {
            return arrModuleSingularCaptions;
    }


     this.setModuleCaptions=function(arrModuleCaptions1)
    {
             arrModuleCaptions = arrModuleCaptions1;
    }

    this.setModuleSingularCaptions=function(arrModuleSingularCaptions1)
    {
            arrModuleSingularCaptions = arrModuleSingularCaptions1;
    }

    this.setModuleCaptions11=function(arrModuleCaptions1)
    {
        //arrModuleCaptions=arrModuleCaptions1;
        arrModuleCaptions=[];
//        TODO: remove after captions set from company dto
        if(arrModuleCaptions1!=null && arrModuleCaptions1.length > 0 )
        {
        arrModuleCaptions1 = eval(arrModuleCaptions1);
        arrModuleCaptions["'"+Constants.LEADS+"'"]=arrModuleCaptions1[0];           //"Leads"
        arrModuleCaptions["'"+Constants.TASKS+"'"]=arrModuleCaptions1[1];        //"Tasks"
        arrModuleCaptions["'"+Constants.NOTES+"'"]=arrModuleCaptions1[2];
        arrModuleCaptions["'"+Constants.REQUEST+"'"]=arrModuleCaptions1[3];
        arrModuleCaptions["'"+Constants.CALL_WORKLOG+"'"]=arrModuleCaptions1[4];
        arrModuleCaptions["'"+Constants.CALL_TASKS+"'"]=arrModuleCaptions1[5];
        arrModuleCaptions["'"+Constants.CALL_RESOLUTION+"'"]=arrModuleCaptions1[6];
        arrModuleCaptions["'"+Constants.PARTS_REQUESTED+"'"]=arrModuleCaptions1[7];
        arrModuleCaptions["'"+Constants.PARTS_REPLACED+"'"]=arrModuleCaptions1[8];
        arrModuleCaptions["'"+Constants.CALL_CLOSE+"'"]=arrModuleCaptions1[9];
        arrModuleCaptions["'"+Constants.EMAILS+"'"]=arrModuleCaptions1[10];
        arrModuleCaptions["'"+Constants.ATTACHMENTS+"'"]=arrModuleCaptions1[11];
        arrModuleCaptions["'"+Constants.DOCUMENTS+"'"]=arrModuleCaptions1[12];
        arrModuleCaptions["'"+Constants.CALL_NOTES+"'"]=arrModuleCaptions1[13];
        arrModuleCaptions["'"+Constants.NOTIFICATIONS+"'"]=arrModuleCaptions1[14];
        arrModuleCaptions["'"+Constants.TELELEADS+"'"]=arrModuleCaptions1[15];
        //arrModuleCaptions["'"+Constants.ACCOUNTS+"'"]=arrModuleCaptions1[16];
        arrModuleCaptions["'"+Constants.CONTACTS+"'"]=arrModuleCaptions1[17];
        arrModuleCaptions["'"+Constants.REQUEST+"'"]=arrModuleCaptions1[18];
        arrModuleCaptions["'"+Constants.PRODUCTS+"'"]=arrModuleCaptions1[19];
        arrModuleCaptions["'"+Constants.ACCOUNTS+"'"]=arrModuleCaptions1[20];
        arrModuleCaptions["'"+Constants.ISSUES+"'"]=arrModuleCaptions1[21];
        arrModuleCaptions["'"+Constants.FREQUENCY_TEMPLATES+"'"]=arrModuleCaptions1[22];
        arrModuleCaptions["'"+Constants.ESTIMATION+"'"]=arrModuleCaptions1[23];
        arrModuleCaptions["'"+Constants.SERVICE_ORDER+"'" ]=arrModuleCaptions1[24];
        arrModuleCaptions["'"+Constants.SERVICE_QUOTE+"'" ]=arrModuleCaptions1[25];
        arrModuleCaptions["'"+Constants.CUST_SPARE_PARTS+"'"]=arrModuleCaptions1[26];

         arrModuleCaptions["'"+Constants.APPOINTMENTS+"'"]=arrModuleCaptions1[27];
        arrModuleCaptions["'"+Constants.TASKS+"'"]=arrModuleCaptions1[28];
        arrModuleCaptions["'"+Constants.ACTIVITIES+"'"]=arrModuleCaptions1[29];
        arrModuleCaptions["'"+Constants.PLANS+"'"]=arrModuleCaptions1[30];
        }
        /*arrModuleCaptions["'"+Constants.LEADS+"'"]="Leads";
        arrModuleCaptions["'"+Constants.TASKS+"'"]="Tasks";
        arrModuleCaptions["'"+Constants.NOTES+"'"]="Notes";
        arrModuleCaptions["'"+Constants.REQUEST+"'"]="Call";
        arrModuleCaptions["'"+Constants.CALL_WORKLOG+"'"]="WorkLogs";
        arrModuleCaptions["'"+Constants.CALL_TASKS+"'"]="Call Tasks";
        arrModuleCaptions["'"+Constants.CALL_RESOLUTION+"'"]="Resolution";
        arrModuleCaptions["'"+Constants.PARTS_REQUESTED+"'"]="Parts Requested";
        arrModuleCaptions["'"+Constants.PARTS_REPLACED+"'"]="Parts Replaced";
        arrModuleCaptions["'"+Constants.CALL_CLOSE+"'"]="Close Call";
        arrModuleCaptions["'"+Constants.EMAILS+"'"]="E-Mail";
        arrModuleCaptions["'"+Constants.ATTACHMENTS+"'"]="Attachment";
        arrModuleCaptions["'"+Constants.DOCUMENTS+"'"]="Document";
        arrModuleCaptions["'"+Constants.CALL_NOTES+"'"]="Call Notes";
        arrModuleCaptions["'"+Constants.NOTIFICATIONS+"'"]="Notify Settings";
        arrModuleCaptions["'"+Constants.TELELEADS+"'"]="Tele Leads";
        arrModuleCaptions["'"+Constants.ACCOUNTS+"'"]="Accounts";
        arrModuleCaptions["'"+Constants.CONTACTS+"'"]="Contacts";
        arrModuleCaptions["'"+Constants.REQUEST+"'"]="Requests";
        arrModuleCaptions["'"+Constants.PRODUCTS+"'"]="Products";
        arrModuleCaptions["'"+Constants.ACCOUNTS+"'"]="Accounts";
        arrModuleCaptions["'"+Constants.ISSUES+"'"]="Issues";
        arrModuleCaptions["'"+Constants.FREQUENCY_TEMPLATES+"'"]="Frequency Templates";
        arrModuleCaptions["'"+Constants.ESTIMATION+"'"]="Estimate";
        arrModuleCaptions["'"+Constants.SERVICE_ORDER+"'" ]="Service Order";
        arrModuleCaptions["'"+Constants.SERVICE_QUOTE+"'" ]="Service Quote";
        arrModuleCaptions["'"+Constants.QUOTE+"'" ]="Quote";
        arrModuleCaptions["'"+Constants.SALES_ORDER+"'" ]="Sales Order";
        arrModuleCaptions["'"+Constants.CUST_SPARE_PARTS+"'"]="Spare parts";

        arrModuleCaptions["'"+Constants.APPOINTMENTS+"'"]="Appointments";
        arrModuleCaptions["'"+Constants.TASKS+"'"]="Tasks";
        arrModuleCaptions["'"+Constants.ACTIVITIES+"'"]="Activities";
        arrModuleCaptions["'"+Constants.PLANS+"'"]="Plans";*/

//        alert(arrModuleCaptions.length)
    };
    this.setModuleSingularCaptions11=function(arrModuleSingularCaptions1)
    {
        //arrModuleSingularCaptions=arrModuleSingularCaptions1;
        arrModuleSingularCaptions=[];
        //TODO: remove after captions set from company dto
           if(arrModuleSingularCaptions1!=null && arrModuleSingularCaptions1.length > 0 )
           {
            arrModuleSingularCaptions1 = eval(arrModuleSingularCaptions1);
            arrModuleSingularCaptions["'"+Constants.NOTES+"'"]=arrModuleSingularCaptions1[0];
            arrModuleSingularCaptions["'"+Constants.CALL_NOTES+"'"]=arrModuleSingularCaptions1[1];
            arrModuleSingularCaptions["'"+Constants.REMINDERS+"'"]=arrModuleSingularCaptions1[2];
            arrModuleSingularCaptions["'"+Constants.FREQUENCY_TEMPLATES+"'"]=arrModuleSingularCaptions1[3];
            arrModuleSingularCaptions["'"+Constants.CUST_ASSETS+"'"]=arrModuleSingularCaptions1[4];
            arrModuleSingularCaptions["'"+Constants.SERVICES+"'"]=arrModuleSingularCaptions1[5];
            arrModuleSingularCaptions["'"+Constants.ACCOUNTS+"'"]=arrModuleSingularCaptions1[6];
            arrModuleSingularCaptions["'"+Constants.OPPORTUNITIES+"'"]=arrModuleSingularCaptions1[7];
            arrModuleSingularCaptions["'"+Constants.CONTACTS+"'"]=arrModuleSingularCaptions1[8];
            arrModuleSingularCaptions["'"+Constants.ISSUES+"'"]=arrModuleSingularCaptions1[9];
            arrModuleSingularCaptions["'"+Constants.REQUEST+"'"]=arrModuleSingularCaptions1[10];
            arrModuleSingularCaptions["'"+Constants.MSTR_LOCATION+"'"]=arrModuleSingularCaptions1[11];
            arrModuleSingularCaptions["'"+Constants.CONTRACTS+"'"]=arrModuleSingularCaptions1[12];
            arrModuleSingularCaptions["'"+Constants.IPMSSCHEDULE.PMS_UNITS+"'"]=arrModuleSingularCaptions1[13];
            arrModuleSingularCaptions["'"+Constants.ESTIMATION+"'"]=arrModuleSingularCaptions1[14];
            arrModuleSingularCaptions["'"+Constants.SERVICE_ORDER+"'" ]=arrModuleSingularCaptions1[15];
            arrModuleSingularCaptions["'"+Constants.SERVICE_QUOTE+"'" ]=arrModuleSingularCaptions1[16];
            arrModuleSingularCaptions["'"+Constants.PRODUCTS+"'"]=arrModuleSingularCaptions1[17];

            arrModuleSingularCaptions["'"+Constants.APPOINTMENTS+"'"]=arrModuleSingularCaptions1[18];
            arrModuleSingularCaptions["'"+Constants.TASKS+"'"]=arrModuleSingularCaptions1[19];
            arrModuleSingularCaptions["'"+Constants.ACTIVITIES+"'"]=arrModuleSingularCaptions1[20];
            arrModuleSingularCaptions["'"+Constants.PLANS+"'"]=arrModuleSingularCaptions1[21];
           }
}

 /*   this.setModuleSingularCaptions=function(arrModuleSingularCaptions1)
    {
        //arrModuleSingularCaptions=arrModuleSingularCaptions1;
        arrModuleSingularCaptions=[];
        //TODO: remove after captions set from company dto

        arrModuleSingularCaptions["'"+Constants.NOTES+"'"]="Note";
        arrModuleSingularCaptions["'"+Constants.CALL_NOTES+"'"]="Call Note";
        arrModuleSingularCaptions["'"+Constants.REMINDERS+"'"]="Reminder";
        arrModuleSingularCaptions["'"+Constants.FREQUENCY_TEMPLATES+"'"]="Frequency Template";
        arrModuleSingularCaptions["'"+Constants.CUST_ASSETS+"'"]="Customer Asset";
        arrModuleSingularCaptions["'"+Constants.SERVICES+"'"]="Service";
        arrModuleSingularCaptions["'"+Constants.ACCOUNTS+"'"]="Account";
        arrModuleSingularCaptions["'"+Constants.OPPORTUNITIES+"'"]="Opportunity";
        arrModuleSingularCaptions["'"+Constants.CONTACTS+"'"]="Contact";
        arrModuleSingularCaptions["'"+Constants.ISSUES+"'"]="Issue";
        arrModuleSingularCaptions["'"+Constants.REQUEST+"'"]="Request";
        arrModuleSingularCaptions["'"+Constants.MSTR_LOCATION+"'"]="Location";
        arrModuleSingularCaptions["'"+Constants.CONTRACTS+"'"]="Contract";
        arrModuleSingularCaptions["'"+Constants.IPMSSCHEDULE.PMS_UNITS+"'"]="PMS Units";
        arrModuleSingularCaptions["'"+Constants.ESTIMATION+"'"]="Estimate";
        arrModuleSingularCaptions["'"+Constants.SERVICE_ORDER+"'" ]="Service Order";
        arrModuleSingularCaptions["'"+Constants.SERVICE_QUOTE+"'" ]="Service Quotes";
        arrModuleSingularCaptions["'"+Constants.QUOTE+"'" ]="Quote";
        arrModuleSingularCaptions["'"+Constants.SALES_ORDER+"'" ]="Sales Order";
        arrModuleSingularCaptions["'"+Constants.PRODUCTS+"'"]="Product";

        arrModuleSingularCaptions["'"+Constants.APPOINTMENTS+"'"]="Appointment";
        arrModuleSingularCaptions["'"+Constants.TASKS+"'"]="Task";
        arrModuleSingularCaptions["'"+Constants.ACTIVITIES+"'"]="Activity";
        arrModuleSingularCaptions["'"+Constants.PLANS+"'"]="Plan";
        arrModuleSingularCaptions["'"+Constants.TELELEADS+"'"]="Tele Lead";


    };*/

    this.setLanguage=function(language)
    {
        iLanguage=language;
    };

    this.getLanguage = function()
    {
        return iLanguage;
    };

    this.setClientLatitude = function(latitude)
    {
        iClientLatitude = latitude;
    };

    this.getClientLatitude = function()
    {
        return iClientLatitude;
    };
    this.setClientLongitude = function(longitude)
    {
        iClientLongitude = longitude;
    };
    this.getClientLongitude = function()
    {
        return iClientLongitude;
    };



    this.getModuleCaption=function(iModuleId,isGetSingularName)
    {
        var sModuleCaption;
        if(isGetSingularName)
            sModuleCaption=arrModuleSingularCaptions[iModuleId];
        else
            sModuleCaption=arrModuleCaptions[iModuleId];
        if(!sModuleCaption)
            sModuleCaption="";
        return sModuleCaption;
    };

    var sCurrentUrl=null;
    var sBackUrlContent=[];

    this.setCurrentUrl=function(sURL)
    {
        sCurrentUrl=sURL;
    };

    this.getCurrentUrl=function()
    {
        return sCurrentUrl;
    };

    this.setBackUrl=function(sBackUrl)
    {
        sBackUrlContent[0]=sBackUrl;
    };

    this.setBackUrlResponse=function(sHTMLContent)
    {
        sBackUrlContent[1]=sHTMLContent;
    };

    this.setBackUrlLoadCallback=function(sBackUrlLoadCallback)
    {
        sBackUrlContent[2]=sBackUrlLoadCallback;
    };

    this.getBackUrl=function()
    {
        if(sBackUrlContent.length>0)
            return sBackUrlContent[0];
        return null;
    };

    this.getBackUrlResponse=function()
    {
        if(sBackUrlContent.length>1)
            return sBackUrlContent[1];
        return null;
    };

    this.getBackUrlLoadCallback=function()
    {
        if(sBackUrlContent.length>2)
            return sBackUrlContent[2];
        return null;
    };

    this.setDateFormat=function(iFormat,sModuleCaptions,sModuleSingularCaptions)
    {
        if(sModuleCaptions!=null)
            this.setModuleCaptions(eval(sModuleCaptions));
        if(sModuleSingularCaptions!=null)
            this.setModuleSingularCaptions(eval(sModuleSingularCaptions));
        iDateFormat=parseInt(iFormat,10);
    };

    this.getDateFormat=function()
    {
        if(!iDateFormat)
            iDateFormat=Constants.DDMMYYYY;
        return iDateFormat;
    };

    this.setTimeFormat=function(iFormat)
    {
        iTimeFormat=iFormat;
    };

    this.getTimeFormat=function()
    {
        if(!iTimeFormat)
            iTimeFormat=Constants.TIME_HHMMAMPM;
        return iTimeFormat;
    };


    this.setCompanyCode=function(sCompanyCode)
    {
        sCompCode = sCompanyCode;
    };

    this.getCompanyCode=function()
    {
        return sCompCode;
    };

    this.setUserName=function(sUserName)
    {
        sUser = sUserName;
    };

    this.getUserName=function()
    {
        return sUser;
    };

    this.setTheme=function(sThemeName)
    {
        sTheme = clAppBuffer.getContextPath()+"/"+sThemeName.substring(0,sThemeName.lastIndexOf("/"));
    };

    this.getTheme=function()
    {
        return sTheme;
    };
    this.setThemeType=function(iThemeTypeNo)
    {
        iThemeType=iThemeTypeNo;
    };
    this.getThemeType=function()
    {
        return iThemeType;
    };

    this.getAppUrlPrefix=function()
    {
        if(sAppUrlPrefix==null)
        {
            var sCurrLocation = window.location.href;
            if (sCurrLocation.indexOf("//") != -1)
                sCurrLocation = sCurrLocation.substring(sCurrLocation.indexOf("//") + 2);

            sCurrLocation = sCurrLocation.substring(sCurrLocation.indexOf("/"));
            if (sCurrLocation.indexOf("/in") == 0)
                sAppUrlPrefix = "/in";
            else if (sCurrLocation.indexOf("/us") == 0)
                sAppUrlPrefix = "/us";
            else
                sAppUrlPrefix = "";
        }

        return sAppUrlPrefix;
    };


    this.getContextPath=function()
    {
        if(sContextPath==null || util.trim(sContextPath).length==0)
            sContextPath = this.getAppUrlPrefix()+"/streamline";
        return sContextPath;
    };

    //this.setContextPath=function(sContextPathName)
    //{
        /*if(util.trim(sContextPathName).length>0)
            sContextPath=sContextPathName;
        else
          sContextPath="";*/
    //};

    this.setServerVersion=function(iVersion)
    {
        iServerVersion=parseFloat(iVersion);
    };

    this.getServerVersion=function()
    {
        return iServerVersion;
    };

    this.setTodaysDate=function(sDate)
    {
        sTodaysDate=sDate;
    };

    this.getTodaysDate=function()
    {
        return sTodaysDate;
    };

    this.getTodaysDateAsString=function()
    {
        return clAppBuffer.getTodaysDate();
    };

    this.setNumOfDecimals=function(iNumOfDec)
    {
        iNumOfDecimals=iNumOfDec;
    };

    this.getNumOfDecimals=function()
    {
        return iNumOfDecimals;
    };

    this.setModulewiseProperties=function(iModulewiseProps)
    {
        if(iModulewiseProps)
            iModulewiseProps=eval(iModulewiseProps);
        iModulewiseProperties=iModulewiseProps;
    };

    this.getModulewiseProperties=function(iModuleId)
    {
        if(iModulewiseProperties)
        {
            var iProperties;
            for(var i=0; i < iModulewiseProperties.length; i++)
            {
                iProperties=iModulewiseProperties[i];
                if(iProperties[0]==iModuleId)
                    return parseInt(iProperties[1],10);
            }
        }
        return 0;
    };

    this.getScriptPath=function()
    {
        return sContextPath + "/res/scripts/";
    };

    this.getStylesPath=function(isGetGlobalPath)
    {
        if (isGetGlobalPath)
            return sContextPath + "/res/global/styles/";
        return sTheme + "/styles/";
    };

    this.getImagePath=function(isGetGlobalPath)
    {
        if (isGetGlobalPath)
            return sContextPath + "/res/global/images/";
        return sTheme + "/images/";
    };
    this.setScreenPos=function(clScreenPos)
    {
      this.clScreenPos=clScreenPos;
    }
    this.getScreenPos=function()
    {
        return this.clScreenPos;
    }
    this.getLoginId = function()
    {
        return iLoginId;
    }
    this.setLoginId = function(loginId)
    {
        iLoginId = loginId;
    };

    this.setViewMode=function(byViewMode)
    {
        this.byViewMode=byViewMode;
    };

    this.getViewMode=function()
    {
        return this.byViewMode;
    };

     this.getMobileClient =function()
    {
        return ((this.byViewMode==Constants.MOBILE_BROWSER )&& (cross.getScreenType() == cross.TYPE_EXTRASMALL));
    };

     this.getTabletClient =function()
    {
        return ((this.byViewMode==Constants.MOBILE_BROWSER )&& (cross.getScreenType() ==cross.TYPE_SMALL));
    };
    this.setWindowTypes = function(iType){
        clAppBuffer.setWindowType(iType);
        clAppBuffer.setSubWindowType(iType);
        clAppBuffer.setActionId(0);
    };
    this.setWindowType=function(windowType)
    {
        iWindowType = windowType;
    };
    this.getWindowType=function()
    {
        return iWindowType;
    };
    this.setSplitPaneType = function(splitPaneType){
        bySplitPaneType = splitPaneType;
    };
    this.getSplitPaneType = function(){
        return bySplitPaneType;
    };


    this.setSubWindowType = function(subWindowType){
        if(subWindowType > 0)
            iSubWindowType = subWindowType;
        else
            iSubWindowType = 0;
    };
    this.getSubWindowType = function(){
        return iSubWindowType;
    };

    this.setActionId = function(actionId )
    {
        iActionId = actionId ;
    };
    this.getActionId  = function()
    {
        return iActionId;
    };

    this.isSupportSSE=function() // needed Tomcat 7+, Servlet-api3.0+ and latest browsers.. not supporting IE
    {
        return ( iServerVersion >= 7 &&(typeof(EventSource) !== "undefined"));
    }

    this.setNumberFormat=function(iNumFormat)
    {
        iNumberFormat=iNumFormat;
    };

    this.getNumberFormat=function()
    {
        return iNumberFormat;
    };
    this.setRequestIp=function(requestIp)
    {
        sRequestIp=requestIp;
    };

    this.getRequestIp=function()
    {
        return sRequestIp;
    };
    this.setScriptVersion=function(iVersion)
    {
        iScriptVersion=iVersion;
    };

    this.getScriptVersion=function()
    {
        return iScriptVersion;
    };
    this.getFarsiCalendar=function()
    {
        return isFarsiCalendar;
    };

    this.setFarsiCalendar=function(isFarsi)
    {
        isFarsiCalendar=isFarsi;
    };
    this.setFrameTemplateUrl=function(frameTemplateUrl)
    {
        sFrameTemplateUrl=frameTemplateUrl;
    };
    this.getFrameTemplateUrl=function()
    {
        return sFrameTemplateUrl;
    };

    this.setDocumentVisible=function(isVisible)
    {
        isDocumentVisible=isVisible;
    };
    this.getDocumentVisible=function()
    {
        return isDocumentVisible;
    };

    this.setReqToken=function(sToken)
    {
        sReqToken=sToken;

        if (window != parent.window && parent.window["clAppBuffer"] != undefined)
        {
            parent.clAppBuffer.setReqToken(sToken);

            /*if (parent.window != top.window && top.window["clAppBuffer"] != undefined)
                top.clAppBuffer.setReqToken(sToken);*/
        }
    };

    this.getReqToken=function()
    {
        return sReqToken;
    };

};

///////////////////// Javscript methods for registering singleton functions ///////////////////////////
var app=new function()
{
    var me=this;
    /**
     *    This method used to a register a instance while loading a screen and ll be removed when page or screen is reloaded or replace by other screen
     */
    me.clInstanceStore=null;
    me.hashURL=false;

    this.registerInstance=function(sInstanceId,clInstance,iScope)
    {
         // alert(( typeof(clInstance["clearState"])=="function") );
        if(iScope==Constants.SCOPE_APP)
        {
              if(typeof(clInstance["clearState"])== "function")
              {
                  if(!me.clInstanceStore)
                        me.clInstanceStore=new Array();
                    me.clInstanceStore[sInstanceId]=clInstance;
              }
        }
       else  if(iScope!=Constants.SCOPE_APP)//dialog/screen
        {
           if(!me.clInstanceStore)
                me.clInstanceStore=new Array();
            me.clInstanceStore[sInstanceId]=clInstance;
        }

    };

    this.removeAllInstancesFromStore=function()
    {
        if(me.clInstanceStore)
        {
            var key;
            var value;
            for(key in me.clInstanceStore)
            {

                value=me.clInstanceStore[key];
               // alert(typeof(value))
              //  alert(typeof(value["clearState"]))
            if(value && typeof(value["clearState"])== "function")
              {
                 value.clearState();

              }
             else
              {  //alert(key)
                if(me.clInstanceStore[key])
                { delete me.clInstanceStore[key];
                    value=null;
                }

                if(window[key])
                {
                    try{
                        delete window[key] ;    //deleting singleton objects
                        window[key]=null;
                    }
                    catch(e)
                    {
                        window[key]=null;// IE work around
                    }

                }
              }
            }
        }
    };

    ///////////////////// General methods ///////////////////////////

    this.getImagePath=function(isGetGlobalPath)
    {
        return clAppBuffer.getImagePath(isGetGlobalPath);
    };

    /**
     * Author   : YUGANDHAR & SREENIVAS
     * Date      : 14 Feb 2011
     * Purpose : set the innerHTML content to the div, and loads the Scripts,CSS details.
     * @param dvContainer of type DIV.
     * @param sResponseText of type HTML Content.
     * @param fnCallback  of type function, which will be invoked after resouces have been loaded.
     */
    this.setBodyContent=function(dvContainer, sResponseText, fnCallback,isRetainPrevInstances)
    {

        if(!isRetainPrevInstances)
        {
            me.clearPreviousInstances(dvContainer);
        }


    // alert("--3")
        if (window["initAllCombos"])
        {
            try
            {
                delete window["initAllCombos"]; // OPERA,Mozilla
                window["initAllCombos"] = undefined;//Mozilla

            }
            catch(ee) {
                window["initAllCombos"] = undefined;// IE}
            }

        }
        // alert("setting "+sResponseText)
        dvContainer.innerHTML = sResponseText;
        loadResources(dvContainer, fnCallback);
      // alert("--")

    };

    this.clearPreviousInstances=function(dvContainer)
    {
        //removeAllDialogInstances();//dialogbox.js

        removeAllComboInstances();// combobox.js
        msg.removeToastWindows(Constants.SCOPE_SCREEN);
        if (typeof window["removeAllAdvPageInstances"] == "function")
            removeAllAdvPageInstances();

        if (typeof window["PopupMenu"] == "function")
            PopupMenu.clearAll();

        if (typeof window["clDashboardDisplay"] == "object")
            clDashboardDisplay.removeAllDashletsTimeInterval();

        if (typeof window["clTimer"] == "object" && clTimer != null)
            clTimer.clearAllTimers();

        if (typeof window["verticalTimeline"] == "object" && verticalTimeline != null)
            verticalTimeline.clearAll();

        //if (typeof window["moduleBody"] == "object" && moduleBody != null)
        //    moduleBody.clearAll();


        // removeAllTableInstances();// table.js
        // removeAllAdvPageInstances();// advancePaging.js
        unloadResources(dvContainer);
        unloadInitScripts(dvContainer);
        cross.unregisterAllListeners(Constants.SCOPE_SCREEN);
        cross.unregisterWindowEvents(Constants.SCOPE_SCREEN);
        //cross.unregisterWindowEvents();
        //alert("-31-")
        me.removeAllInstancesFromStore();
    };


    ///////////////////// Showpop,dialog methods ///////////////////////////

    this.showPopUp=function(sUrl, sTitle, iWidth, iHeight, arrActions)
    {
        //    alert(sUrl+"--------"+arrActions)
        var clDialogBox = new DialogBox("appdlg", sTitle, 0, 0, iWidth, iHeight, sUrl, true, null, null, null, arrActions);
        clDialogBox.setBounds(0,0,iWidth, iHeight);
        clDialogBox.setCenter();
        clDialogBox.setTitle(sTitle);
        clDialogBox.show();
    };

    this.hidePopUp=function()
    {
        if(getDialogBox("appdlg")!=null)
            getDialogBox("appdlg").hide();
    };

   this.redirectToLogin=function()
    {
      window.location.href="login.do";
    };
    /** function is used to open the mainlogin page in a dialog box */
    this.showLoginDialog=function(sLastUrl)
    {
        var sUrl = con.getStruts2Url("", "login.do", "relogin", null, true);
        sUrl += "?isDialog=true&sCCode="+clAppBuffer.getCompanyCode()+"&sUser="+clAppBuffer.getUserName();
        var arrActions = new Array();
        var sContextPath = clAppBuffer.getContextPath();
        if (sLastUrl.indexOf(sContextPath) != -1)
            sLastUrl = sLastUrl.substring(sContextPath.length + 1);
        arrActions[0] = MsgHandler.getMsg(MsgConstants.LOGIN)+"|crmLogin.onClkLogin|lastUrl=" + escape(sLastUrl);
        arrActions[1] = MsgHandler.getMsg(MsgConstants.CANCEL)+"|crmLogin.onClkHideLogin";
        app.showPopUp(sUrl, MsgHandler.getMsg(MsgConstants.LOGIN), 500, 370, arrActions);
    };

    this.toggleShow=function(sId)
    {
        var objFld = document.getElementById(sId);
        if(objFld.style.display == "block" || objFld.style.display == "")
            cross.setVisible(objFld,false);
        else
            cross.setVisible(objFld,true);
    };

    this.toggleShowImage=function(objImg,sContentId,isMainContainer)
    {
        if(objImg.getAttribute("isDown") == 'true')
        {
            objImg.setAttribute("isDown",'false');
            if(isMainContainer){
//                objImg.src = app.getImagePath(false)+"up.gif";
                util.addClass(objImg,"fa fa-caret-up");
                util.removeClass(objImg,"fa fa-caret-down");/*  util.addClass(objImg,"s-up");
                util.removeClass(objImg,"s-down");*/
            }
            else
                objImg.src = app.getImagePath(false)+"fa fa-chevron-circle-up";/*  objImg.src = app.getImagePath(false)+"imritt.gif";*/
        }
        else
        {
            objImg.setAttribute("isDown",'true');
            if(isMainContainer){
//                objImg.src = app.getImagePath(false)+"down.gif";
                util.removeClass(objImg,"fa fa-caret-up");
                util.addClass(objImg,"fa fa-caret-down");/* util.removeClass(objImg,"s-up");
                util.addClass(objImg,"s-down");*/
            }
            else
                objImg.src = app.getImagePath(false)+"fa fa-chevron-circle-down";/* objImg.src = app.getImagePath(false)+"imritr.gif";*/
        }
        app.toggleShow(sContentId);
    };


    /*function is to show the toast window for recent items*/
    this.evOverShowDetails=function(obj,sId,iProngType,sParams,sAppendClass,sRemoveClass,objScoll,e,iTimeOutValue)
    {
        var sUrl;
        e = cross.getEvent(e);
        if(obj == null)
            obj = cross.getSrcElement(e);
        sUrl = con.getStruts2Url("security","home.do","getRecentItemDetails_nrf",null);
        sUrl += sParams;
        if(obj.getAttribute("recentMenuId") == null)
            obj.setAttribute("recentMenuId",sId);
        me.bShowMsg = true;

        if(!iTimeOutValue)
            iTimeOutValue=800;

        me.timer = setTimeout(function()
        {

            if(me.bShowMsg)
            {
                me.sId = sId;

                msg.showToastWindowFromURL(obj,sUrl,true,sId,iProngType,false,sAppendClass,sRemoveClass,false,true,Constants.SCOPE_SCREEN,objScoll);
            }
        },iTimeOutValue);
    };

     this.isHideCardView = function()
    {
        if(me.sId != null)
            msg.removeToastWindowDlg(me.sId);
    };

    /*function is to hide toast window*/
    this.evmOutClearTimer=function(obj,e)
    {
        e = cross.getEvent(e);
        if(obj == null)
            obj = cross.getSrcElement(e);
        var sId = obj.getAttribute("recentMenuId");
        if( me.sId != sId )
        {
            msg.hideToastWindowDlg(false,me.sId,obj);
//            obj.className = 'recentMenu';
        }

        me.bShowMsg = false;
        clearTimeout(me.timer);
    };

    /**Function is to show Formula Editor
     * */
    this.showFormulaEditor = function(sSrcFldId,iWidth,iHeight)
    {
        if(iWidth == null)
            iWidth = 950;//700;//650;
        if(iHeight == null)
            iHeight = 570;//420;//480;

        var clFormulaDlg,arrActions,sUrl;
        arrActions = new Array();
        arrActions[0] = MsgHandler.getMsg(MsgConstants.OK)+"|clFormulaBar.onClkGetFormula|sSrcFldId="+sSrcFldId;
        arrActions[1] = MsgHandler.getMsg(MsgConstants.CANCEL)+"|clFormulaBar.hideFormulaDlg";
         sUrl = con.getStruts2Url("common","report.do","getFormulaDetails",null)+"&fieldId="+sSrcFldId+"&moduleId="+document.getElementById("moduleId").value+"&expression="+util.encodeURI(document.getElementById(sSrcFldId).value);
        clFormulaDlg = new DialogBox("clFormulaDlg",MsgHandler.getMsg(MsgConstants.FORMULA_EDITOR),0,0,iWidth,iHeight,sUrl,true,null,true,true,arrActions);
        //sUrl = con.getStruts2Url("common","report.do","getFormulaDetails",null)+"&fieldId="+sSrcFldId+"&moduleId="+document.getElementById("moduleId").value+"&expression="+util.encodeURI(document.getElementById(sSrcFldId).value);
        //clFormulaDlg = new DialogBox("clFormulaDlg",MsgHandler.getMsg(MsgConstants.FORMULA_EDITOR),0,0,iWidth,iHeight,sUrl,true,null,true,true,arrActions,false,null,true,false,false,true,true,true);
        clFormulaDlg.setCenter();
        clFormulaDlg.show();
    };

    this.showFontDlg = function(sCallBackFn,bReturnAsFontDTO,sPrefix,sParams)
    {
        /*this.sCallBackFn=sCallBackFn;
        this.bReturnAsFontDTO=bReturnAsFontDTO;
        this.sPrefix=sPrefix;*/
      //  if(parent.getDialogBox("rules")!=null)
      //      parent.getDialogBox("rules").setBounds(220,80,1050,700);
        var arrActions = new Array(),sUrl,clFontDlg;
        arrActions[0] = MsgHandler.getMsg(MsgConstants.APPLY)+"|clFont.getFontInfo";
        arrActions[1] = MsgHandler.getMsg(MsgConstants.OK)+"|clFont.onClkOk";
        sUrl=con.getStruts2Url("report","fontDlg","getFontDlg",null,false);
        if(sParams)
            sUrl+=sParams;
        clFontDlg = getDialogBox("clFontDlg");
        clFontDlg = new DialogBox("clFontDlg",MsgHandler.getMsg(MsgConstants.FONT_STYLE),0,0,270,300, sUrl, true, null, false,true,arrActions,null,null,null,null,true,null,false,true);
        clFontDlg.callFn("clFont.init",[sCallBackFn,bReturnAsFontDTO,sPrefix],"clFontDlg");
        clFontDlg.setOnClose(app.callBackFontDlg);
        clFontDlg.show();
    };

    this.callBackFontDlg=function()
    {
        var clContentPaneWindow= getDialogBox("clFontDlg").getContentPaneWindow();
        if(clContentPaneWindow.clFont.isApplyStyles)
        {
         /*   clContentPaneWindow.clFont.init(me.sCallBackFn,me.bReturnAsFontDTO,me.sPrefix);
            me.sCallBackFn=null;
            me.bReturnAsFontDTO=null;
            me.sPrefix=null;*/
            clContentPaneWindow.clFont.getFontInfo();
        }
    };

     this.handleDocKey  = function(e)
    {
       e=cross.getEvent(e);
       var  key = e.keyCode;
       if(key == 115)    /*f4*/
       {
          var objSrc = cross.getSrcElement(e);
          if(objSrc.getAttribute("isformula") == "true")
              me.showFormulaEditor(objSrc.getAttribute("id"));
       }
    };
    this.handleWindowUnload = function(evt)
    {
        var isAltPressed,isCtrlPressed;
        evt=cross.getEvent(evt);
        //        iPositions = clAppBuffer.getScreenPos();
        isAltPressed = cross.isAltPressed(evt);
        isCtrlPressed = cross.isCtrlPressed(evt);
        if(evt.clientY < 0 || isAltPressed)
        {
            var sUrl;
            sUrl = con.getStruts2Url("default","logout","logout",null,true);
            con.sendPostRequest(sUrl,null,null,null,null,null,null,true);
        }

    };


    this.isHashBodyContent=function()
        {
          //util.writeToLog("isHashBodyContent="+this.hashBodyContent)
          return   me.hashURL;
        }
    this.setHashLocation=function(sUrl)
        {
            //util.writeToLog("setHashLocation")
            var d = new Date();
            var n = d.getMilliseconds();
             me.hashURL=false
            sUrl=CryptoJS.AES.encrypt(sUrl,"98852");
            window.location.hash=sUrl+"#"+n;



        }
     this.getHashLocation=function()
        {
       //   alert(window.location.hash)
           return window.location.hash.substring(1);//sUrl.substring(0  consider border,sUrl.lastIndexOf('#'));
        }

    this.handleHashChange= function(evt)
    {

        if(me.isHashBodyContent())
        {
            evt=cross.getEvent(evt);
            var sUrl= me.getHashLocation();
            /*if(sUrl && util.trim(sUrl).length>0)
            {
                sUrl=CryptoJS.AES.decrypt(sUrl,"98852");
                sUrl=sUrl.substring(0,sUrl.lastIndexOf('#'));
                //util.writeToLog("handleHashChange--"+sUrl)
                home.setCenterUI(sUrl,null,false,false,null,true);
            }*/
        }
      else
        {
           me.hashURL=true;
        }
      //  util.writeToLog("hashBodyContent="+me.hashURL)

    };


    this.attachCallbackFn=function(fnSource,fnTarget,arrTargetParams)
    {
        fnSource.fnCallback=[fnTarget,arrTargetParams];
    };

    this.detachCallbackFn=function(fnSource)
    {
        fnSource.fnCallback=null;
    };


// adds objects to buffer to use in application
    this.addToBuffer=function(sKey,sValue)
    {

        if( clAppBuffer.clHashtable==null)
            clAppBuffer.clHashtable = {};//new Hashtable();
        clAppBuffer.clHashtable[sKey]=sValue;
        //clAppBuffer.clHashtable.put(sKey,sValue);

    };

   this.getFromBuffer= function (sKey)
    {
      if( clAppBuffer.clHashtable!=null)
        return clAppBuffer.clHashtable[sKey];
//        return clAppBuffer.clHashtable.get(sKey);

    };

// removes objects from buffer
    this.removefromBuffer=function(sKey)
    {  if(clAppBuffer.clHashtable!=null)
            delete clAppBuffer.clHashtable[sKey];
        //clAppBuffer.clHashtable.remove(sKey);
    };

    /*this.makeCall = function (sCustomerNo,byEpbxType,evt)
    {
        cross.cancelBubble(evt);
        //con.sendPostRequest("social/ringCentralAuth!makeCall.do?customerNumber="+sCustomerNo, null, null, me.arhMakeCall);
        con.sendPostRequest("social/twilioAuth!makeCall.do?customerNumber="+sCustomerNo, null, null, null);
    };
*/
    /*this.showCustomerDetailsUsingPhoneNo=function(sPhoneNo,sDlgTitle,iEventType, isEndCall,sCallerId,isShowFollowUp)
    {
        var sParams,sStartDateTime,sCallStatus;
        sStartDateTime = dateUtils.getDateString(new Date(),clAppBuffer.getDateFormat(),true);
        sParams = "eventType=" + iEventType + "&epbx=true&uuid="+sCallerId+"&phone=" + util.encodeURI(sPhoneNo)+"&endCall="+isEndCall+"&startDateTime="+sStartDateTime;

        if(iEventType==1 )
        {
            sCallStatus = "Incoming Call";
            me.showIncomingCallPopUP(sParams, sDlgTitle,sPhoneNo,sCallerId);
        }
        else if(iEventType == 2)
        {
            sCallStatus = "Call Connected";
            if(document.getElementById("I_"+sCallerId))
            {
                clEPBXIncomingCall.updateIncomingCallDetails(sParams,iEventType,sPhoneNo,isEndCall,sCallerId,isShowFollowUp);
            }
            else{
                me.showIncomingCallPopUP(sParams, sDlgTitle,sPhoneNo,sCallerId);
            }
        }
        else if(iEventType == 6)
        {
            sCallStatus = "End Call";
            if(clEPBXIncomingCall)
                clEPBXIncomingCall.updateIncomingCallDetails(sParams,iEventType,sPhoneNo,isEndCall,sCallerId,isShowFollowUp);
        }
        util.blinkBrowserTab(sCallStatus,sPhoneNo);

    };*/

    /*this.setDisconnectedStatusOfCustomerDetailsDlg=function(sDlgTitle)
    {
        var clDlg=getDialogBox("custDetDlg");
        if(clDlg)
        {
            clDlg.setTitle(sDlgTitle);
            document.getElementById("custDetDlgtitlebar").style.backgroundColor="gray";
        }
    };*/

    this.showCustomerDetailsUsingModuleData=function(iModuleId, iTransId, iMemberId, sDlgTitle)
    {
        var sParams = "epbx=true&moduleId="+iModuleId+"&transId="+iTransId+"&memberId="+iMemberId;
        me.showCustomerDetailsDlg(sParams, sDlgTitle);
    };

    /*var iNoOfDlg= 0,iLeft= 0,iTop = 0;
    this.showIncomingCallPopUP=function(sParams, sTitle,sPhoneNo,sCallerId)
    {
        var sUrl;
        //var iCount= 0,iLeft=0,iTop=0;
        sUrl = con.getStruts2Url("common", "epbx.do", "getIncomingCall", null);
        sUrl += sParams;
        con.sendPostRequest(sUrl,sParams,arh,null,con.RESPONSE_HTML);
        var objDiv=null,popUpDv;
        function arh(sResponse)
        {
            objDiv=document.createElement("DIV");
            if(typeof window["initAllCombos"]=="function")
                initAllCombos=null;
            objDiv.innerHTML=sResponse;
            objDiv.setAttribute("id","I_"+sCallerId);
            util.addClass(objDiv,"movingPopup");
            document.body.appendChild(objDiv);



            if(iNoOfDlg > 1){
                iLeft=iLeft+40;
                iTop=iTop+40;
                objDiv.style.left=parseInt((document.body.clientWidth +iLeft - objDiv.offsetWidth)/2)+"px";
                objDiv.style.top=parseInt((document.body.clientHeight +iTop - objDiv.offsetHeight)/2)+"px";

            }else{
                objDiv.style.left=parseInt((document.body.clientWidth-objDiv.offsetWidth)/2)+"px";
                objDiv.style.top=parseInt((document.body.clientHeight-objDiv.offsetHeight)/2)+"px";

            }
            loadResources(objDiv,onLoad);
        }
        function onLoad()
        {
            clEPBXIncomingCall.dragElement(objDiv);
            util.onScriptsLoad();
        }
        iNoOfDlg++;
    };*/

    this.showCustomerDetailsDlg=function(sParams, sDlgTitle)
    {
        var sUrl;
        sUrl = con.getStruts2Url("security","home.do","getCustomerDetails",null);
        sUrl += sParams;

        var clDlg=getDialogBox("custDetDlg");

        clDlg=createSimpleDialog("custDetDlg",sDlgTitle,0,0,580,245,sUrl,false,null,true,false,false,false,false,false);


        //document.getElementById("custDetDlgtitlebar").style.backgroundColor="#00A86B";
        //document.getElementById("custDetDlgSTitlebar").style.color="#ffffff";
        clDlg.setOnClose(app.closeCustomerDetailsDlg);
        clDlg.setCenter();
        clDlg.show();
    };

    this.closeCustomerDetailsDlg = function()
    {
        home.releaseDialogReportHandles();
    };


    this.waitAndLogout = function(isOnLoad) {
        var sUrl = null;
        if(isOnLoad) {
            sUrl = con.getStruts2Url("default","logout","cancelLogout",null,true);
            con.sendPostRequest(sUrl,null,null,null,null,null,null,true);
        }
        else{
            sUrl = con.getStruts2Url("default","logout","waitAndLogout",null,true);
            con.sendPostRequest(sUrl,null,null,null,null,null,null,true);
        }

    };

     this.onClkDownloadUrl = function(e,sDownloadUrlInNewTab){
         if(sDownloadUrlInNewTab!=null) {
             if(sDownloadUrlInNewTab.indexOf("onedrive.")!=-1)
                window.open(sDownloadUrlInNewTab + "&isViewInline=1");
             else if(sDownloadUrlInNewTab.indexOf("drive.google.com")!=-1)
                window.open(sDownloadUrlInNewTab + "&isViewInline=1");
             else
                window.open(clAppBuffer.getContextPath() + "/" + sDownloadUrlInNewTab + "&isViewInline=1");
         }
        setTimeout(function(){ app.waitAndLogout(true); }, 20000);
    };
};

//alert(typeof(app))

}/*
 function addRowsToTable(oTBody , sResponseData)
 function removeAllRows(tBody)
 function fillTable(sResponse)
 function sendPostRequest(strURL, isPostMethod,sSubmitData,resHandler,readXML,statusId) ---var sStatusId=null;var responseHandler=null;var readXML=null;
 function processRequest()
 function clearControls(docForm)
 function formData2QueryString(docForm)
 */

var con=new function()
{
   this.RESPONSE_PLAIN=0;// script
   this.RESPONSE_HTML=1; // html code
   this.RESPONSE_XML=2;
   this.clProgressBar = null;

    var objRequests = null,iActiveCnt = 0,CONNECTION_LIMIT = 20,iBackgrndCnt=0 ;


    this.getActiveCount=function()
    {
        return iActiveCnt-iBackgrndCnt;
    };

    this.confirmCallback=function(iStatus)
        {
          //  alert("--");
            if(iStatus==Constants.YES)
            {
                window.location.href=clAppBuffer.getContextPath()+"/crmhome.do";
            }
        };
    this.sendGetRequest=function(strURL, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,byActionType,isExternalServer,objReqCache,sActionViewId)
    {
        return new sendRequest(strURL, false, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,true,byActionType,false,isExternalServer,objReqCache,sActionViewId);
    };

    this.sendGetRequest=function(strURL, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,byActionType,isExternalServer,objReqCache)
    {
        return new sendRequest(strURL, false, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,true,byActionType,false,isExternalServer,objReqCache);
    };

    this.sendPostRequest=function(strURL, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,isHideStatus,byActionType,isExternalServer,objReqCache)
    {
        return new sendRequest(strURL, true, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,isHideStatus,byActionType,false,isExternalServer,objReqCache,null);
    };
    this.sendPostRequest=function(strURL, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,isHideStatus,byActionType,isExternalServer,objReqCache,sActionViewId)
    {
        return new sendRequest(strURL, true, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,isHideStatus,byActionType,false,isExternalServer,objReqCache,sActionViewId);
    };

    this.sendNonUItRequest=function(strURL, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,isHideStatus,byActionType,isExternalServer,objReqCache)
    {
        return new sendRequest(strURL, true, sSubmitData, handlerObject, resHandler, responseAsXML, statusId, sSubActivity, isSync,isHideStatus,byActionType,true,isExternalServer,objReqCache);
    };


    /**
     * Send request to servlet
     @param strURL
     @param isPostMethod
     @param sSubmitData
     @param resHandler
     @param responseAsXML
     @param statusId
     **/
    function sendRequest(strURL,
                         isPostMethod,
                         sSubmitData,
                         handlerObj,
                         resHandler,
                         responseType,
                         statusId,
                         sSubActivity,
                         isSync,
                         isHideStatus,
                         byActionType,
                         isNonUI,
                         isExternalServer,objReqCache,
                         sActionViewId

            )
    {
     //   alert(strURL)
        //var me=this;
        var mStatusTag = null;
        var xmlHttpReq=null;
        var responseType = responseType;
        var handlerObject = handlerObj;
        var responseHandler = resHandler;
        var bHideStatus = isHideStatus;
        var mbyActionType = byActionType;
        var isNonUI=isNonUI;
        var isExternalServer=isExternalServer;
        if(statusId)
        {
            if(typeof statusId == "object")
                mStatusTag =statusId;
            else
                mStatusTag =document.getElementById(statusId);
        }

        if(!sSubmitData)
            sSubmitData="";

        var iIndex = strURL.indexOf("?");
        if (iIndex != -1)
        {
            sSubmitData += "&" + strURL.substring(iIndex + 1);
            strURL = strURL.substring(0, iIndex);
        }

        if(isExternalServer==true)
        {
             xmlHttpReq=getRequestObject(isSync);
        }
        else
        {
             xmlHttpReq = getConnection(isNonUI); 
            sSubmitData += "&isAjax=1&reqId=" + (new Date().getMilliseconds());
           if(isNonUI)
           {
                 var sSessionId=util.readCookie("JSESSIONID");
                if(sSessionId)
                  sSubmitData+="&JSESSIONID="+sSessionId;

                 sSubmitData=sSubmitData+"&appUrl="+util.encodeURI("/"+strURL);//"/" used for decrypting purpose

                 //strURL="/sbs/bserv"
                strURL=clAppBuffer.getAppUrlPrefix()+"/sbs/bserv";

           }
          else
            {
                if(strURL.indexOf(clAppBuffer.getContextPath())==-1)
                           strURL=clAppBuffer.getContextPath()+"/"+strURL;

            }


            showStatus(true,sActionViewId);
        }




        if (isPostMethod)
        {
            xmlHttpReq.open('POST', strURL, !isSync);
            sSubmitData=util.trim(sSubmitData);
        }
        else
        {
            xmlHttpReq.open('GET', (strURL + '?' + sSubmitData), !isSync);
            sSubmitData=null;
        }


        if(!isExternalServer)
        {

            xmlHttpReq.setRequestHeader("isAjax","1");

            var sVal=util.readCookie("_rtn");
            var sRTkn=clAppBuffer.getReqToken();
            if( sVal!=null && sRTkn!=null)
                xmlHttpReq.setRequestHeader("_reqtoken_"+sVal.split(".")[1],sRTkn);

            /*var arrDimensions = util.getWindowDimensions();
            xmlHttpReq.setRequestHeader("cdimen",(arrDimensions[0]+","+arrDimensions[1]));*/

            //xmlHttpReq.setRequestHeader("SYS_ACTION_ID",home.getActionId());
            if(typeof window["clAppBuffer"] == 'object')
            {
                xmlHttpReq.setRequestHeader("SYS_WINDOW_TYPE",clAppBuffer.getWindowType());
                xmlHttpReq.setRequestHeader("SYS_SPLIT_PANE_TYPE",clAppBuffer.getSplitPaneType());
                /*if(clAppBuffer.getWindowType() == Constants.IMODULE_WINDOW.SPLIT_PANE)
                 clAppBuffer.setSplitWithTabbedPane(true);*/
                if(clAppBuffer.setSplitPaneType)
                    clAppBuffer.setSplitPaneType(Constants.ISPLIT_PANE_TYPE.GENERAL_PANE);
            }

        }
//        if(!isNonUI)
        {
            if(objReqCache)
            {
                var iActionId=null;
                if( (iActionId==objReqCache['d_actionid']))
                {
                    //xmlHttpReq.setRequestHeader("SYS_ACTION_ID",iActionId); //commented this attribute since IE 11 giving some issue
                    //xmlHttpReq.setRequestHeader("SYS_WINDOW_TYPE",objReqCache['d_windowtype']);
                }
            }


        }
         xmlHttpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        xmlHttpReq.onreadystatechange = processRequest;
        /*xmlHttpReq.ontimeout = function (e)
        {
            returnConnection(xmlHttpReq,isNonUI);
        };*/
        xmlHttpReq.send(sSubmitData);

        //        me.xmlHttpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        //me.xmlHttpReq.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');



        //ajax callback function
      //  var objReqCache=objReqCache;
        function processRequest()
        {

            if (xmlHttpReq.readyState == 4) // 4=complete
            {
                var sResponse = null;


                if (responseType==con.RESPONSE_XML)
                    sResponse = xmlHttpReq.responseXML;
                else
                    sResponse = xmlHttpReq.responseText;
             //   alert(me.xmlHttpReq.status+","+iStatusCode)
                //alert("sResponse  "+sResponse);

                //removed req. token value setting from if block since it should also be set for server side errors
                var sToken=xmlHttpReq.getResponseHeader("reqToken");
                if(sToken!=null)
                    clAppBuffer.setReqToken(sToken);

                if (xmlHttpReq.status == 200)// 200=request complete
                {
                    setProgress(isNonUI,100);

                    var iStatusCode,appValue,sMsg;

                    if(isExternalServer)
                    {
                        //iStatusCode=MSG_SUCCESS;
                    }
                    else
                    {

                        iStatusCode=xmlHttpReq.getResponseHeader("SYS_SCODE");
                            appValue=xmlHttpReq.getResponseHeader("appValue");
                        sMsg=xmlHttpReq.getResponseHeader("SYS_SMSG");

                        /*var sToken=xmlHttpReq.getResponseHeader("reqToken");
                        if(sToken!=null)
                            clAppBuffer.setReqToken(sToken);*/
                        //else
                        //    clAppBuffer.setReqToken(null);
                    }

//                    alert(sMsg+"--88888----"+iStatusCode);

                    //alert(" sResponse === "+sResponse)
                    if(sResponse && sResponse.indexOf("SYS_SMSG^")!=-1)
                    {
                        if(sMsg)
                            sResponse=null;
                        else
                            sResponse=sResponse.replace("SYS_SMSG^",' ');
                    }

                    returnConnection(xmlHttpReq,isNonUI);
                    if(iStatusCode==MSG_SUCCESS || iStatusCode==MSG_SUCCESS_STATUS_ONLY)
                    {
                      sMsg = getMessage(sMsg);
                        if(util.trim(sMsg).length>0 && sMsg!="null")// TOAST MSG display
                           msg.showToastMsg(sMsg);
                    }
                    else if(iStatusCode==MSG_SECURITY_EXCEPTION || iStatusCode==MSG_BUSINESS_MESSAGE)
                    {
                        sMsg = getMessage(sMsg);
                        var isShowAlertMsg=xmlHttpReq.getResponseHeader("showAlertMsg");
                        if(isShowAlertMsg)
                            msg.showMessage(0,sMsg);
                        else
                            msg.showBusinessMsg(sMsg);
                    }
                    else if(iStatusCode==MSG_LICENSE_MESSAGE )
                    {
                        sMsg = getMessage(sMsg);
                        msg.showBusinessMsg(sMsg,Validation.ERROR_LICENSE);
                    }
                    else if(iStatusCode==MSG_INTEGRATION_MESSAGE )
                    {
                        sMsg = getMessage(sMsg);
                        msg.showBusinessMsg(sMsg,Validation.ERROR_INTEGRATION);
                    }
                    else if(iStatusCode==MSG_CONFIRMATION )
                    {
                        sMsg = getMessage(sMsg);
                        if(window.confirm(sMsg))
                        {
                            sendRequest(strURL,isPostMethod,sSubmitData+"&isConfirm=1",handlerObj,resHandler,responseType,statusId,sSubActivity,
                                isSync,isHideStatus,byActionType,isNonUI,isExternalServer,objReqCache,sActionViewId);

                            return;
                        }
                        else
                            iStatusCode=0;

                        //else
                        //    showStatus(false);
                        //return;

                        //msg.showBusinessMsg(sMsg,Validation.ERROR_INTEGRATION);
                    }


                    if(iStatusCode==MSG_SUCCESS)
                    {// after save displaying last page
                        home.setIsFormDataUpdated(false);
                        home.moveToBackUrl(true);
                    }
                        //home.handleResponse(sResponse);
                    else if(iStatusCode==ERROR_REDIRECT_LOGIN)
                    {
                        showStatus(false,sActionViewId);
                        app.redirectToLogin();
                        //app.showLoginDialog(strURL+"?"+sSubmitData);// ll handle later commeted by ::-SRIKANTH
                    }
                    else if(iStatusCode==IGNORE_SESSION_EXPIRED)
                    {    }
                    else
                    {

                        if (handlerObject)
                        {
                          if(!responseType || responseType==con.RESPONSE_PLAIN)
                          {
                          //    alert(sResponse)
                              handlerObject.apply(this, eval("new Array(" + sResponse + ");"));
                          }
                          else
                            handlerObject.apply(this, [sResponse,iStatusCode,sMsg,appValue,objReqCache]);

                        }
                        else if (responseHandler)
                        {
                            //util.writeToLog("Resp-handler")
                            eval(responseHandler)(sResponse, iStatusCode, sMsg, appValue, objReqCache, isNonUI);//MsgHeader will be the messages\
                        }

                        showStatus(false,sActionViewId);
                      //  util.writeToLog("showStatus(false)")
                    }


                }
                else ///404= file not found,403=forbidden,405=method not found
                {
                    if(xmlHttpReq.status==0)
                    {  //con.()

                          console.error('Ajax Error: Ajax request is aborted, status='+xmlHttpReq.status);
//                       msg.showConfirm("Ajax request is aborted, status="+xmlHttpReq.status+", would you like to re-login again","Ajax Error","con.confirmCallback",null,280,null,null,true);
                      returnConnection(xmlHttpReq,isNonUI);
                     //window.location.href

                    }
                   else
                    {

                        showStatus(false,sActionViewId);

                        util.toggleBackground(false);
                        errorHandler(xmlHttpReq.status, xmlHttpReq.statusText,xmlHttpReq.responseText);
                        returnConnection(xmlHttpReq,isNonUI);
                    }

                }
                bHideStatus = null;
                responseHandler = null;

                mStatusTag =null;
                //me.statusTag = null;
                handlerObject = null;
                byActionType = null;
            }
           else
            {
             //   returnConnection(xmlHttpReq,isNonUI);
             //if (me.xmlHttpReq.readyState == 1)
                   // writeToLog("readyState="+me.xmlHttpReq.readyState+"--"+iActiveCnt+"==="+ me.xmlHttpReq.status);
            }
        };

        function getMessage(sMsg)
        {
           // if(sMsg!=null && sMsg.length > 0 &&(clAppBuffer.getLanguage() == Constants.ILANGUAGE_TYPE.ARABIC || clAppBuffer.getLanguage() == Constants.ILANGUAGE_TYPE.PERSIAN))

            if(sMsg!=null)
            {
                 sMsg = decodeURIComponent(sMsg) ;
                 sMsg = sMsg .replace(/\+/g, ' ');
            }
            return sMsg;
        }

        /*function uploadProgress(e)
        { // upload process in progress
            if (e.lengthComputable)
            {
                var iPercentComplete = Math.round(e.loaded * 100 / e.total);
                con.clProgressBar.go(iPercentComplete);
            }
            else
            {
                con.clProgressBar.go(50);
            }
        }

        function uploadAbort()
        {
            con.clProgressBar.go(100);
        }*/

        function showStatus(isShowStatus,sActionViewId)
        {
            if(byActionType > 0)
            {
                var sMessage=MsgHandler.getStatusMsg(byActionType);

                /*if(byActionType==ACTION_SAVE)
                    sMessage="Saving...";
                else if(byActionType==ACTION_DELETE)
                    sMessage="Deleting...";
                else if(byActionType==ACTION_SORT)
                    sMessage="Sorting...";
                else if(byActionType==ACTION_UPDATE)
                    sMessage="Updating...";
                else if(byActionType==ACTION_DISPALY)
                    sMessage="Displaying...";
                else if(byActionType==ACTION_CREATE)
                    sMessage="Creating...";
               else if(byActionType==ACTION_CONVERT)
                    sMessage="Converting...";
               else if(byActionType==ACTION_REINDEX)
                    sMessage="Reindexing...";
                else if(byActionType==ACTION_SEARCH)
                    sMessage="Searching...";
                else if(byActionType==ACTION_SENDING)
                    sMessage="Sending...";
                else if(byActionType==ACTION_LOADING)
                    sMessage="Loading...";
                else if(byActionType==ACTION_RESTORING)
                    sMessage="Restoring Company...";
                else if(byActionType==ACTION_TRANSFERRING)
                    sMessage="Transferring...";
                else if(byActionType==ACTION_PROCESSING)
                    sMessage="Processing...";
                else if(byActionType==ACTION_CHANGING)
                    sMessage="Changing...";
                else if(byActionType==ACTION_REGISTERING)
                    sMessage="Registering...";
                else if(byActionType==ACTION_SYNCING)
                    sMessage="Syncing...";
                else if(byActionType==ACTION_BACKUP)
                    sMessage="Backup in progress...";
                else
                    sMessage="Loading...";*/

                if(isShowStatus)
                {
                    setProgress(isNonUI,30);

                }
             //   util.writeToLog("byActionType  "+byActionType)

               util.toggleBackground(isShowStatus,false,sMessage,true,false,sActionViewId);
            }
            else if (mStatusTag )
            {
               // util.writeToLog("statusTag-byActionType  "+byActionType)
                //showRequestStatus(isShowStatus);// for default  load image..........
                if(isShowStatus)
                    util.addClass(mStatusTag ,"loadingImg");
                else
                    util.removeClass(mStatusTag ,"loadingImg");
            }
        }

        function setProgress(isNonUI,iValue)
        {
            if(!isNonUI && !bHideStatus && !mStatusTag )
            {
                if(con.clProgressBar)
                    con.clProgressBar.go(iValue);
            }
        }
    }




    /**
    * Forms URL parameters of form.
    * docForm - form object
    * arrPackChkboxNames - List of checkbox names. Checkbox values will be packed as single value when their names are same.
    * callBackIgnoreElem - Callback function which will be invoked for each element. NUmber should returned from this function to indicate no. of elements to skip from current element. Ex: 0-include,1-skip current,2- skip current and next elements and so on...
    * callBackCombo - querystring formation of combobox is given to callback function handler.
    * isIncludeHidden - Fields which has property 'display:none' will be ignore by default. To include these fields this value should be given true
    * Returns string value of form fields data, elemname1=elemvalue1&elemname2=elemvalue2&.....
    */
    this.formData2QueryString=function(docForm, arrPackChkboxNames, callBackIgnoreElem,callBackCombo,isIncludeHidden,isCSVMultiComboValues, isSetNumericNullValuesToZero)
    {
        var strSubmitContent = '';
        var formElem;
        var iIgnoreElementsCount;
        var isInvokeCallBack;
        var arrPackChkboxValues = null;
        var objComboHiddenFld;

        if (callBackIgnoreElem && typeof[callBackIgnoreElem] == "object")
            isInvokeCallBack = true;

        if (arrPackChkboxNames)
        {
            arrPackChkboxValues = new Array();
            for (var i = 0; i < arrPackChkboxNames.length; i++)
                arrPackChkboxValues[arrPackChkboxNames[i]] = 0;
        }

        var sValue;

        for (var i = 0; i < docForm.elements.length; i++)
        {
            formElem = docForm.elements[i];
            //alert("formElem=="+formElem+","+i+",formElem attribute=="+formElem.getAttribute("mastertype"));
            if (formElem.name && (formElem.style.display != "none" || isIncludeHidden))
            {

                 if (formElem.getAttribute("combohidden") != null)  // issue related to searchinput flds ,, changed by srikanth
                 {
                     continue;
                 }
                if(formElem.getAttribute("isIgnore") ) //disabled
                {
                    if (formElem.getAttribute("mastertype") != null) // && document.getElementById(formElem.getAttribute("hiddenname")))
                    {
                        if(getComboHiddenFld(formElem))
                            i++;
                    }
                    continue;
                }

                if (isInvokeCallBack)
                {
                    iIgnoreElementsCount = callBackIgnoreElem(formElem,i);
                    if (iIgnoreElementsCount > 0)
                    {
                        if (iIgnoreElementsCount == 1)
                            continue;
                        i += iIgnoreElementsCount - 1;
                        continue;
                    }
                }

                var sFieldId=formElem.id;
                sValue = null;

                if(formElem.name.indexOf(".r[")!=-1)
                    sFieldId=sFieldId.substring(0,sFieldId.indexOf("["));

                if(formElem.getAttribute("x"+sFieldId)!=null && formElem.getAttribute("x"+sFieldId)!="")
                    sValue = util.decryptString(formElem.getAttribute("x"+sFieldId));
                else if(formElem.getAttribute("mastertype") == null)
                    sValue = util.trim(formElem.value);

                //sValue=util.trim(formElem.value);

                if (formElem.getAttribute("mastertype") != null)
                {
                    objComboHiddenFld=getComboHiddenFld(formElem);
                    if(callBackCombo)
                        strSubmitContent = callBackCombo(formElem,strSubmitContent);
                    else if(objComboHiddenFld)//if(document.getElementById(formElem.getAttribute("hiddenName")))
                    {
                        if (formElem.getAttribute("isAllowMultiSelect")=="true")
                        {
                            var arrSelectedIds=clMultiCombo.getSelectedIds(formElem.id);


                            if(isCSVMultiComboValues)
                            {
                                strSubmitContent += objComboHiddenFld.name+'=';

                                for(var j=0;j < arrSelectedIds.length;j++)
                                {
                                    strSubmitContent += arrSelectedIds[j];
                                    if(j != arrSelectedIds.length-1)
                                        strSubmitContent += ',';
                                }
                                strSubmitContent += '&';
                            }
                            else
                            {
                                for(var j=0;j < arrSelectedIds.length;j++)
                                    strSubmitContent += objComboHiddenFld.name+'='+arrSelectedIds[j]+'&';
                            }
                        }
                        else
                        {
                            strSubmitContent += objComboHiddenFld.name+'=';
                            if(formElem.getAttribute("mastertype")!=Constants.IStdMasters_GENERAL_STATIC_VALUES
                               && formElem.getAttribute("mastertype")!=Constants.Genernal_Narration
                                                    && (objComboHiddenFld.value=="" || objComboHiddenFld.value==-1))
                            {
                                if(formElem.getAttribute!=null && formElem.getAttribute("datatype")==Constants.DATATYPE_NUMBERLIST && objComboHiddenFld.value==-1) //allowing -1 value for numberlist field
                                    strSubmitContent += objComboHiddenFld.value+'&';
                                else
                                    strSubmitContent += '0&'; //passing 0 for integer setter method
                            }
                            else if(sValue!=null)
                                strSubmitContent += util.encodeURI(sValue)+'&';
                            else
                                strSubmitContent += util.encodeURI(objComboHiddenFld.value)+'&';
                            //strSubmitContent += formElem.getAttribute("hiddenName")+'='+document.getElementById(formElem.getAttribute("hiddenName")).value+'&';
                        }

                        //i += 1;     // issue related to searchinput flds ,, changed by srikanth
                        continue;

                    }
                    continue;
                }
                else if(util.hasClass(formElem, "bannerText"))
                {
                    if(formElem.value==formElem.getAttribute("bannerText"))
                        sValue="";
                    //continue;
                }




                switch (formElem.type)
                {
                    case 'text':
                    case 'hidden':
                    case 'password':
                    case 'textarea':
                    case 'select-one':


                        if(formElem.getAttribute("cdatatype")==TYPE_NUMERIC || formElem.getAttribute("cdatatype")==TYPE_FLOAT || formElem.getAttribute("cdatatype")==TYPE_LONG)
                        {
                            if ((!sValue || util.trim(sValue).length == 0))// changed by sri on chkri's request--on 20-7-16
                            {
                                if(isSetNumericNullValuesToZero)
                                    sValue = 0;
                            }
                            else if(sValue.indexOf(",")!=-1)
                                sValue=util.replaceAll(sValue,",","");

                            strSubmitContent += formElem.name + '=' + util.encodeURI(sValue) + '&';
                        }

                        else if(formElem.name=="uploadFileName") //TODO:
                            strSubmitContent += formElem.name + '=' + sValue + '&';
                        else
                        {
                            /*if(sValue && (sValue.indexOf("<script>")!=-1 || sValue.indexOf("javascript:")!=-1))
                            {
                                alert("Script tag not allowed inside text field");
                                sValue = "";
                            }*/
                            strSubmitContent += formElem.name + '=' + util.encodeURI(sValue) + '&';
                        }
                        break;

                    // Radio buttons
                    case 'radio':
                        if (formElem.checked)
                            strSubmitContent += formElem.name + '=' + util.encodeURI(sValue) + '&';
                        break;

                    // Checkboxes
                    case 'checkbox':
                        if (formElem.checked)
                        {
                            if(sValue=="on")
                                sValue="1";

                            if (arrPackChkboxValues != null && arrPackChkboxValues[formElem.name] >= 0)
                                arrPackChkboxValues[formElem.name] = util.packBit(arrPackChkboxValues[formElem.name],sValue);
                            else
                                strSubmitContent += formElem.name + '=' + util.encodeURI(sValue) + '&';
                        }
                        else if (arrPackChkboxValues == null || arrPackChkboxValues[formElem.name] ==null )
                            strSubmitContent += formElem.name + '=0&'; //sending default value as '0' for checkbox if it is not checked

                        break;
                }
            }
            else if (formElem && formElem.getAttribute !=null && formElem.getAttribute("mastertype")!=undefined && formElem.getAttribute("mastertype") != null && getComboHiddenFld(formElem))
                i++;
        }

        if (arrPackChkboxNames)
        {
            for (var i = 0; i < arrPackChkboxNames.length; i++)
            {
                if (arrPackChkboxValues[arrPackChkboxNames[i]] > 0)
                    strSubmitContent += arrPackChkboxNames[i] + "=" + arrPackChkboxValues[arrPackChkboxNames[i]] + "&";
            }
        }
        //Remove trailing separator
        strSubmitContent = strSubmitContent.substr(0, strSubmitContent.length - 1);
        return strSubmitContent;
    };


    /**
 * Creates URL that can be used to invoke a struts action based on the parameters.
 * @param sNamespace - package namespace without any slashes
 * @param sAction - action name
 * @param sMethod -
 * @param sJspName
 * @param isEmptyParams
 */
    this.getStruts2Url=function(sNamespace, sAction, sMethod, sJspName, isIncludeParams)
    {
        var sUrl;
        if (sNamespace)
            sUrl = sNamespace + "/" + sAction; //  base/rule
        else
            sUrl = sAction;
        if (sMethod)
        {
            //sAction = sAction.substring(0, sAction.substring(".do"));
            if(sUrl.indexOf(".do")!=-1)
                sUrl=sUrl.substring(0,sUrl.indexOf(".do"));
            sUrl += "!" + sMethod + ".do";// base/rule!getFieldRules
            if (!isIncludeParams)
                sUrl += "?"; // base/rule!getFieldRules?
        }
        else if (sJspName)
        {
            sUrl += "?result=" + sJspName; // base/rule?result=rules
            if (!isIncludeParams)
                sUrl += "&"; // base/rule?result=rules&
        }
        return sUrl;
    };

    /**
     * Clears form fields' data
     @param form name
     */
     this.clearControls=function(docForm,isClearMsgs,isClearModuleCombo)
     {
         var formElem,iMasterType;
         var objCombo = null;
         var sValue = null;

         var arrLinks = docForm.getElementsByTagName("a");
         for (var i = 0; i < arrLinks.length; i++)
         {
             if (arrLinks[i].getAttribute("islinkcolumn") == "true")
             {
                 arrLinks[i].innerText = ". . .";
                 arrLinks[i].removeAttribute("oldvalue");
                 if (arrLinks[i].getAttribute("ctrltype") == Constants.CONTROLTYPE_LINK_START + 1)
                     arrLinks[i].setAttribute("sourcemoduleid", 0);
             }

         }
        for (var i = 0; i < docForm.elements.length; i++)
         {
             formElem = docForm.elements[i];
             if(formElem.getAttribute("isIgnoreClear")=="true" || formElem.disabled)
             {
                 if(formElem.getAttribute("mastertype"))
                    i++;
                 continue;
             }

             sValue = formElem.getAttribute('default');
             if(!sValue)
                sValue="";

             switch (formElem.type)
             {
                 // Text fields, hidden form elements
                 case 'text':
                 case 'hidden':
                 case 'password':
                 case 'textarea':
                    if(formElem.getAttribute("mastertype"))
                    {
                        iMasterType = formElem.getAttribute("mastertype");
                        objCombo = getComboInstance(formElem.id);
                         if (objCombo)
                         {
                             if(formElem.getAttribute("isallowmultiselect")=="true")
                             {
                                 clMultiCombo.removeAllItems(formElem.id);
                             }
                             else
                             {
                                if(isClearModuleCombo) //
                                {
                                     if(iMasterType >0
                                            && (! (iMasterType >= Constants.LISTMASTER && iMasterType < (Constants.LISTMASTER+Constants.MODULE_SLAB)))
                                             && iMasterType != Constants.IStdMasters_GENERALMASTER
                                             && iMasterType != Constants.IStdMasters_GENERAL_STATIC_VALUES)
                                        objCombo.clearCombo();
                                }

                                   if (sValue)
                                   {
                                       objCombo.checkAndAddItem(sValue, true);
                                       i++; //skipping combohidden field since its value will be set in checkAndAddItem
                                   }
                                   else
                                    {
                                       // objCombo.initTextField(formElem,1);
                                        objCombo.clearSelection();//setSelectedIndex(-1);
                                        formElem.value=""

                                    }
                             }
                             //i++; //skipping combohidden field since its value will be set in checkAndAddItem
                         }
                        else //if(iMasterType>=0)
                             formElem.value="";

                    }
                    else if(formElem.name=="uploadFileName")
                     {
                         var sId=formElem.id.substring(formElem.id.indexOf("_")+1);
                         clHTML5Upload.clearLink(sId);
                         //initSWFUpload.clearLink(sId);
                     }
                    else
                        formElem.value = sValue;
                    break;
    //             case 'radio':
                 case 'checkbox':
                     formElem.checked = false;
                     break;
                case 'select-one':
                 {
                    formElem.value = sValue;
                     break;
                 }
             }

             if(isClearMsgs)
             {
                 if(formElem.className=="mandatoryInput")
                 {
                     Validation.clearMessage(formElem);
                 }
             }
         }


     };

    /**
     * Disables form controls
     @param docForm=form name
     @param isDisable= enable/disable
     @param isIgnoreInSubmission= also ignore the fields on form submission
     */
     this.disableControls=function(docForm,isDisable,isIgnoreInSubmission)
     {
         var formElem;

        for (var i = 0; i < docForm.elements.length; i++)
         {
             formElem = docForm.elements[i];
             con.disableControl(formElem,isDisable,isIgnoreInSubmission);
         }
     };

    this.disableControl=function(formElem,isDisable,isIgnoreInSubmission)
    {
        if(!formElem.getAttribute("isIgnoreDisabled"))
         {
             if(isDisable)
             {
                 formElem.disabled=true;
                 if(isIgnoreInSubmission)
                     formElem.setAttribute("isIgnore",true);
             }
             else
             {
                if(formElem.disabled)
                {
                    formElem.disabled = false;

                    if(formElem.getAttribute("isIgnore"))
                        formElem.removeAttribute("isIgnore");
                }
             }
         }
    };

    function errorHandler(iStatus, sMessage, sText)
    {
      //  alert(iStatus+"::"+sMessage+"::"+sText);
      //  toggleLoadStatus(true);
        var objErrorDiv = document.getElementById("errorDiv");
        sText=util.trim(sText);
        if(sText.length>0 && !objErrorDiv)
        {
            /*objErrorDiv =  document.createElement("DIV");
            objErrorDiv.id = "objErrorDiv";
            objErrorDiv.style.cssText="z-index:104;overflow:fixed;background-color:white;border:3px solid #DFDFDF;width:900px;height:600px;top:30px;left:200px;" +
                                      "position:absolute";
            //objErrorDiv.innerHTML="<div  id='dInnerMsgBox' style='height:20px;width:750px;  background-color:#becef9;border:1px solid #88a6fe'></div>";
            //objErrorDiv.innerHTML+="<div align='right' style='background-color:#88a6fe;'><input type='button' style='height:20px;width:20px;' value='X' onclick='closeErrorDiv()'></div>"  ;
//            objErrorDiv.innerHTML="<img align='right' src="+app.getImagePath()+"closeDlg.gif onclick='con.closeErrorDiv()'>"  ;
            objErrorDiv.innerHTML="<img align='right' src="+app.getImagePath(true)+"blank.png class='sModule s-closeDlg' onclick='con.closeErrorDiv()'>"  ;
            objErrorDiv.innerHTML+="<div style='background-color:#88a6fe;color:#1E3800;padding:3px;font-size:128%;'>&nbsp;&nbsp;Error Message</div>"  ;
            objErrorDiv.innerHTML+="<br><div style='overflow-y:auto; width=96%;height:454px;'><span >"+sText+"</span></div>"  ;*/

            var sInnerHTML="<div><span >"+sText+"</span></div>"  ;

            var clErrorDlg = new DialogBox("clErrorDlg","Error",140,160,830,550,null, false, null, true,true,null);
            clErrorDlg.setCenter();
            clErrorDlg.show();
            var objContentPane = clErrorDlg.getContentPane();
            objContentPane.innerHTML=sInnerHTML;

            //document.body.appendChild(objErrorDiv);

            stopResourceLoading();
            //initAllCombos = null;
            //loadResources(objErrorDiv,util.onScriptsLoad);

        }
    }

    this.closeErrorDiv=function(objWindow)
    {
        //toggleBackground(false);
        try
        {
            var objErrorDiv=null;
            if(objWindow)
                objErrorDiv=objWindow.document.getElementById("objErrorDiv");
            else
                objErrorDiv=document.getElementById("objErrorDiv");
            if(objErrorDiv)
                objErrorDiv.parentNode.removeChild(objErrorDiv) ;
        }
        catch(e) //added for handling cross-domain security exception
        {   }
    };

    this.setResponseAndLoadResources=function(objDiv,sResponse)
    {
        if (window["initAllCombos"])
        {
            try
            {
                delete window["initAllCombos"]; // OPERA,Mozilla
                window["initAllCombos"] = undefined;//Mozilla

            }
            catch(ee) {
                window["initAllCombos"] = undefined;// IE}
            }
        }
        initAllCombos=null;

        objDiv.innerHTML=sResponse;
        loadResources(objDiv, util.onScriptsLoad);

    };

  /*  function getRequestObject()
    {
        try
        {
            if (typeof XMLHttpRequest != 'undefined')
                return new XMLHttpRequest();
            else
                return new ActiveXObject("MSXML3.XMLHTTP"); //Microsoft.XMLHTTP
        }
        catch (e)
        {
            try
            {                 //Microsoft.XMLHTTP
                return new ActiveXObject("MSXML2.XMLHTTP.3.0");
            }
            catch (e)
            {
                try
                {                 //Microsoft.XMLHTTP
                    return new ActiveXObject("MSXML2.XMLHTTP.3.0");
                }
                catch (e)
                {
                    try
                    {                 //Microsoft.XMLHTTP
                        return new ActiveXObject("Msxml2.XMLHTTP");
                    }
                    catch (e)
                    {
                        try
                        {
                            return new ActiveXObject("Microsoft.XMLHTTP");
                        }
                        catch (E){ }
                    }
                }
            }
        }

        if (window.createRequest)
            return window.createRequest();

        return null;
        //if (!xmlHttpReq && typeof window.XMLHttpRequest != "undefined")
        *//*if (!xmlHttpReq && xmlHttpReq.overrideMimeType)   // it suports other than in IE 7
            xmlHttpReq.overrideMimeType('text/plain');
        return xmlHttpReq;*//*

    }
*/

  function getRequestObject()
{

    var xmlHttpReq=false;
    var xhrList = new Array('Msxml2.XMLHTTP.6.0','MSXML3.XMLHTTP','Msxml2.XMLHTTP.3.0','Msxml2.XMLHTTP','Microsoft.XMLHTTP');
   for (var i = 0; i < xhrList.length; ++i)
    {
               try
               {
                   xmlHttpReq = new ActiveXObject(xhrList[i]);
                   break;
               }
               catch (e)
               {
                 xmlHttpReq=false;
               }
     }
    if(!xmlHttpReq )
    {
       try
        {
            xmlHttpReq = new XMLHttpRequest();
            if(!isSync)
                xmlHttpReq.timeout = 1000*30;
        }
        catch (e)
        {
            xmlHttpReq=false;
        }
    }

    if (!xmlHttpReq && typeof XMLHttpRequest!='undefined')
        {
            try
            {
                xmlHttpReq = new XMLHttpRequest();
            }
            catch (e)
            {
                xmlHttpReq=false;
            }
        }

        if (!xmlHttpReq && window.createRequest)
        {
            try
            {
                xmlHttpReq = window.createRequest();
            }
            catch (e)
            {
                xmlHttpReq=false;
            }
         }


         if(!xmlHttpReq && xmlHttpReq.overrideMimeType)   // it suports other than in IE 7
                   xmlHttpReq.overrideMimeType('text/plain');



 /* if(!xmlHttpReq )
  {

   try
   {                 //Microsoft.XMLHTTP  //12029 Msxml2.XMLHTTP.6.0
      xmlHttpReq = new ActiveXObject("Msxml2.XMLHTTP.6.0");
   }
   catch (e)
   {

   try
   {                 //Microsoft.XMLHTTP  //12029 Msxml2.XMLHTTP.6.0
      xmlHttpReq = new ActiveXObject("MSXML3.XMLHTTP");
   }
   catch (e)
   {
    try
    {                 //Microsoft.XMLHTTP
      xmlHttpReq = new ActiveXObject("MSXML2.XMLHTTP.3.0");
    }
    catch (e)
    {
        try
        {                 //Microsoft.XMLHTTP
          xmlHttpReq = new ActiveXObject("MSXML2.XMLHTTP.3.0");
         }
        catch (e)
        {
            try
            {                 //Microsoft.XMLHTTP
              xmlHttpReq = new ActiveXObject("Msxml2.XMLHTTP");
             }
            catch (e)
            {
                  try
                  {
                   xmlHttpReq = new ActiveXObject("Microsoft.XMLHTTP");
                  }
                  catch (E)
                  {
                   xmlHttpReq = false;
                  }
          }
      }
    }
   }
 }
}
*/


    return xmlHttpReq;
}

    function getConnection(isNonUI)
    {
        var httpReq;
        if (!objRequests)
            objRequests = new Array();
       //// else
        // writeToLog("objRequests.length="+objRequests.length);
       // alert(Browser.isChrome)

       for(var i=objRequests.length-1;i>=0;i--)
        {
            // in case 2 cons connected to server and waiting got server, server entains one by one , so return only readyState=1 means just connected to server
             if(objRequests[i])
             {

                 if((Browser.isSafari || Browser.isChrome)  && objRequests[i].readyState==2)// first state in safari is=2
                 { // writeToLog("bf return");
                   returnConnection(objRequests[i],false);
                 }
                else if(objRequests[i].readyState==1)
                   returnConnection(objRequests[i],false);
              //  else if(objRequests[i].readyState==4)
               //    returnConnection(objRequests[i]);

             }
         }

        if ((iActiveCnt-iBackgrndCnt) > CONNECTION_LIMIT)
            alert("Active Http Connections have exceeded limit [" + CONNECTION_LIMIT+","+objRequests.length+"]");

    //    if (iActiveCnt <= CONNECTION_LIMIT)
            if (objRequests.length > 0) {
                httpReq = objRequests.shift();//shift returns first element whereas pop() returns last element
                //httpReq.onreadystatechange = null;
            }
            else
                httpReq = getRequestObject();

            iActiveCnt++;
          if(isNonUI)
            iBackgrndCnt++;
       // writeToLog("NEW con iActiveCnt=="+iActiveCnt);



       //writeToLog(" con *********iActiveCnt="+iActiveCnt);
    //    else
    //        alert("Active Http Connections have exceeded limit " + CONNECTION_LIMIT)

        return httpReq;
    }


    function returnConnection(httpReq,isNonUI)
    {
        if(objRequests)
        {
            if (httpReq && httpReq.readyState < 4 && Browser.isGecko)
            {
                       httpReq.abort(); //needed for FireFox
                     //  httpReq = null; //needed for FireFox

             }
            objRequests.push(httpReq);

        }
        if(iActiveCnt>0)
            iActiveCnt--;
        if(isNonUI==true)
            iBackgrndCnt--;
      //   writeToLog("RETURN iActiveCnt=="+iActiveCnt);

       // writeToLog(" return *********iActiveCnt="+iActiveCnt);
    }

    this.createNanoBar = function(){
        var dvNanoBar = document.getElementById('dvNanoBar');
        if(dvNanoBar && con.clProgressBar == null){
            var options = {
                bg: "linear-gradient(to right,#ef9a9a,#ffcc80,#fff59d,#a5d6a7,#90caf9,#9fa8da,#80deea)",
                target: dvNanoBar,
                id: 'mynano'
            };
//            00c853
            con.clProgressBar = new Nanobar( options );
            dvNanoBar.style.height = "0px";
            cross.getChildren(dvNanoBar)[0].style.float = "none";
        }
    };

    this.loadScript=function(sSrc,clInstanceName)
    {
        loadScript(sSrc,clInstanceName,false,null,true);
    };

    this.loadStyle=function(sSrc)
    {
        loadScript(sSrc,null,false,null,false);
    };

    this.loadScriptAsynchronously=function(sSrc,clInstanceName,fnCallbackOnLoad)
    {
        loadScript(sSrc,clInstanceName,true,fnCallbackOnLoad);
    };

    function loadScript(sSrc,clInstanceName,isAsynchronous,fnCallbackOnLoad,isScriptType)
      {
          if(!window[clInstanceName])
          {
              // get some kind of XMLHttpRequest
              var xmlHttpReq = getRequestObject();
              // open and send a synchronous request

              xmlHttpReq.open('GET', sSrc, isAsynchronous);
              xmlHttpReq.send('');

              // add the returned content to a newly created script tag
              var objScriptTag=null;
              if(isScriptType)     //for JS
              {
                  objScriptTag = document.createElement("SCRIPT");
                  objScriptTag.type = "text/javascript";
                  objScriptTag.id = "dyn_" + (new Date().getMilliseconds());
                  objScriptTag.text = xmlHttpReq.responseText;

              }
              else  //CSS
              {
                  objScriptTag = document.createElement("style");
                  objScriptTag.type = "text/css";
                  objScriptTag.rel="stylesheet";
                  objScriptTag.id = "dyn_" + (new Date().getMilliseconds());

                  var rules = document.createTextNode(xmlHttpReq.responseText);
                    if(objScriptTag.styleSheet)// IE
                        objScriptTag.styleSheet.cssText = rules.nodeValue;
                    else
                        objScriptTag.appendChild(rules);

//                  document.getElementsByTagName('head')[0].appendChild(objScriptTag);
              }
              document.getElementsByTagName('head')[0].appendChild(objScriptTag);
              //returnConnection(xmlHttpReq,false);
          }

          if(isAsynchronous)
          {
              if(fnCallbackOnLoad)
                  fnCallbackOnLoad(sSrc);
          }
      }

};
















/// entered  value '{1}' is invalid -- assumption for a field SINGLE parameter
/// use label element and assign id to as lbl...... and also use for attribute for the same which should be equal to id of input element

/*	All FocusTags components that requires validation checking must give attribute 'isRequiresValidation' to true
 (New attribute 'isRequiresValidation' will be added to all the form field components) */

var Validation = new function()
{
    var me=this;
    this.isValid = true;
    this.iMsgFlag=0; //This value will be set on each msg field and will be incremented in reset() function(to know one validation cycle is completed). It is used for handling multiple validation messages on single field
    // Message Types
    this.INFO_MSG = 1;
    this.ERROR_MSG = 2;
    this.SUCCESS_MSG = 3;
    // Error Types
    this.ERROR_MANDATORY = 4;
    this.ERROR_INVALID = 5;
    this.ERROR_CUSTOM = 6;
    this.ERROR_INTEGRATION = 7;
    this.SUCCESS = 8;
    this.ERROR_LICENSE = 9;
    this.WARNING_MSG = 10;

    this.firstInvalidFld = null;
    this.isFocusInvalidFld = true;

    this.setFocusInvalidFld=function(isFocusInvalidFld)
    {
        this.isFocusInvalidFld=isFocusInvalidFld;
    };

    //var arrMessages = {4:" is required",5:" is invalid"};

    /*	All the validation functions return status based on the below condition:
     when isLastField=false or null, it will always return true so that the remaining validations can be done.
     when isLastField=true, it will return overall validation true or false based on success or failure.
     * isLastField value must be true for the last field for validation process to finish.
     */


    /*	Checks mandatory
     elemInput	- Form element
     sLabel		- Field caption
     iDataType	- Validates based on datatype Constants defined in Constants.js file. (Ex: Constants.DATATYPE_DATE)
     isLastField - Must be true for the last form element to be validated
     iControlType - Optional. By default it will take default control based on datatype. (Ex: Constants.CONTROLTYPE_TXTBOX)
     */
    this.checkMandatory = function(elemInput, sLabel, iDataType, isLastField, iControlType,isGlobalMsg,iErrorType,isTabpaneView,sMsgboxId,iMinValue,isDoNotDisplayMsg,isValidateDisabledFld)
    {
        var isShowErrorMsg = false;

        if(elemInput.disabled && !isValidateDisabledFld)
            return this.setValidationStatus(true, elemInput, sLabel, isLastField,isGlobalMsg,null,iControlType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
        
        if (iControlType == Constants.CONTROLTYPE_RADIOBUTTON || iControlType == Constants.CONTROLTYPE_CHECKBOX)
        {
            if (!elemInput.checked)
                isShowErrorMsg = true;
        }
        else if (iControlType ==  Constants.CONTROLTYPE_OPTIONCTRL && elemInput.getAttribute("multiple")!=null)
        {
            isShowErrorMsg=(elemInput.options.length==0);
        }
        else if (iControlType == Constants.CONTROLTYPE_PHONE)
            return this.checkPhoneNo(elemInput, sLabel, isLastField, isGlobalMsg, Validation.ERROR_INVALID,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
        else if (iControlType == Constants.CONTROLTYPE_EMAIL)
            return this.checkEMail(elemInput, sLabel, isLastField, iControlType,isGlobalMsg, Validation.ERROR_INVALID,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
//        else if (iControlType == Constants.CONTROLTYPE_WEBSITE)
         else if (iControlType == Constants.CONTROLTYPE_COMBOBOX)
           {

                var clComboInstance=getComboInstance(elemInput.id);
          //     alert(elemInput.id+"  "+clComboInstance.isComboItemSelected())
                    if(! clComboInstance.isComboItemSelected())
                        isShowErrorMsg = true;

           }
        else
        {
            var sValue = util.trim(elemInput.value);
            if (!sValue || sValue.length == 0)
                isShowErrorMsg = true;
            else if(util.hasClass(elemInput,"bannerText"))
                isShowErrorMsg = true;
        }

        if (isShowErrorMsg)
        {
            if(!iErrorType)
                iErrorType=Validation.ERROR_MANDATORY;
            return this.setValidationStatus(false, elemInput, sLabel, isLastField,isGlobalMsg,iErrorType ,iControlType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
        }

        if(!iErrorType)
            iErrorType=Validation.ERROR_INVALID;

        if (iDataType == Constants.DATATYPE_DATE) //Invalid date
            return this.checkDate(elemInput, sLabel, clAppBuffer.getDateFormat(), "/", isLastField, iControlType,isGlobalMsg, iErrorType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
        else if (iDataType == Constants.DATATYPE_TIME && iControlType == Constants.CONTROLTYPE_TIMEPICKER) //Invalid time
            return this.checkTime(elemInput, sLabel, false, isLastField, iControlType,isGlobalMsg, iErrorType,clAppBuffer.getTimeFormat(),true,isTabpaneView,sMsgboxId);
        else if (iDataType == Constants.DATATYPE_NUMBER) //Invalid number
            return this.checkNumeric(elemInput, sLabel, isLastField, iControlType,isGlobalMsg, iErrorType,false,isTabpaneView,sMsgboxId,iMinValue,isDoNotDisplayMsg);
        else if (iDataType == Constants.DATATYPE_FRACTION)
            return this.checkFloat(elemInput, sLabel, isLastField, iControlType,isGlobalMsg, iErrorType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
        else
            return this.setValidationStatus(!isShowErrorMsg, elemInput, sLabel, isLastField,isGlobalMsg,null,iControlType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
    };

    this.validateValue=function(sValue,iDataType,iControlType,isCheckMandatory)
    {
        sValue = util.trim(sValue);

        if(isCheckMandatory && sValue.length==0)
        {
            return Validation.ERROR_MANDATORY;
        }

        var isValid=true;
        
        if (iControlType == Constants.CONTROLTYPE_PHONE)
            isValid=this.isValidPhoneNo(sValue);
        else if (iControlType == Constants.CONTROLTYPE_EMAIL)
            isValid=this.isValidEMail(sValue);
//        else if (iControlType == Constants.CONTROLTYPE_WEBSITE)
       else if (iControlType == Constants.CONTROLTYPE_COMBOBOX)
       {
            /*var clComboInstance=getComboInstance(elemInput.id);

                if(! clComboInstance.isComboItemSelected())
                    isShowErrorMsg = true;*/
       }
        else if (iDataType == Constants.DATATYPE_DATE) //Invalid date
            isValid=this.isValidDate(sValue, clAppBuffer.getDateFormat());
        else if (iDataType == Constants.DATATYPE_TIME) //Invalid time
            isValid=this.isValidTime(sValue, false, clAppBuffer.getTimeFormat(),true);
        else if (iDataType == Constants.DATATYPE_NUMBER) //Invalid number
        {
            if(!isCheckMandatory && sValue==0)
                isValid=true;
            else
                isValid=this.isValidNumeric(sValue, false);
        }
        else if (iDataType == Constants.DATATYPE_FRACTION)
        {
            if(!isCheckMandatory && sValue==0)
                isValid=true;
            else
                isValid=this.isValidFloat(sValue);
        }

        if(!isValid)
            return Validation.ERROR_INVALID;

        return Validation.SUCCESS;
    };
    

    this.isValidNumeric = function(sValue,bAllowNegative)
    {
        sValue=util.parseNumberValue(sValue);

        var sPattern;
        if(!bAllowNegative)
         sPattern = /^[+-]?[0-9]+$/;
        else
         sPattern = /^[0-9]+$/;

        var isValid=sPattern.test(sValue);
        return isValid;

    };

    /*	Checks valid Numeric value*/
    this.checkNumeric = function(elemInput, sLabel, isLastField, iControlType,isGlobalMsg, iErrorType,bAllowNegative,isTabpaneView,sMsgboxId,iMinValue,isDoNotDisplayMsg)
    {
        //        var sPattern=/([^\-0-9])/g;

      /*  var sPattern;
        if(!bAllowNegative)
         sPattern = /^[+-]?[0-9]+$/;
        else
         sPattern = /^[0-9]+$/;

        if(!iErrorType)
            iErrorType=this.ERROR_INVALID;

        var isValid=sPattern.test(elemInput.value);*/
        var isValid=me.isValidNumeric(elemInput.value,bAllowNegative)
        if(isValid && iMinValue!=undefined)
        {
            isValid=parseInt(elemInput.value,10)>=iMinValue;
            if(!isValid)
            {
                if(iMinValue==1)
                    sLabel=MsgHandler.getMsg(MsgConstants.GREATER_THAN_ZERO,0,0,sLabel);
                else
                    sLabel=MsgHandler.getMsg(MsgConstants.GREATER_THAN_EQUAL_TO,0,0,sLabel,iMinValue);//" or equal to "+iMinValue;

                iErrorType=this.ERROR_CUSTOM;
            }
        }


        return this.setValidationStatus(isValid, elemInput, sLabel, isLastField,isGlobalMsg,iErrorType,iControlType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
    };
    this.isValidFloat = function(sValue)
    {
        sValue=util.parseNumberValue(sValue);
        var sPattern = /^[-+]?[0-9]+(\.[0-9]+)?$/;
        return (sPattern.test(sValue));
    };

    /*	Checks valid Numeric value*/
    this.checkFloat = function(elemInput, sLabel, isLastField, iControlType,isGlobalMsg, iErrorType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg)
    {

        //        var sPattern=/([^.\-0-9])/g;
//        var sPattern = /^[-+]?[0-9]+(\.[0-9]+)?$/;
        return this.setValidationStatus(me.isValidFloat(elemInput.value), elemInput, sLabel, isLastField,isGlobalMsg, (iErrorType||this.ERROR_INVALID),iControlType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
    };

    this.isValidDate = function(sValue,iDateFormat)
    {
        if(clAppBuffer.getFarsiCalendar()=="true")
            return true;
        var sPattern=this.getDatePattern(iDateFormat);
        return (sPattern.test(sValue.toLowerCase()));
    };
    /*	Validates date
     sDateFormat - Date format. Default: 'dd/mm/yyyy'
     sSeparator	- Date separator. Default: '/'
     */
    this.checkDate = function(elemDate, sLabel, iDateFormat, sSeparator, isLastField, iControlType,isGlobalMsg, iErrorType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg)
    {
//        var sPattern = /^(((0?[1-9]|[12]\d|3[01])\/(0?[13578]|1[02])\/((19|[2-9]\d)\d{2}))|((0?[1-9]|[12]\d|30)\/(0?[13456789]|1[012])\/((19|[2-9]\d)\d{2}))|((0?[1-9]|1\d|2[0-8])\/02\/((19|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/;
        // mm/dd/yyyy hh:MM:ss  11/24/0004 11:59 PM
        //   var sRegExpDatePat=/^(?=\d)^(?:(?!(?:10\D(?:0?[5-9]|1[0-4])\D(?:1582))|(?:0?9\D(?:0?[3-9]|1[0-3])\D(?:1752)))((?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)(?!-31)(?!\.31)|(?:0?2(?=.?(?:(?:29.(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|(?:0?2(?=.(?:(?:\d\D)|(?:[01]\d)|(?:2[0-8])))))([-.\/])(0?[1-9]|[12]\d|3[01])\2(?!0000)((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?!\x20BC)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$$/;
//        var sPattern=this.getDatePattern(iDateFormat);
        var sDate = elemDate.value;
        if(clAppBuffer.getFarsiCalendar()=="true")
            sDate = util.toEnglishNumber(sDate);
        return this.setValidationStatus(me.isValidDate(sDate,iDateFormat), elemDate, sLabel, isLastField,isGlobalMsg,(iErrorType||this.ERROR_INVALID),iControlType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
    };

    this.getDatePattern=function(iDateFormat)
    {
        var DMY=0,MDY=1,YMD=2;
        var iFormateType=0;
        var sPattern='^(',sSeparator='/';
        var arrDate=new Array(),arrMonth=new Array(),arrYear=new Array(),arrNamedMonth;

        if(!iDateFormat)
            iDateFormat=Constants.DDMMYYYY;

        ////////////// Separator //////////////////////////////////////

        /*if(iDateFormat==Constants.DDMMYYYY||iDateFormat==Constants.MMDDYYYY||iDateFormat==Constants.YYYYMMDD
            ||iDateFormat==Constants.DDMMYY||iDateFormat==Constants.MMDDYY)
            sSeparator='/';*/

        if(iDateFormat==Constants.DD_MM_YYYY||iDateFormat==Constants.MM_DD_YYYY||iDateFormat==Constants.YYYY_MM_DD
                ||iDateFormat==Constants.DD_MON_YY||iDateFormat==Constants.DD_MM_YY||iDateFormat==Constants.MM_DD_YY||iDateFormat==Constants.YY_MM_DD
                ||iDateFormat==Constants.DD_MON_YYYY)
            sSeparator='-';

        else if(iDateFormat==Constants.DD___MM___YYYY||iDateFormat==Constants.MM___DD___YYYY||iDateFormat==Constants.YYYY___MM___DD
                ||iDateFormat==Constants.DD___MM___YY||iDateFormat==Constants.MM___DD___YY||iDateFormat==Constants.YY___MM___DD
                ||iDateFormat==Constants.DD___MON___YYYY||iDateFormat==Constants.DD___MON___YY)
            sSeparator='';

        else if(iDateFormat==Constants.DD____MM____YYYY||iDateFormat==Constants.MM____DD____YYYY ||iDateFormat==Constants.YYYY____MM____DD
                ||iDateFormat==Constants.DD____MM____YY||iDateFormat==Constants.MM____DD____YY||iDateFormat==Constants.YY____MM____DD)
            sSeparator='\\\\';

        else if(iDateFormat==Constants.DD__MON__YYYY||iDateFormat==Constants.DD__MON__YY)
            sSeparator=' ';
         ////////////// Separator //////////////////////////////////////

        ////////////// FormateType //////////////////////////////////////

        /*if(iDateFormat==Constants.DDMMYYYY ||iDateFormat==Constants.DDMMYY || iDateFormat==Constants.DD_MM_YYYY || iDateFormat==Constants.DD___MM___YYYY
           || iDateFormat==Constants.DD____MM____YYYY || iDateFormat==Constants.DD____MM____YY || iDateFormat==Constants.DD_MON_YY
           ||iDateFormat==Constants.DD_MM_YY)
            iFormateType= DMY;*/

        if(iDateFormat==Constants.MMDDYYYY || iDateFormat==Constants.MM_DD_YYYY || iDateFormat==Constants.MM____DD____YYYY || iDateFormat==Constants.MMDDYY
                || iDateFormat==Constants.MM___DD___YYYY|| iDateFormat==Constants.MM_DD_YY|| iDateFormat==Constants.MM___DD___YY
                || iDateFormat==Constants.MM____DD____YY)
            iFormateType= MDY;

        else if(iDateFormat==Constants.YYYYMMDD || iDateFormat==Constants.YYYY_MM_DD ||iDateFormat==Constants.YYYY___MM___DD
                || iDateFormat==Constants.YYMMDD|| iDateFormat==Constants.YY_MM_DD|| iDateFormat==Constants.YY___MM___DD
                || iDateFormat==Constants.YYYY____MM____DD|| iDateFormat==Constants.YY____MM____DD)
                iFormateType= YMD;
        ////////////// FormateType //////////////////////////////////////

         if(iDateFormat==Constants.DDMONYYYY ||iDateFormat==Constants.DDMONYY || iDateFormat==Constants.DD__MON__YYYY || iDateFormat==Constants.DD_MON_YYYY
                 || iDateFormat==Constants.DD_MON_YY|| iDateFormat==Constants.DD___MON___YYYY|| iDateFormat==Constants.DD___MON___YY||iDateFormat==Constants.DD__MON__YY)
           arrNamedMonth = new Array();

        arrDate[0]='(0?[1-9]|[12]\\d|3[01])';
        arrDate[1]='(0?[1-9]|[12]\\d|30)';
        arrDate[2]='(0?[1-9]|1\\d|2[0-8])';
        arrDate[3]='29';

        arrMonth[0]='(0?[13578]|1[02])';
        arrMonth[1]='(0?[13456789]|1[012])';
        arrMonth[2]='0?[2]';
        arrMonth[3]='0?[2]';

        if(arrNamedMonth)
        {
            arrNamedMonth[0] ='((jan|mar|may|jul|aug)|(oct|dec))';
            arrNamedMonth[1] ='((jan|mar|apr|may|jun|jul|aug|sep)|(oct|nov|dec))';
            arrNamedMonth[2] ='feb';
            arrNamedMonth[3] ='feb';
        }

        arrYear[0]='((19|[2-9]\\d)\\d{2})';
        arrYear[1]='((19|[2-9]\\d)\\d{2})';
        arrYear[2]='((19|[2-9]\\d)\\d{2})';
        arrYear[3]='((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))';

        for(var i=0; i<4; i++)
        {
            sPattern+="(";
            if(iFormateType == DMY)
            {
                sPattern+=arrDate[i]+sSeparator;
                if(!arrNamedMonth)
                    sPattern+=arrMonth[i]+sSeparator;
                else
                    sPattern+=arrNamedMonth[i]+sSeparator;
                sPattern+=arrYear[i];
            }
            else if(iFormateType == MDY)
            {
                if(!arrNamedMonth)
                    sPattern+=arrMonth[i]+sSeparator;
                else
                    sPattern+=arrNamedMonth[i]+sSeparator;
                sPattern+=arrDate[i]+sSeparator;
                sPattern+=arrYear[i];
            }
            else if(iFormateType == YMD)
                {
                    sPattern+=arrYear[i]+sSeparator;
                    if(!arrNamedMonth)
                        sPattern+=arrMonth[i]+sSeparator;
                    else
                        sPattern+=arrNamedMonth[i]+sSeparator;
                    sPattern+=arrDate[i];
                }
            sPattern+=")";
            if(i<3)
                sPattern+="|";
        }
        sPattern+=")$";
        return new RegExp(sPattern);

        //(01|1|30)                    /(03|10)                /(19|23)                   | (02|1|30)                /(01|10)                       /(19|23)                   |(01|1)
            // return /^(((0?[1-9]|[12]\d|3[01])\/(0?[13578]|1[02])\/((19|[2-9]\d)\d{2}))|((0?[1-9]|[12]\d|30)\/(0?[13456789]|1[012])\/((19|[2-9]\d)\d{2}))|((0?[1-9]|1\d|2[0-8])\/02\/((19|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/;
    };

    /*	Validates if the 1st date <= 2nd date */
    this.checkDateRange = function(elemDate1, elemDate2, sLabel1, sLabel2, iDateFormat, isLastField, iControlType,isGlobalMsg,isDateTime,isAllowEqualDates,isAllowEqualTimes,
                                                            sErrorMsg,isTabpaneView,sMsgboxId)
    {
        var sStartDate = elemDate1.value;
        var sEndDate = elemDate2.value;
        if(clAppBuffer.getFarsiCalendar()=="true"){
            sStartDate = util.toEnglishNumber(sStartDate);
            sEndDate = util.toEnglishNumber(sEndDate);
        }

        if (!iDateFormat)
            iDateFormat = clAppBuffer.getDateFormat();//Constants.DDMMYYYY;
        var sSeparator = util.getDateSeparator(iDateFormat);

       /* if(clAppBuffer.getFarsiCalendar()=="true")
            return true;*/

        var isValidInput = true;
        var iErrorType = 0;
        if (!sStartDate || sStartDate.indexOf(sSeparator) == -1 || sStartDate.indexOf(sSeparator) == sStartDate.lastIndexOf(sSeparator))
        {
            if (!sStartDate)
                iErrorType = this.ERROR_MANDATORY;
            else
                iErrorType = this.ERROR_INVALID;
            isValidInput = false;
        }

        if (iErrorType > 0)
            this.setValidationStatus(false, elemDate1, sLabel1, isLastField,isGlobalMsg, iErrorType,iControlType,isTabpaneView,sMsgboxId);


        iErrorType = 0;
        if (!sEndDate || sEndDate.indexOf(sSeparator) == -1 || sEndDate.indexOf(sSeparator) == sEndDate.lastIndexOf(sSeparator))
        {
            if (!sEndDate)
                iErrorType = this.ERROR_MANDATORY;
            else
                iErrorType = this.ERROR_INVALID;
            isValidInput = false;
        }

        if (iErrorType > 0)
            this.setValidationStatus(false, elemDate2, sLabel2, isLastField,isGlobalMsg, iErrorType,iControlType,isTabpaneView,sMsgboxId);

        if (isValidInput)
        {
            if(isDateTime)
            {
                sStartDate=sStartDate.substring(0,sStartDate.indexOf(" "));
                sEndDate=sEndDate.substring(0,sEndDate.indexOf(" "));
            }

            isValidInput=false;
            var dStartDate=util.getDateObject(sStartDate);
            var dEndDate=util.getDateObject(sEndDate);
            var iNoOfDays = parseInt(util.getDateDiff(dStartDate, dEndDate));

            if(isAllowEqualDates)
                iNoOfDays++;

            //alert(sStartDate+","+sEndDate+","+iNoOfDays)

            if(!sErrorMsg)
            {
                if(isAllowEqualDates)
                    sErrorMsg=MsgHandler.getMsg(MsgConstants.GREATER_THAN_EQUAL_TO,0,0,sLabel2,sLabel1);
                    //sErrorMsg=sLabel2 + " must be greater than or equal to " + sLabel1;
                else
                    sErrorMsg=MsgHandler.getMsg(MsgConstants.GREATER_THAN,0,0,sLabel2,sLabel1);
                    //sErrorMsg=sLabel2 + " must be greater than " + sLabel1;
            }

            if (iNoOfDays >= 1)  //to overcome fraction values(eg: 0.00343), checking with value '1'
                isValidInput = true;

            if(isValidInput && iNoOfDays == 1 && isDateTime)// && isDateTime)
            {
                return  this.checkTimeRange(elemDate1, elemDate2, sLabel1, sLabel2, null,isLastField, iControlType,isGlobalMsg,true,isAllowEqualTimes,sErrorMsg,isTabpaneView,sMsgboxId);
            }
            else
                return this.setValidationStatus(isValidInput, elemDate2, sErrorMsg, isLastField,isGlobalMsg, this.ERROR_CUSTOM,iControlType,isTabpaneView,sMsgboxId);
        }
    };

    this.isValidTime = function(sValue,isIncSeconds,iTimeFormat, isAllowZero)
    {
        if (!iTimeFormat)
                iTimeFormat = clAppBuffer.getTimeFormat();

            var sPattern;
            var isValid=false;
            if (isIncSeconds || (iTimeFormat==Constants.TIME_HHMMSSAMPM||iTimeFormat==Constants.TIME_HHMMSS))
            {
                if(iTimeFormat==Constants.TIME_HHMMSSAMPM)
                    sPattern = /(^(0?[0-9]|1[0-2]):[0-5][0-9]:[0-5][0-9]\s?([ap]m|[AP]M)$)/;
                  else // if(iTimeFormat==Constants.TIME_HHMMSS)
                    sPattern =/(^(0?\d|1\d|2[0-3])(:[0-5]\d){0,2}:[0-5][0-9]$)/;

                isValid=sPattern.test(sValue);
            }
            else
            {
                if(iTimeFormat==Constants.TIME_HHMMAMPM)
                    sPattern = /(^(0?[0-9]|1[0-2]):[0-5][0-9]\s?([ap]m|[AP]M)$)/;
                else // if(iTimeFormat==Constants.TIME_HHMM)
                   sPattern = /(^(0?\d|1\d|2[0-3])(:[0-5]\d){0,2}$)/;

                isValid=sPattern.test(sValue);

                if(isValid)
                {
                    if(!isAllowZero)
                        isValid=dateUtils.getTimeInMins(sValue)>0;
                }

            }
            return isValid;

    };
    /*	Validates time
     isIncSeconds - Include seconds in time validation */
    this.checkTime = function(elemTime, sLabel, isIncSeconds, isLastField, iControlType,isGlobalMsg, iErrorType,iTimeFormat, isAllowZero,isTabpaneView,sMsgboxId,isDoNotDisplayMsg)
    {

    /*    if (!iTimeFormat)
            iTimeFormat = clAppBuffer.getTimeFormat();

        var sPattern;
        var isValid=false;
        if (isIncSeconds || (iTimeFormat==Constants.TIME_HHMMSSAMPM||iTimeFormat==Constants.TIME_HHMMSS))
        {
            //sPattern = /(^(0?[1-9]|1[0-2]):[0-5][0-9]:[0-5][0-9]\s?([ap]m|[AP]M)$)|(^([01]\d|2[0-3])(:[0-5]\d){0,2}$)/;
            if(iTimeFormat==Constants.TIME_HHMMSSAMPM)
                sPattern = /(^(0?[0-9]|1[0-2]):[0-5][0-9]:[0-5][0-9]\s?([ap]m|[AP]M)$)/;
              else// if(iTimeFormat==Constants.TIME_HHMMSS)
                sPattern =/(^(0?\d|1\d|2[0-3])(:[0-5]\d){0,2}:[0-5][0-9]$)/;

            isValid=sPattern.test(elemTime.value);
        }
        //            sRegExpTimePat=/^((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})$/;
        //        ^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$
        else

        {
            //sPattern = /(^(0?[1-9]|1[0-2]):[0-5][0-9]\s?([ap]m|[AP]M)$)|(^([01]\d|2[0-3])(:[0-5]\d){0,2}$)/;
            if(iTimeFormat==Constants.TIME_HHMMAMPM)
                sPattern = /(^(0?[0-9]|1[0-2]):[0-5][0-9]\s?([ap]m|[AP]M)$)/;
            else// if(iTimeFormat==Constants.TIME_HHMM)
               sPattern = /(^(0?\d|1\d|2[0-3])(:[0-5]\d){0,2}$)/;

            isValid=sPattern.test(elemTime.value);

            if(isValid)
            {
                if(!isAllowZero)
                    isValid=dateUtils.getTimeInMins(elemTime.value)>0;
            }

        }*/
        var sTime=elemTime.value;
        if(clAppBuffer.getFarsiCalendar()=="true")
            sTime = util.toEnglishNumber(sTime);
        return this.setValidationStatus(me.isValidTime(sTime,isIncSeconds,iTimeFormat, isAllowZero), elemTime, sLabel, isLastField,isGlobalMsg,(iErrorType||this.ERROR_INVALID),iControlType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
    };


    /*	Validates if the 1st time is less than 2nd time
     iDateFormat	- Date format. Default: 'dd/mm/yyyy'
     sSeparator	- Date separator. Default: '/'
     is24HrFormat - true if the time is in 24 hour format.
     isIncSeconds - Include seconds in time validation
     */
    this.checkTimeRange = function(elemTime1, elemTime2,sLabel1, sLabel2, iTimeFormat, isLastField, iControlType,isGlobalMsg,isDateTimeField,isAllowEqualTimes,sErrorMsg,isTabpaneView,sMsgboxId)
    {
        if (!iTimeFormat)
            iTimeFormat = clAppBuffer.getTimeFormat();

        var sTime=elemTime1.value;
        if(clAppBuffer.getFarsiCalendar()=="true")
            sTime = util.toEnglishNumber(sTime);
        if(isDateTimeField)
            sTime=sTime.substring(sTime.indexOf(" ")+1);

        var arrTime = util.parseTime(sTime);
        var dStartDate = new Date();
        dStartDate.setHours(arrTime[0],arrTime[1]);

        sTime=elemTime2.value;
        if(clAppBuffer.getFarsiCalendar()=="true")
            sTime = util.toEnglishNumber(sTime);
        if(isDateTimeField)
            sTime=sTime.substring(sTime.indexOf(" ")+1);

        arrTime = util.parseTime(sTime);
        var dEndDate = new Date();
        dEndDate.setHours(arrTime[0],arrTime[1]);


        var isValidInput = false;
        var iTimeDiff = util.getTimeDiff(dStartDate,dEndDate);
        //alert("iTimeDiff  "+iTimeDiff);

        if(isAllowEqualTimes)
            iTimeDiff++;

        if(!sErrorMsg)
        {
            sErrorMsg=this.getComparisonMsg(sLabel1,sLabel2,isAllowEqualTimes);
            /*if(isAllowEqualTimes)
                sErrorMsg=sLabel2 + " must be greater than or equal to " + sLabel1;
            else
                sErrorMsg=sLabel2 + " must be greater than " + sLabel1;*/
        }

        if (iTimeDiff >= 1)
            isValidInput = true;

        return this.setValidationStatus(isValidInput, elemTime2, sErrorMsg, isLastField,isGlobalMsg, this.ERROR_CUSTOM,iControlType,isTabpaneView,sMsgboxId);
    };

    this.getComparisonMsg=function(sLabel1,sLabel2,isEqualValuesAllowed)
    {
        if(isEqualValuesAllowed)
            return MsgHandler.getMsg(MsgConstants.GREATER_THAN_EQUAL_TO,0,0,sLabel2,sLabel1);
        else
            return MsgHandler.getMsg(MsgConstants.GREATER_THAN,0,0,sLabel2,sLabel1); 

        /*if(isEqualValuesAllowed)
            return sLabel2 + " must be greater than or equal to " + sLabel1;
        else
            return sLabel2 + " must be greater than " + sLabel1;*/
    };

    this.isValidEMail = function(sValue)
    {
        var sPattern,sResult,arrVals;
        sPattern = /^[^.@][A-z0-9_-]{0,}([.][A-z0-9_-]+)*[@][A-z0-9_-]+([.][A-z0-9-]+)*[.][A-z]{2,}$/;
        arrVals = sValue;
        arrVals =  arrVals.split(",");//checking multiple coma(,) seperated emailId's..
        for(var i=0,iLen=arrVals.length;i<iLen;i++)
        {
            sResult = sPattern.test(arrVals[i]);
            if(!sResult)break;
        }
        return sResult;
    }

    /*	Validates E-Mail. E-Mail Format: xxx@yahoo.com or xxx@yahoo.co.in*/
    this.checkEMail = function(elemInput, sLabel, isLastField, iControlType,isGlobalMsg, iErrorType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg)
    {
        return this.setValidationStatus(me.isValidEMail(elemInput.value), elemInput, sLabel, isLastField,isGlobalMsg, (iErrorType||this.ERROR_INVALID),Constants.CONTROLTYPE_TXTBOX,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);
    };

    this.isValidPhoneNo = function(sValue)
    {
        return (sValue!="");
    }

    /*	Validates PhoneNo. */
    this.checkPhoneNo = function(elemInput, sLabel, isLastField, isGlobalMsg, iErrorType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg)
    {
        //alert("checkPhoneNo")
        // if (isLastField)
        //    return this.getValidationStatus(false,isTabpaneView);

        return this.setValidationStatus(me.isValidPhoneNo(elemInput.value), elemInput, sLabel, isLastField,false, (this.ERROR_MANDATORY),Constants.CONTROLTYPE_TXTBOX,isTabpaneView,sMsgboxId,isDoNotDisplayMsg);

        //TODO:
        //Evaluating regular expression
        //^0[234679]{1}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$
        /*var sPattern = /^[0-9]{0,3}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{7}$/;
        return this.setValidationStatus(sPattern.test(elemInput.value), elemInput, sLabel, isLastField,isGlobalMsg, (iErrorType||this.ERROR_INVALID));*/
    };

    /*	Validates mobileno. Format: 9836193498,+919836193498     */
    this.checkMobileNo = function(elemInput, sLabel, isLastField, iControlType,isGlobalMsg, iErrorType,isTabpaneView,sMsgboxId)
    {
        //Evaluating regular expression
        var sPattern = /^((\+)91(\s)?(\-)?(\s)?)?[0-9]{1}[0-9]{9}$/;
        return this.setValidationStatus(sPattern.test(elemInput.value), elemInput, sLabel, isLastField,isGlobalMsg, (iErrorType||this.ERROR_INVALID),iControlType,isTabpaneView,sMsgboxId);
    };

    this.checkWebsite = function(elemInput, sLabel, isLastField, isGlobalMsg, iErrorType,isTabpaneView,sMsgboxId)
    {
        //Evaluating regular expression
        // /^(((ht|f){1}(tp:[/][/]){1})|((www.){1}))[-a-zA-Z0-9@:%_\+.~#?&//=]+$/;
        var sPattern = /^(((ht|f){1}(tp[s]{0,1}:[/][/]){1}){0,1}((www.){1}))[-a-zA-Z0-9@:%_\+~#?&//=]+([.]{1}[a-zA-Z]+)$/;
        return this.setValidationStatus(sPattern.test(elemInput.value), elemInput, sLabel, isLastField,isGlobalMsg, (iErrorType||this.ERROR_INVALID),Constants.CONTROLTYPE_TXTBOX,isTabpaneView,sMsgboxId);
    };
    this.isAlphaNumeric =function(elemInput, sLabel, isLastField, isGlobalMsg, iErrorType,isTabpaneView,sMsgboxId)
    {
        var sPattern =/^[A-Za-z][A-Za-z0-9_]*$/;
        return this.setValidationStatus(sPattern.test(elemInput.value), elemInput, sLabel, isLastField,isGlobalMsg, (iErrorType||this.ERROR_INVALID),Constants.CONTROLTYPE_TXTBOX,isTabpaneView,sMsgboxId);
    };


    //sets validation status
    this.setValidationStatus = function(isValidInput, elemInput, sLabel, isLastField,isGlobalMsg,iErrorType,iControlType,isTabpaneView,sMsgboxId,isDoNotDisplayMsg,iMessageType)
    {
//        alert("setValidationStatus=="+elemInput.id+","+isValidInput);

        if(!iMessageType)
            iMessageType = this.ERROR_MSG;

        if (!isValidInput)
        {
            if (this.firstInvalidFld == null)
                this.firstInvalidFld = elemInput;

            if (!sLabel)
                sLabel = this.getFieldLabel(elemInput,iControlType);
            //else
            //alert(elemInput.id+"sLabel "+sLabel)
            if(!isDoNotDisplayMsg)
                this.showMessage(sLabel, iMessageType, elemInput, iErrorType,isGlobalMsg,sMsgboxId);

            me.isValid = false;
        }
        else
        {
            if (this.firstInvalidFld == null)
                me.isValid = true;

            if(!isGlobalMsg)
                isGlobalMsg=false;

            this.clearMessage(elemInput,isGlobalMsg,sMsgboxId);
        }

        if (isLastField)
            return this.getValidationStatus(false,isTabpaneView);

        return true;
    };

    this.getCaptionField=function(elemInput,iCtrlType)
    {
        var objTd;
        //var iCtrlType=elemInput.getAttribute("ctrltype");
        //alert(elemInput.name+","+iCtrlType)

        var isSearchInParentNodes=false;
        if(elemInput.getAttribute("isDropdownExists")=="true") //
            isSearchInParentNodes=true;

        if(iCtrlType==Constants.CONTROLTYPE_DATEPICKER ||
           iCtrlType==Constants.CONTROLTYPE_TIMEPICKER ||
           iCtrlType==Constants.CONTROLTYPE_RADIOBUTTON ||
           iCtrlType==Constants.CONTROLTYPE_RADIO_WITH_IMAGE ||
           iCtrlType == Constants.CONTROLTYPE_MULTI_SELECT )
            isSearchInParentNodes=true;
        else if(iCtrlType==null && document.getElementById("uploadFileName_"+elemInput.id)!=null)//attachment field (Constants.CONTROLTYPE_DOCUMENTCTRL)
            isSearchInParentNodes=true;
        else if(iCtrlType==Constants.CONTROLTYPE_DOCUMENTCTRL && elemInput)//attachment field (Constants.CONTROLTYPE_DOCUMENTCTRL)
            isSearchInParentNodes=true;
        else if(iCtrlType==Constants.CONTROLTYPE_COMBOBOX)
        {
            /*if(elemInput.getAttribute("isDropdownExists")=="true")
                isSearchInParentNodes=true;*/
        }

        //if(iCtrlType==null || iCtrlType==Constants.CONTROLTYPE_DATEPICKER || iCtrlType==Constants.CONTROLTYPE_TIMEPICKER || iCtrlType==Constants.CONTROLTYPE_COMBOBOX)
        if(isSearchInParentNodes)
        {
            objTd=elemInput.parentNode.parentNode;
            //while(objTd.nodeName!="TD")
            while(!util.hasClass(objTd,"tdLayout"))
                objTd=objTd.parentNode;
            if(cross.getPrevSibiling(objTd)==null)
            {
                //alert(elemInput.parentNode.innerHTML)
                return null;
            }
            return cross.getPrevSibiling(objTd).getElementsByTagName("LABEL")[0];
        }
        /*else if(iCtrlType==null && document.getElementById("uploadFileName_"+elemInput.id)!=null)//attachment field (Constants.CONTROLTYPE_DOCUMENTCTRL)
        {
            objTd=elemInput.parentNode.parentNode;
            while(objTd.nodeName!="TD")
                objTd=objTd.parentNode;
            return cross.getPrevSibiling(objTd).getElementsByTagName("LABEL")[0];
        }*/
        else
        {
            /*var objTr=elemInput.parentNode.parentNode;
            return objTr.cells[0].getElementsByTagName("LABEL")[0];*/
            objTd=elemInput.parentNode;
            if(!objTd.previousSibling) //for checkbox group in contract
            {
                if(iCtrlType==Constants.CONTROLTYPE_CHECKBOX) //for module checkbox field, caption will be right side of checkbox
                {
                    if(objTd.nextSibling)
                        return objTd.nextSibling.getElementsByTagName("LABEL")[0];
                }

                return null;
            }
            else if(iCtrlType==Constants.CONTROLTYPE_CHECKBOX)
            {
                objTd = objTd.parentNode;
                if(objTd.nextSibling)
                    return objTd.nextSibling.getElementsByTagName("LABEL")[0];
            }

            if(objTd.previousSibling.nodeName!="TD")
                objTd=objTd.previousSibling;
            return objTd.previousSibling.getElementsByTagName("LABEL")[0];
        }

    };

    this.getFieldLabel=function(elemInput,iControlType)
    {
        var sLabel="";
        var objLabelTd=this.getCaptionField(elemInput,iControlType);

        if(objLabelTd)
        {
            if (document.body.textContent )
                sLabel = objLabelTd.textContent;
            else
                sLabel = objLabelTd.innerText;
        }
        return sLabel;
    };

    this.getFieldLabel_old=function(elemInput,iControlType)
    {
        var sLabel="";
        var objLabelTd=null;

        if(iControlType!=Constants.CONTROLTYPE_DATEPICKER && iControlType!=Constants.CONTROLTYPE_TIMEPICKER)
        {
            objLabelTd=elemInput.parentNode.previousSibling;
        }
        else
        {
            objLabelTd=elemInput.parentNode.parentNode;
            while(objLabelTd.nodeName!="TD")
                objLabelTd=objLabelTd.parentNode;
            objLabelTd=objLabelTd.previousSibling;
        }

        if(objLabelTd)
        {
            if (document.body.textContent )
                sLabel = objLabelTd.textContent;
            else
                sLabel = objLabelTd.innerText;
        }

        return sLabel;
    };

    this.getValidationStatus=function(isSkipReset,isTabpaneView)
    {
        var isValid = this.isValid;
        //this.isValid = true;
        if(!isSkipReset)
            me.reset(isTabpaneView);
        return isValid;
    };

    this.setInvalidField=function(elemInput)
    {
        me.firstInvalidFld=elemInput;
        me.isValid=false;
    }

    this.reset=function(isTabpaneView)
    {
        if (this.firstInvalidFld)
        {
            try
            {
                if(isTabpaneView)
                {
                    var elemParent=this.firstInvalidFld.parentNode;
                    while(elemParent && ( !elemParent.className || elemParent.className.indexOf("TabberTab")==-1))
                        elemParent=elemParent.parentNode;

                    if(elemParent)
                    {
                        var sTabpaneId=elemParent.id;//2305moduleRenderTab---2305moduleRenderTabcontent2
                        var iTabIndex=sTabpaneId.substring(sTabpaneId.indexOf("content")+7);
                        sTabpaneId=sTabpaneId.substring(0,sTabpaneId.indexOf("content"));
                        if(tabbedPane.getSelectedIndex(sTabpaneId)!=iTabIndex)
                            tabbedPane.selectTab(sTabpaneId,iTabIndex);
                    }
                }

                if(this.isFocusInvalidFld) //added this boolean for not focusing field since cursor not moving to other field in chrome(from module onblur invalid fld function)
                    this.firstInvalidFld.focus();
            }
            catch(e) {
            }
        }

        me.iMsgFlag++;
        this.firstInvalidFld = null;
        this.isFocusInvalidFld = true;
    };

    this.showMessage = function(sMessage, iMessageType, elemInput, iErrorType,isGlobalMsg,sMsgboxId)
    {
        //alert(iMessageType +" :: "+sMessage +" ::  "+iErrorType);
        var clMsgDiv;
        if (iMessageType == this.ERROR_MSG && (iErrorType == this.ERROR_MANDATORY || iErrorType == this.ERROR_INVALID))
            sMessage += this.getMessage(iErrorType);

        if (!isGlobalMsg && elemInput)
        {
            clMsgDiv = document.getElementById("msg" + elemInput.id);
            /*if (iMessageType == this.ERROR_MSG && iErrorType == this.ERROR_MANDATORY || iErrorType == this.ERROR_INVALID)
                sMessage += this.getMessage(iErrorType);*/
        }
        else if(sMsgboxId)
            clMsgDiv = document.getElementById(sMsgboxId);

        if(!clMsgDiv)
            clMsgDiv = document.getElementById("msgbox");

        if (isGlobalMsg)
            clMsgDiv.className="msgBox";
        else
            clMsgDiv.style.backgroundColor="#FFF";
        
        if (clMsgDiv)
        {
            this.setMsgFlag(elemInput,isGlobalMsg,sMsgboxId,true);

            /*if(iMessageType==this.INFO_MSG)
             {
             clMsgDiv.className="infoMsg";
             clMsgDiv.innerHTML="<img src='"+getImagePath(true)+"error.gif' > &nbsp;"+sMessage;
             }
             else */
            if (iMessageType == this.ERROR_MSG)
            {
                //clMsgDiv.className = "errorMsg";
                if (isGlobalMsg)
                    util.addClass(clMsgDiv,"errorMsg");
                else
                    util.addClass(clMsgDiv,"errorMsg1");

                //                clMsgDiv.innerHTML="<img src='"+getImagePath(true)+"error.gif' height='17px' width='20px'> &nbsp;"+sMessage;

            }
            else if (iMessageType == this.SUCCESS_MSG)
            {
                util.addClass(clMsgDiv,"successMsg");
            }
            else if (iMessageType == this.WARNING_MSG)
            {
                if(util.hasClass(clMsgDiv,"errorMsg1"))
                    util.removeClass(clMsgDiv,"errorMsg1");

                util.addClass(clMsgDiv,"warningMsg");
            }
            else
            {
                util.addClass(clMsgDiv,"infoMsg");
                //clMsgDiv.className = "infoMsg";
                //                clMsgDiv.innerHTML="<img src='"+getImagePath(true)+"suspend.png' height='17px' width='20px'> &nbsp;"+sMessage;
            }
            clMsgDiv.innerHTML = sMessage;
            clMsgDiv.style.display = "block";
        }
        else
            alert(sMessage);

    };

    this.setMsgFlag=function(elemInput,isGlobalMsg,sMsgboxId,isFromShowMsg)
    {
        var clMsgDiv=getMessageDiv(elemInput,isGlobalMsg,sMsgboxId,true);

        if(isFromShowMsg)
        {
            clMsgDiv.setAttribute("msgSet",me.iMsgFlag);
        }
        else //if(me.isValid==true)
        {
            //alert(elemInput.id+"====setMsgFlag======"+isFromShowMsg+",attr="+clMsgDiv.getAttribute("msgSet")+",iMsgFlag="+me.iMsgFlag);
            if(clMsgDiv !=null && clMsgDiv.getAttribute("msgSet")!=null && me.iMsgFlag!=clMsgDiv.getAttribute("msgSet"))
                clMsgDiv.removeAttribute("msgSet");
        }

    };

    this.clearMessage = function(elemInput,isGlobalMsg,sMsgboxId)
    {
        if(isGlobalMsg!=false)
            isGlobalMsg=true;

        this.clearMessage2(elemInput,isGlobalMsg,sMsgboxId);
    };

    this.clearMessage2 = function(elemInput,isGlobalMsg,sMsgboxId)
    {
        var clMsgDiv=getMessageDiv(elemInput,isGlobalMsg,sMsgboxId,false);
        if(clMsgDiv!=null) //not clearing prev. global error msg (error msg by rule is getting cleared on field validation (FSNPL opp) )
        {
            this.setMsgFlag(elemInput, isGlobalMsg, sMsgboxId, false);

            //alert(elemInput.id+"---------"+clMsgDiv.getAttribute("msgSet"))
            if (clMsgDiv.getAttribute("msgSet") == null) //expecting attribute be set on error msg field when user specific message is displayed
            {
                clMsgDiv.style.display = "none";
            }
        }
    };

    function getMessageDiv(elemInput,isGlobalMsg,sMsgboxId,isGetDefaultMsgBox)
    {
        var clMsgDiv=null;
        if (!isGlobalMsg && elemInput)
        {
            clMsgDiv = document.getElementById("msg" + elemInput.id);
        }
        else if(sMsgboxId)
            clMsgDiv = document.getElementById(sMsgboxId);

        if(!clMsgDiv && (isGlobalMsg || isGetDefaultMsgBox))
            clMsgDiv = document.getElementById("msgbox");

        return clMsgDiv;
    }

    this.getMessage = function(iErrorType)
    {
        if(iErrorType==this.ERROR_MANDATORY)
            return MsgHandler.getMsg(MsgConstants.REQUIRED);
        else if(iErrorType==this.ERROR_INVALID)
            return MsgHandler.getMsg(MsgConstants.INVALID);
        //return arrMessages[sKey];
    };
    

    this.getNoOfDays = function(sStartDate, sEndDate, sSeparator)
    {
        var sDateArray;
        if (sStartDate)
        {
            sDateArray = sStartDate.split(sSeparator);
            var dStartDate = new Date();
            //dStartDate.setDate(1);
            dStartDate.setFullYear(sDateArray[2]);
            dStartDate.setMonth(parseInt(sDateArray[1],10) - 1);
            dStartDate.setDate(sDateArray[0]);

            if (sEndDate)
            {
                sDateArray = sEndDate.split(sSeparator);
                var dEndDate = new Date();
                //dEndDate.setDate(1);
                dEndDate.setFullYear(sDateArray[2]);
                dEndDate.setMonth(parseInt(sDateArray[1],10) - 1);
                dEndDate.setDate(sDateArray[0]);
                dEndDate.setDate(dEndDate.getDate() + 1);
                return (dEndDate - dStartDate) / 86400000;
            }
        }
        return 0;
    };

};


/*
 * Copyright 2009 Matthew Eernisse (mde@fleegix.org)
 * and Open Source Applications Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 if (typeof fleegix == 'undefined') { var fleegix = {}; }
 if (typeof fleegix.date == 'undefined') { fleegix.date = {}; }

 */

var dateUtils =new function()
{

    this.getCurrentDateTimeToInt=function(isExlcudeTime,bIsEndDate,iDateAdd,bIgnoreSecs)
       {
           //var dDate=new Date();
           var dDate=util.getDateObject(),iMonth=0;
           if(iDateAdd>0) {
               //dDate.setDate(dDate.getDate() + iDateAdd);
               dateUtils.add(dDate,dateUtils.dateParts.DAY,iDateAdd);
           }
           iMonth = dDate.getMonth()+1;
           if(clAppBuffer.getFarsiCalendar()=="true")
               iMonth = dDate.getMonth();
           if(isExlcudeTime && !bIsEndDate)
              return this.getIntDateTime(dDate.getDate(), iMonth, dDate.getFullYear(), 0, 0,0);
           else if(!isExlcudeTime && !bIsEndDate)
               return this.getIntDateTime(dDate.getDate(), iMonth, dDate.getFullYear(), dDate.getHours(), dDate.getMinutes(),bIgnoreSecs?0: dDate.getSeconds());
           else
               return this.getIntDateTime(dDate.getDate(), iMonth, dDate.getFullYear(), 23, 59, 59);
       };

       this.getCurrentDateToInt=function(iDateAdd)
       {
           var dDate=util.getCurrentDate();
           if(iDateAdd!=0) {
               //dDate.setDate(dDate.getDate() + iDateAdd);
               dDate=dateUtils.add(dDate,dateUtils.dateParts.DAY,iDateAdd);
           }

           return this.getIntDate(dDate.getDate(), dDate.getMonth()+1, dDate.getFullYear());
       };

        this.convertTimeToInt=function (sTime, byTimeFormat)
        {
            var iTime = 0;
            if (sTime != null && util.trim(sTime).length > 0)
            {
                if (sTime.indexOf(':') > 0)
                {
                    if(clAppBuffer.getFarsiCalendar()=="true")
                        sTime = util.toEnglishNumber(sTime);
                    var sArrTimeDets = sTime.split(" ");
                    var iArrTimes=null;
                    if(!byTimeFormat) byTimeFormat=clAppBuffer.getTimeFormat();
                    if(byTimeFormat==Constants.TIME_HHMMAMPM)
                        iArrTimes=this.getTimeComponents(sArrTimeDets[0], (sArrTimeDets.length>1?sArrTimeDets[1]:null) );
                    else
                        iArrTimes=this.getTimeComponents(sTime,null);

                    iTime = (iArrTimes[0] * (0x10000)) | (iArrTimes[1] * (0x100)) | iArrTimes[2];

                    if(clAppBuffer.getFarsiCalendar()=="true")
                        sTime = util.toPersianNumber(sTime);
                }
            }
            return iTime;
        };

       this.getCurrentDateAsString=function(iFormat)
       {
           var iCurrentDate=dateUtils.getCurrentDateToInt(0);
           return dateUtils.convertIntToDate(iCurrentDate,iFormat);
           
           /*var iYear=dateUtils.getYearFromInt(iCurrentDate);
           var iMonth=dateUtils.getMonthFromInt(iCurrentDate);
           var iDay=dateUtils.getDayFromInt(iCurrentDate);

           if(!iFormat)
                iFormat=clAppBuffer.getDateFormat();
           return dateUtils.getDateByFormat(iFormat,iDay,iMonth,iYear);*/
       };

       this.convertIntToDate=function(iDate,iFormat)
       {
           if(iDate>0)
           {
               var iYear = dateUtils.getYearFromInt(iDate);
               var iMonth = dateUtils.getMonthFromInt(iDate);
               var iDay = dateUtils.getDayFromInt(iDate);

               if (!iFormat)
                   iFormat = clAppBuffer.getDateFormat();
               return dateUtils.getDateByFormat(iFormat, iDay, iMonth, iYear);
           }
           else
            return "";
       };

        this.convertLongToDateTime=function(lDateTime,iFormat,isUTCDate)
        {
            var dDate = util.getDateObject();//new Date();
            if(clAppBuffer.getFarsiCalendar()=="true" && lDateTime<2147483647)
            {
                return dateUtils.convertIntToDate(lDateTime)+" "+dateUtils.getTimeStringFromDateObject(dDate,clAppBuffer.getTimeFormat())
            }
            dDate.setTime(lDateTime);
            if(isUTCDate)
                dDate.setTime( dDate.getTime() + dDate.getTimezoneOffset()*60*1000);


            return dateUtils.getDateString(dDate, iFormat, true);
        };

       this.getDateObjectFromIntTime=function(iTime)
       {
           var iHours=dateUtils.getHoursFromInt(iTime);
           var iMinutes=dateUtils.getMinutesFromInt(iTime);

           var clDate = new Date();
           clDate.setHours(iHours);
           clDate.setMinutes(iMinutes);
           return clDate;
       };


        //This function is used in DATE Formulas (DATE_UTILS.AddDays)
       this.AddDays=function(sDate,iNoOfDays)
       {
           //alert(sDate+","+iNoOfDays)

           if(!isNaN(sDate))
              sDate= (sDate & 0xff) +"/"+ ((sDate & 0xff00) / 256)+"/"+((sDate & 0xfff0000) / 0x10000);//assumed as dd/mm/yy

           //alert("addDays  "+sDate);

           var dDate=util.getDateObject(sDate);
           if(iNoOfDays>0)
               dDate.setDate(dDate.getDate()+iNoOfDays);
           //alert(this.getIntDate(dDate.getDate(), dDate.getMonth()+1, dDate.getFullYear()));
           
           return this.getIntDate(dDate.getDate(), dDate.getMonth()+1, dDate.getFullYear());
       };

       this.addToDate=function(sDate,iYears,iMonths,iDays,iHours,iMins,isDateTime)
       {
           var dDate=util.getDateObject(sDate,isDateTime,true);
           var iNoOfDays=0;

           if(iDays!=0)
            iNoOfDays+=iDays;

           if(iMonths!=0)
            iNoOfDays+=iMonths*30;

           if(iYears!=0)
            iNoOfDays+=iYears*365;

           if(iNoOfDays!=0)
           {
               dateUtils.add(dDate,2,iNoOfDays);
               //dateUtils.add(dDate,dateUtils.dateParts.DAY,iNoOfDays)
               //dDate.setDate(dDate.getDate() + iNoOfDays);
           }

           if(iHours!=0)
            dDate.setHours(dDate.getHours()+iHours);

           if(iMins!=0)
            dDate.setMinutes(dDate.getMinutes()+iMins);

           //alert(this.getIntDate(dDate.getDate(), dDate.getMonth()+1, dDate.getFullYear()));

           return dateUtils.getDateString(dDate,clAppBuffer.getDateFormat(),isDateTime);
       };

        this.getDateString=function(dDate,iFormat,isDateTime)
        {
            var sDateString=null;
            var iSeparator=util.getDateSeparator();
            var bFarsiCalendar = clAppBuffer.getFarsiCalendar()=="true",iMonth=0;
            iMonth = dDate.getMonth()+1;
            //if(bFarsiCalendar)
            //    iMonth = dDate.getMonth();
            switch(iFormat)
            {
                case Constants.DDMMYYYY:
                case Constants.DD_MM_YYYY:
                {

                    sDateString=dDate.getDate()+iSeparator+(iMonth)+iSeparator+dDate.getFullYear();
                    break;
                }
                case Constants.MMDDYYYY:
                case Constants.MM_DD_YYYY:
                {
                    sDateString=(iMonth)+iSeparator+dDate.getDate()+iSeparator+dDate.getFullYear();
                    break;
                }
                case Constants.YYYYMMDD:
                case Constants.YYYY_MM_DD:
                {
                    sDateString=dDate.getFullYear()+iSeparator+(iMonth)+iSeparator+dDate.getDate();
                    break;
                }
                default:
                {
                    sDateString=dDate.getDate()+iSeparator+(iMonth)+iSeparator+dDate.getFullYear();
                }
            }

            if(isDateTime)
               sDateString+=" " +dateUtils.getTimeStringFromDateObject(dDate,clAppBuffer.getTimeFormat());
            if(clAppBuffer.getFarsiCalendar()=="true")
                sDateString = util.toPersianNumber(sDateString);
            return sDateString;
        };

        this.getTimeStringFromDateObject=function(dDate,iTimeFormat)
        {
            var sTime=null;
            var iHours=dDate.getHours();
            var iMins=dDate.getMinutes();
            var sAMPM="";
            if(iTimeFormat==Constants.TIME_HHMMAMPM)
            {
                sAMPM = iHours >= 12 ? 'PM' : 'AM';
                iHours = iHours % 12;
                iHours = iHours ? iHours : 12;
            }
            sTime=iHours+":"+(iMins>=10?iMins:("0"+iMins))+" "+sAMPM;
            if(clAppBuffer.getFarsiCalendar()=="true")
                sTime = util.toPersianNumber(sTime);
            return sTime;
        };

        this.getTimeStringFromMins=function(iDurationMins)
        {
            var iHrs=parseInt(iDurationMins/60);
            var iMins=parseInt(iDurationMins%60);
            var sAMPM="";

            if(clAppBuffer.getTimeFormat()==Constants.TIME_HHMMAMPM)
            {
                if(iHrs>=12)
                {
                    sAMPM="PM";
                    iHrs=iHrs-12;                    
                }
                else
                    sAMPM="AM";

                if(iHrs==0)
                    iHrs=12;
            }

            iHrs=util.getFixedLengthString(iHrs+"",2);
            iMins=util.getFixedLengthString(iMins+"",2);            
            return iHrs+":"+iMins+" "+sAMPM;
        };

        this.getYearFromInt=function(iDate)
        {
            return  ((iDate & 0xfff0000) / 0x10000);
        } ;

        this.getMonthFromInt=function(iDate)
        {
            return ((iDate & 0xff00) / 256);
        };

        this.getDayFromInt=function(iDate)
        {
             return (iDate & 0xff);
        };

        this.getHoursFromInt=function(iTime)
        {
            //return  (short)((iDate & 0xfff0000) / 0x10000);
            return  ((iTime & 0x1F0000) / 0x10000);
        };

        this.getMinutesFromInt=function(iTime)
        {
            return ((iTime & 0xff00) / 256);
        };

        this.getSecondsFromInt=function(iTime)
        {
             return (iTime & 0xff);
        };


       this.getIntDateTime=function(iDay, iMonth, iYear, iHour, iMin, iSec)
       {
           return ((iYear * 8589934592) | (iMonth * 33554432) | (iDay * 131072) | (iHour * 4096) | (iMin * 64) | iSec);
       };

       this.getIntDate=function(iDay, iMonth, iYear)
       {
           return (((iYear * 0x10000) | iMonth * 0x100) | iDay);
       };

    this.getIntTime=function(iHour, iMinute, iSec)
    {
        return (((iHour * 0x10000) | iMinute * 0x100) | iSec);
    }


       this.convertDatetoInt=function(sDate, byDateFormat)
       {
           if(!byDateFormat)
               byDateFormat=clAppBuffer.getDateFormat();
           if(clAppBuffer.getFarsiCalendar()=="true")
               sDate = util.toEnglishNumber(sDate);

           var iArrDate=this.getDateComponents(sDate, byDateFormat);
           if(iArrDate!=null)
           {
               return this.getIntDate(iArrDate[0], iArrDate[1], iArrDate[2]);
           }
           return 0;
       };

       this.convertDateTimetoInt=function(sDate, byDateFormat,byTimeFormat,bEndTime)
       {
           if (!sDate || !util.trim(sDate))
               return 0;

            if(!byDateFormat)
               byDateFormat=clAppBuffer.getDateFormat();

            if(!byTimeFormat)
               byTimeFormat=clAppBuffer.getTimeFormat();

           if(clAppBuffer.getFarsiCalendar()=="true")
               sDate = util.toEnglishNumber(sDate);

            var iArrDate=this.getDateComponents(sDate, byDateFormat);

           sDate=util.trim(sDate);
           sDate = sDate.replace(/-/g, '/');
           sDate = sDate.replace(/\s+/g, '/');//sDate.replace(/[s]+/g, '/');

           var sDateDets = sDate.split("/");
           var iArrTime=null;

           if (sDateDets.length > 3)//Time also exists
           {
               sDate = sDateDets[3];
               if(byTimeFormat==Constants.TIME_HHMMAMPM)
                   iArrTime=this.getTimeComponents(sDateDets[3],sDateDets[4]);
               else
                   iArrTime=this.getTimeComponents(sDateDets[3],null);
           }
           else if(bEndTime)
               iArrTime=[23,59,59];
           else
               iArrTime=[0,0,0];

           return this.getIntDateTime(iArrDate[0], iArrDate[1], iArrDate[2], iArrTime[0], iArrTime[1], iArrTime[2]);
       };


       this.getDateComponents=function(sDate,byDateFormat)
       {
           if (!sDate || !util.trim(sDate))
               return null;

           sDate = sDate.replace(/-/g, '/')
           var sDateDets = sDate.split("/");
           var iYear = 0, iMonth = 0, iDay = 0;

           if (byDateFormat == Constants.DDMMYYYY)
           {
               iDay = parseInt(sDateDets[0],10);
               iMonth = parseInt(sDateDets[1],10);
               iYear = parseInt(sDateDets[2]);
           }
           else if (byDateFormat == Constants.MMDDYYYY)
           {
               iMonth = parseInt(sDateDets[0],10);
               iDay = parseInt(sDateDets[1],10);
               iYear = parseInt(sDateDets[2],10);
           }
           else if (byDateFormat == Constants.YYYYMMDD)
           {
               iYear = parseInt(sDateDets[0],10);
               iMonth = parseInt(sDateDets[1],10);
               iDay = parseInt(sDateDets[2],10);
           }
           return [iDay,iMonth,iYear];
       };

       this.getTimeComponents=function(sTime,sAMPM)
       {
           var sDateDets = sTime.split(":");
           var iHour = parseInt(sDateDets[0],10);
           var iMin = parseInt(sDateDets[1],10);
           var iSec=0;
           if (sDateDets.length == 3)
               iSec = parseInt(sDateDets[2],10);
           if( sAMPM!=null)
           {
               sAMPM=util.trim(sAMPM);
               if(sAMPM.length>0)
               {
                   if(sAMPM.toLowerCase().charAt(0)=='p')
                   {
                       if (iHour < 12)
                           iHour += 12;
                   }
                   else
                   {
                        //AM
                       if(iHour==12)//if 12 AM,setting hour as zero
                        iHour=0;
                   }
               }
           }
           return [iHour,iMin,iSec];
       };


       this.getTimeInMins=function(sTime)
       {
           if(clAppBuffer.getFarsiCalendar()=="true")
               sTime = util.toEnglishNumber(sTime);
           sTime=util.trim(sTime);
           
           var sAMPM=null;
           var iIndex=sTime.indexOf(' ');
           if(iIndex!=-1)
           {
               sAMPM=sTime.substring(iIndex+1);
               sTime=sTime.substring(0,iIndex);
           }

           var sDateDets = sTime.split(":");
           var iHour = parseInt(sDateDets[0],10);
           var iMin = parseInt(sDateDets[1],10);
           /*var iSec=0;
           if (sDateDets.length == 3)
               iSec = parseInt(sDateDets[2],10);*/
           if(sAMPM!=null)
           {
               sAMPM=util.trim(sAMPM);
               if(sAMPM.length>0)
               {
                   if(sAMPM.toLowerCase().charAt(0)=='p') //sAMPM.length>0 &&
                   {
                       if(iHour<12)
                         iHour+=12;
                   }
                   else if(iHour==12) //12 AM
                        iHour=0;
               }
           }
           return (iHour*60)+iMin;
       };

      this.convertIntToMins=function(iTime)
      {
          var iHour = (iTime & 0xff0000) / (0x10000);
          var iMins = (iTime & 0xff00) / (0x100);
          return (iHour*60)+iMins;
      };

       this.convertInttoTime=function(iTime,byTimeFormat)
       {
           if(!byTimeFormat)
            byTimeFormat = clAppBuffer.getTimeFormat();
            
           var sTime = null,iHour,iMins,sAMPM=null;;
           iHour = (iTime & 0xff0000) / (0x10000);
           iMins = (iTime & 0xff00) / (0x100);

           if( iHour > 23)
            iHour=0;

           if(byTimeFormat==Constants.TIME_HHMMAMPM)
           {
                sAMPM = (iHour>11)?" PM":" AM";
                if(iHour>12)
                    iHour=iHour-12;
           }
          sTime = util.getFixedLengthString(iHour+"",2,"0") + ":" + util.getFixedLengthString(iMins+"",2,"0");//iMins;
          //sTime = iHour + ":" + util.getFixedLengthString(iMins+"",2,"0");//iMins;

          if(sAMPM != null)
            sTime += sAMPM;
            return sTime;
       };

    this.isLongDate=function(iValue)
    {
        if(iValue > 2734247652)
            return true;
        return false;
    };

      this.isIntTime=function(iValue)
      {
          if(iValue<=2734247652) // for javascript date, value will be > 2734247652 (January 1, 1970). For CRM int dates and time will be less than this value
            return true;

          return false;
      };

};




dateUtils.weekdayLong = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
dateUtils.weekdayShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
dateUtils.monthLong = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October',
    'November', 'December'];
dateUtils.monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
dateUtils.meridian = {
    'AM': 'AM',
    'PM': 'PM'
};

dateUtils.supportedFormats = {
    // abbreviated weekday name according to the current locale
    'a': function (dt) { return dateUtils.weekdayShort[dt.getDay()]; },
    // full weekday name according to the current locale
    'A': function (dt) { return dateUtils.weekdayLong[dt.getDay()]; },
    // abbreviated month name according to the current locale
    'b': function (dt) { return dateUtils.monthShort[dt.getMonth()]; },
    'h': function (dt) { return dateUtils.strftime(dt, '%b'); },
    // full month name according to the current locale
    'B': function (dt) { return dateUtils.monthLong[dt.getMonth()]; },
    // preferred date and time representation for the current locale
    'c': function (dt) { return dateUtils.strftime(dt, '%a %b %d %T %Y'); },
    // century number (the year divided by 100 and truncated
    // to an integer, range 00 to 99)
    'C': function (dt) { return dateUtils.calcCentury(dt.getFullYear()); },
    // day of the month as a decimal number (range 01 to 31)
    'd': function (dt) { return dateUtils.leftPad(dt.getDate(), 2, '0'); },
    // same as %m/%d/%y
    'D': function (dt) { return dateUtils.strftime(dt, '%m/%d/%y');},
    // day of the month as a decimal number, a single digit is
    // preceded by a space (range ' 1' to '31')
    'e': function (dt) { return dateUtils.leftPad(dt.getDate(), 2, ' '); },
    // month as a decimal number, a single digit is
    // preceded by a space (range ' 1' to '12')
    'f': function () { return dateUtils.strftimeNotImplemented('f'); },
    // same as %Y-%m-%d
    'F': function (dt) { return dateUtils.strftime(dt, '%Y-%m-%d');  },
    // like %G, but without the century.
    'g': function () { return dateUtils.strftimeNotImplemented('g'); },
    // The 4-digit year corresponding to the ISO week number
    // (see %V).  This has the same format and value as %Y,
    // except that if the ISO week number belongs to the
    // previous or next year, that year is used instead.
    'G': function () { return dateUtils.strftimeNotImplemented('G'); },
    // hour as a decimal number using a 24-hour clock (range
    // 00 to 23)
    'H': function (dt) { return dateUtils.leftPad(dt.getHours(), 2, '0'); },
    // hour as a decimal number using a 12-hour clock (range
    // 01 to 12)
    'I': function (dt) { return dateUtils.leftPad(
            dateUtils.hrMil2Std(dt.getHours()), 2, '0'); },
    // day of the year as a decimal number (range 001 to 366)
    'j': function (dt) { return dateUtils.leftPad(
            dateUtils.calcDays(dt), 3, '0'); },
    // Hour as a decimal number using a 24-hour clock (range
    // 0 to 23 (space-padded))
    'k': function (dt) { return dateUtils.leftPad(dt.getHours(), 2, ' '); },
    // Hour as a decimal number using a 12-hour clock (range
    // 1 to 12 (space-padded))
    'l': function (dt) { return dateUtils.leftPad(
            dateUtils.hrMil2Std(dt.getHours()), 2, ' '); },
    // month as a decimal number (range 01 to 12)
    'm': function (dt) { return dateUtils.leftPad((dt.getMonth()+1), 2, '0'); },
    // minute as a decimal number
    'M': function (dt) { return dateUtils.leftPad(dt.getMinutes(), 2, '0'); },
    // Linebreak
    'n': function () { return '\n'; },
    // either `am' or `pm' according to the given time value,
    // or the corresponding strings for the current locale
    'p': function (dt) { return dateUtils.getMeridian(dt.getHours()); },
    // time in a.m. and p.m. notation
    'r': function (dt) { return dateUtils.strftime(dt, '%I:%M:%S %p'); },
    // time in 24 hour notation
    'R': function (dt) { return dateUtils.strftime(dt, '%H:%M'); },
    // second as a decimal number
    'S': function (dt) { return dateUtils.leftPad(dt.getSeconds(), 2, '0'); },
    // Tab char
    't': function () { return '\t'; },
    // current time, equal to %H:%M:%S
    'T': function (dt) { return dateUtils.strftime(dt, '%H:%M:%S'); },
    // weekday as a decimal number [1,7], with 1 representing
    // Monday
    'u': function (dt) { return dateUtils.convertOneBase(dt.getDay()); },
    // week number of the current year as a decimal number,
    // starting with the first Sunday as the first day of the
    // first week
    'U': function () { return dateUtils.strftimeNotImplemented('U'); },
    // week number of the year (Monday as the first day of the
    // week) as a decimal number [01,53]. If the week containing
    // 1 January has four or more days in the new year, then it
    // is considered week 1. Otherwise, it is the last week of
    // the previous year, and the next week is week 1.
    'V': function () { return dateUtils.strftimeNotImplemented('V'); },
    // week number of the current year as a decimal number,
    // starting with the first Monday as the first day of the
    // first week
    'W': function () { return dateUtils.strftimeNotImplemented('W'); },
    // day of the week as a decimal, Sunday being 0
    'w': function (dt) { return dt.getDay(); },
    // preferred date representation for the current locale
    // without the time
    'x': function (dt) { return dateUtils.strftime(dt, '%D'); },
    // preferred time representation for the current locale
    // without the date
    'X': function (dt) { return dateUtils.strftime(dt, '%T'); },
    // year as a decimal number without a century (range 00 to
    // 99)
    'y': function (dt) { return dateUtils.getTwoDigitYear(dt.getFullYear()); },
    // year as a decimal number including the century
    'Y': function (dt) { return dateUtils.leftPad(dt.getFullYear(), 4, '0'); },
    // time zone or name or abbreviation
    'z': function () { return dateUtils.strftimeNotImplemented('z'); },
    'Z': function () { return dateUtils.strftimeNotImplemented('Z'); },
    // Literal percent char
    '%': function (dt) { return '%'; }
};

dateUtils.getSupportedFormats = function ()
{
    var str = '';
    for (var i in dateUtils.supportedFormats) { str += i; }
    return str;
};

dateUtils.supportedFormatsPat = new RegExp('%[' +
                                           dateUtils.getSupportedFormats() + ']{1}', 'g');

dateUtils.strftime = function (dt, format)
{
    var d = null;
    var pats = [];
    var dts = [];
    var str = format;

    // If no dt, use current date
    d = dt ? dt : new Date();
    // Allow either Date obj or UTC stamp
    d = typeof dt == 'number' ? new Date(dt) : dt;

    // Grab all instances of expected formats into array
    while (pats = dateUtils.supportedFormatsPat.exec(format))
    {
        dts.push(pats[0]);
    }

    // Process any hits
    for (var i = 0; i < dts.length; i++)
    {
        key = dts[i].replace(/%/, '');
        str = str.replace('%' + key,
                dateUtils.supportedFormats[key](d));
    }
    return str;

};

dateUtils.strftimeNotImplemented = function (s)
{
    throw('dateUtils.strftime format "' + s + '" not implemented.');
};

dateUtils.leftPad = function (instr, len, spacer)
{
    var str = instr.toString();
    // spacer char optional, default to space
    var sp = spacer ? spacer : ' ';
    while (str.length < len) {
        str = sp + str;
    }
    return str;
};

/**
 * Calculate the century to which a particular year belongs
 * @param y Integer year number
 * @return Integer century number
 */
dateUtils.calcCentury = function (y)
{
    var ret = parseInt(y/100);
    ret = ret.toString();
    return dateUtils.leftPad(ret);
};

/**
 * Calculate the day number in the year a particular date is on
 * @param dt JavaScript date object
 * @return Integer day number in the year for the given date
 */
dateUtils.calcDays = function(dt)
{
    var first = new Date(dt.getFullYear(), 0, 1);
    var diff = 0;
    var ret = 0;
    first = Date(first.getTime());
    //    first = first.getTime();
    diff = (dt.getTime() - first);
    ret = parseInt(((((diff/1000)/60)/60)/24))+1;
    return ret;
};

/**
 * Adjust from 0-6 base week to 1-7 base week
 * @param d integer for day of week
 * @return Integer day number for 1-7 base week
 */
dateUtils.convertOneBase = function (d)
{
    return d == 0 ? 7 : d;
};

dateUtils.getTwoDigitYear = function (yr)
{
    // Add a millenium to take care of years before the year 1000,
    // (e.g, the year 7) since we're only taking the last two digits
    // If we overshoot, it doesn't matter
    var millenYear = yr + 1000;
    var str = millenYear.toString();
    str = str.substr(2); // Get the last two digits
    return str;
};

/**
 * Return 'AM' or 'PM' based on hour in 24-hour format
 * @param h Integer for hour in 24-hour format
 * @return String of either 'AM' or 'PM' based on hour number
 */
dateUtils.getMeridian = function (h)
{
    h = typeof h == 'number' ? h : parseInt(h);
    return h > 11 ? dateUtils.meridian.PM :
           dateUtils.meridian.AM;
};

/**
 * Convert a 24-hour formatted hour to 12-hour format
 * @param hour Integer hour number
 * @return String for hour in 12-hour format -- may be string length of one
 */
dateUtils.hrMil2Std = function (hour)
{
    var h = typeof hour == 'number' ? hour : parseInt(hour);
    var str = h > 12 ? h - 12 : h;
    str = str == 0 ? 12 : str;
    return str;
};

/**
 * Convert a 12-hour formatted hour with meridian flag to 24-hour format
 * @param hour Integer hour number
 * @param pm Boolean flag, if PM hour then set to true
 * @return String for hour in 24-hour format
 */
dateUtils.hrStd2Mil = function  (hour, pm)
{
    var h = typeof hour == 'number' ? hour : parseInt(hour);
    var str = '';
    // PM
    if (pm) {
        str = h < 12 ? (h+12) : h;
    }
    // AM
    else {
        str = h == 12 ? 0 : h;
    }
    return str;
};

// Constants for use in dateUtils.add
dateUtils.dateParts = {
    YEAR: 0, MONTH: 1, DAY: 2, HOUR: 3, MINUTE: 4, SECOND: 5,
    MILLISECOND: 6, QUARTER: 7, WEEK: 8, WEEKDAY: 9
};

/**
 * Add to a Date in intervals of different size, from
 * milliseconds to years
 * @param dt -- Date (or timestamp Number), date to increment
 * @param interv -- Number, a constant representing the interval,
 *    e.g. YEAR, MONTH, DAY.  See dateUtils.dateParts
 * @param incr -- Number, how much to add to the date
 * @return Integer day number for 1-7 base week
 */
dateUtils.add = function (dt, interv, incr)
{

    if (typeof dt == 'number') { dt = new Date(dt); }
    else if(typeof dt == 'string')
    {
        dt=dateUtils.getJSDate(dt);
    }

    function fixOvershoot()
    {
        if (sum.getDate() < dt.getDate())
        {
            sum.setDate(0);
        }
    }

    var sum = new Date(dt),bFarsiCalendar=clAppBuffer.getFarsiCalendar()=="true";
    if(bFarsiCalendar)
        sum = new Date().fa(dt.getYear(),dt.getMonth(),dt.getDate());

    with (dateUtils.dateParts) {
        switch(interv)
                {
            case YEAR:
                if(bFarsiCalendar)
                    sum.addYears(incr);
                else
                    sum.setFullYear(dt.getFullYear()+incr);
                // Keep increment/decrement from 2/29 out of March
                fixOvershoot();
                break;
            case QUARTER:
                // Naive quarter is just three months
                incr*=3;
            // fallthrough...
            case MONTH:
                if(bFarsiCalendar)
                    sum.addMonths(incr);
                else
                    sum.setMonth(dt.getMonth()+incr);
                // Reset to last day of month if you overshoot
                fixOvershoot();
                break;
            case WEEK:
                incr*=7;
            // fallthrough...
            case DAY:
                if(bFarsiCalendar)
                    sum.addDays(incr);
                else
                    sum.setDate(dt.getDate() + incr);
                break;
            case WEEKDAY:
                //FIXME: assumes Saturday/Sunday weekend, but even this is not fixed.
                // There are CLDR entries to localize this.
                var dat = dt.getDate();
                var weeks = 0;
                var days = 0;
                var strt = 0;
                var trgt = 0;
                var adj = 0;
                // Divide the increment time span into weekspans plus leftover days
                // e.g., 8 days is one 5-day weekspan / and two leftover days
                // Can't have zero leftover days, so numbers divisible by 5 get
                // a days value of 5, and the remaining days make up the number of weeks
                var mod = incr % 5;
                if (mod == 0) {
                    days = (incr > 0) ? 5 : -5;
                    weeks = (incr > 0) ? ((incr-5)/5) : ((incr+5)/5);
                }
                else {
                    days = mod;
                    weeks = parseInt(incr/5);
                }
                // Get weekday value for orig date param
                strt = dt.getDay();
                // Orig date is Sat / positive incrementer
                // Jump over Sun
                if (strt == 6 && incr > 0) {
                    adj = 1;
                }
                // Orig date is Sun / negative incrementer
                // Jump back over Sat
                else if (strt == 0 && incr < 0) {
                    adj = -1;
                }
                // Get weekday val for the new date
                trgt = strt + days;
                // New date is on Sat or Sun
                if (trgt == 0 || trgt == 6) {
                    adj = (incr > 0) ? 2 : -2;
                }
                // Increment by number of weeks plus leftover days plus
                // weekend adjustments
                sum.setDate(dat + (7*weeks) + days + adj);
                break;
            case HOUR:
                sum.setHours(sum.getHours()+incr);
                break;
            case MINUTE:
                sum.setMinutes(sum.getMinutes()+incr);
                break;
            case SECOND:
                sum.setSeconds(sum.getSeconds()+incr);
                break;
            case MILLISECOND:
                sum.setMilliseconds(sum.getMilliseconds()+incr);
                break;
            default:
                // Do nothing
                break;
        }
    }
    return sum; // Date
};

/**
 * Get the difference in a specific unit of time (e.g., number
 * of months, weeks, days, etc.) between two dates.
 * @param date1 -- Date (or timestamp Number)
 * @param date2 -- Date (or timestamp Number)
 * @param interv -- Number, a constant representing the interval,
 *    e.g. YEAR, MONTH, DAY.  See dateUtils.dateParts
 * @return Integer, number of (interv) units apart that
 *    the two dates are
 */
dateUtils.diff = function (date1, date2, interv)
{
    //  date1 or date2: Date object or Number equivalent

    //  interval: A constant representing the interval, e.g. YEAR, MONTH, DAY.  See dateUtils.dateParts.

    // Accept timestamp input
    if (typeof date1 == 'number')
    {
        date1 = new Date(date1);
    }
    if (typeof date2 == 'number')
    {
        date2 = new Date(date2);
    }
    var yeaDiff = date2.getFullYear() - date1.getFullYear();
    var monDiff = (date2.getMonth() - date1.getMonth()) + (yeaDiff * 12);
    var msDiff = date2.getTime() - date1.getTime(); // Millisecs
    var secDiff = msDiff/1000;
    var minDiff = secDiff/60;
    var houDiff = minDiff/60;
    var dayDiff = houDiff/24;
    var weeDiff = dayDiff/7;
    var delta = 0; // Integer return value

    with (dateUtils.dateParts) {
        switch (interv) {
            case YEAR:
                delta = yeaDiff;
                break;
            case QUARTER:
                var m1 = date1.getMonth();
                var m2 = date2.getMonth();
                // Figure out which quarter the months are in
                var q1 = Math.floor(m1/3) + 1;
                var q2 = Math.floor(m2/3) + 1;
                // Add quarters for any year difference between the dates
                q2 += (yeaDiff * 4);
                delta = q2 - q1;
                break;
            case MONTH:
                delta = monDiff;
                break;
            case WEEK:
                // Truncate instead of rounding
                // Don't use Math.floor -- value may be negative
                delta = parseInt(weeDiff);
                break;
            case DAY:
                delta = dayDiff;
                break;
            case WEEKDAY:
                var days = Math.round(dayDiff);
                var weeks = parseInt(days/7);
                var mod = days % 7;

                // Even number of weeks
                if(mod == 0){
                    days = weeks*5;
                }else{
                    // Weeks plus spare change (< 7 days)
                    var adj = 0;
                    var aDay = date1.getDay();
                    var bDay = date2.getDay();

                    weeks = parseInt(days/7);
                    mod = days % 7;
                    // Mark the date advanced by the number of
                    // round weeks (may be zero)
                    var dtMark = new Date(date1);
                    dtMark.setDate(dtMark.getDate()+(weeks*7));
                    var dayMark = dtMark.getDay();

                    // Spare change days -- 6 or less
                    if(dayDiff > 0){
                        switch(true){
                            // Range starts on Sat
                            case aDay == 6:
                                adj = -1;
                                break;
                            // Range starts on Sun
                            case aDay == 0:
                                adj = 0;
                                break;
                            // Range ends on Sat
                            case bDay == 6:
                                adj = -1;
                                break;
                            // Range ends on Sun
                            case bDay == 0:
                                adj = -2;
                                break;
                            // Range contains weekend
                            case (dayMark + mod) > 5:
                                adj = -2;
                                break;
                            default:
                                // Do nothing
                                break;
                        }
                    }else if(dayDiff < 0){
                        switch (true) {
                            // Range starts on Sat
                            case aDay == 6:
                                adj = 0;
                                break;
                            // Range starts on Sun
                            case aDay == 0:
                                adj = 1;
                                break;
                            // Range ends on Sat
                            case bDay == 6:
                                adj = 2;
                                break;
                            // Range ends on Sun
                            case bDay == 0:
                                adj = 1;
                                break;
                            // Range contains weekend
                            case (dayMark + mod) < 0:
                                adj = 2;
                                break;
                            default:
                                // Do nothing
                                break;
                        }
                    }
                    days += adj;
                    days -= (weeks*2);
                }
                delta = days;

                break;
            case HOUR:
                delta = houDiff;
                break;
            case MINUTE:
                delta = minDiff;
                break;
            case SECOND:
                delta = secDiff;
                break;
            case MILLISECOND:
                delta = msDiff;
                break;
            default:
                // Do nothing
                break;
        }
    }
    // Round for fractional values and DST leaps
    return Math.round(delta); // Number (integer)
};

/**
 * returns day of week Number
 * @param clDate js date
 */
dateUtils.getDayofWeekNumber = function(clDate)
{
    var myDays=[1,2,3,4,5,6,7];
    return myDays[clDate.getDay()];
};

/**
 * returns JavaScript date
 * @param sDate user format date is dd/mm/yyyy
 */
dateUtils.getJSDate = function(sDate)
{
    var clDateArray=sDate.split("/");
    var jsDate = util.getDateObject(sDate);//new Date();
 //   jsDate.setMonth(clDateArray[1]-1,clDateArray[0]);
   // jsDate.setYear(clDateArray[2]);
    return jsDate;

};

/**
 * convert jsDate('Tue Apr 1 12:58:25 EDT 2008')--into-->s dd/MM/yyyy format
 * @param jsDate
 */
dateUtils.formatDate = function(jsDate)
{
    //        alert("fmtDate-->"+fmtDate)
    var dd = jsDate.getDate();
    var mm = (jsDate.getMonth()+1);
    var yyyy = jsDate.getFullYear();
    /*if(dd<10)
     {
     dd="0"+dd;
     }
     if(mm<10)
     {
     mm = "0"+mm;
     }*/
    return   dd+ "/" +mm + "/" +yyyy;
};

dateUtils.daysBetween = function(jsDate1, jsDate2)
{
    /*var jsDate1 = new Date(date1);
     var jsDate2 = new Date(date2);*/
    jsDate1.setHours(0,0,0,0);
    jsDate2.setHours(0,0,0,0);

    // The number of milliseconds in one day
    var ONE_DAY = 1000 * 60 * 60 * 24;

    // Convert both dates to milliseconds
    var date1_ms = jsDate1.getTime();
    var date2_ms = jsDate2.getTime();

    // Calculate the difference in milliseconds
    var difference_ms = Math.abs(date1_ms - date2_ms);

    // Convert back to days and return
    return Math.round(difference_ms/ONE_DAY)+1;/*including end date*/
};

dateUtils.daysInMonth = function(clDate)  //clDate = dd/MM/yyyy
{
    var monthDays = [31,28,31,30,31,30,31,31,30,31,30,31];
    return function (clDate) {
        clDate=clDate.split("/");
        var iMonth = Math.round(clDate[1])-1;     /*check with parseInt('08') and parseInt(08) */
        var iYear = parseInt(clDate[2]);
        if (((0 == (iYear%4)) && ( (0 != (iYear%100)) || (0 == (iYear%400)))) && iMonth == 1)
            return 29;
        else
            return monthDays[iMonth];
    };
}();

/**
 * this method retuns the WEEK_OF_MONTH of a given javascript Date
 * @param jsDate javascript date object
 */
dateUtils.getWeekOfMonth=function(jsDate)
{
    var todayDayOfMonth = jsDate.getDate();
    var first = new Date();
    first.setMonth(jsDate.getMonth(),1);
    first.setYear(jsDate.getFullYear());
    var monthFirstDateDay = first.getDay();
    return Math.ceil((todayDayOfMonth + monthFirstDateDay) / 7);
};

/**
 * getWeek() was developed by Nick Baicoianu at MeanFreePath: http://www.meanfreepath.com
 * Returns the week number for this date.  dowOffset is the day of week the week
 * "starts" on for your locale - it can be from 0 to 6. If dowOffset is 1 (Monday),
 * the week returned is the ISO 8601 week number.
 * @param dowOffset day_of_week
 * @return int
 */
dateUtils.getWeek = function (dowOffset)
{
    dowOffset = typeof(dowOffset) == 'int' ? dowOffset : 0; //default dowOffset to zero
    var newYear = new Date(this.getFullYear(),0,1);
    
    var day = newYear.getDay() - dowOffset; //the day of week the year begins on
    day = (day >= 0 ? day : day + 7);
    var daynum = Math.floor((this.getTime() - newYear.getTime() -
                             (this.getTimezoneOffset()-newYear.getTimezoneOffset())*60000)/86400000) + 1;
    var weeknum;
    //if the year starts before the middle of a week
    if(day < 4) {
        weeknum = Math.floor((daynum+day-1)/7) + 1;
        if(weeknum > 52) {
            nYear = new Date(this.getFullYear() + 1,0,1);
            nday = nYear.getDay() - dowOffset;
            nday = nday >= 0 ? nday : nday + 7;
            /*if the next year starts before the middle of
             the week, it is week #1 of that year*/
            weeknum = nday < 4 ? 1 : 53;
        }
    }
    else {
        weeknum = Math.floor((daynum+day-1)/7);
    }
    return weeknum;
};

/**
 * this method is used to get the Clock Time by JS Date and by incrementing the HOUR value in 12 Hr format or 24 Hr format
 * @param jsDate javascript date object
 * @param incr integer value, to get the next Hour incremented value
 * @param is24Format if true means gives the time in 24 Hour format
 */
dateUtils.getClockTime = function(jsDate,incr,is24Format)
{
    if(incr)
        jsDate = dateUtils.add(jsDate,dateUtils.dateParts.HOUR,incr);
    var iHour = jsDate.getHours();
    var iMinutes = jsDate.getMinutes();
    if(iMinutes<10)
        iMinutes="0"+iMinutes;

    if(is24Format)
    {
        return iHour+":"+iMinutes;
    }
    else
    {
        var meridian = dateUtils.getMeridian(iHour);
        iHour = dateUtils.hrMil2Std(iHour);
        return iHour+":"+iMinutes+" "+meridian;
    }
};

/**
 * Get the week of the year for the current date instance.
 * @param firstDayOfWeek   A Number that represents the first day of the week (0-6) [Optional]
 * @return {Number}  0 through 53
 */
Date.prototype.getWeekOfYear = function (firstDayOfWeek) {
    var y = this.getFullYear(), m = this.getMonth(), d = this.getDate();

    var dow = firstDayOfWeek || 0;

    var offset = 7 + 1 - new Date(y, 0, 1).getDay();
    if (offset == 8) {
        offset = 1;
    }
    var daynum = ((Date.UTC(y, m, d, 0, 0, 0) - Date.UTC(y, 0, 1, 0, 0, 0)) / 86400000) + 1;
    var w = Math.floor((daynum - offset + 7) / 7);
    if (w === dow) {
        y--;
        var prevOffset = 7 + 1 - new Date(y, 0, 1).getDay();
        if (prevOffset == 2 || prevOffset == 8) {
            w = 53;
        } else {
            w = 52;
        }
    }
    return w;
};

  dateUtils.getDateByFormat =function(iFormat,day,mon,year)
    {
        var sReturn="";
        iFormat=parseInt(iFormat,10);
        switch(iFormat)
        {
            case Constants.DDMMYYYY : {
                sReturn = day+"/"+mon+"/"+year;
                break;
            }
            case Constants.DD_MM_YYYY: {
                sReturn =  day+"-"+mon+"-"+year;// "dd-MM-yyyy";
                break;
            }
            case Constants.MMDDYYYY: {
                sReturn= mon+"/"+day+"/"+year;// "MM/dd/yyyy";
                break;
            }
            case Constants.YYYYMMDD: {
                sReturn= year+"/"+mon+"/"+day;//"yyyy/MM/dd";
                break;
            }
            case Constants.DD___MM___YY: {
                sReturn=day+mon+dateUtils.getTwoDigitYear(year);
                break;
            }
            case Constants.DD___MON___YYYY: {
                sReturn=day+dateUtils.monthShort[mon]+year;
                break;
            }
            case Constants.DD__MON__YYYY: {
                sReturn=day+" "+dateUtils.monthShort[mon]+" "+year;
                break;
            }
            case Constants.DD_MON_YYYY: {
                sReturn=day+"-"+dateUtils.monthShort[mon]+"-"+year;
                break;
            }
            case Constants.DD___MM___YYYY: {
                sReturn=day+mon+year;
                break;
            }
            case Constants.DDMMYY: {
                sReturn=day+"/"+mon+"/"+year;
                break;
            }
            case Constants.DD_MM_YY: {
                sReturn=day+"-"+mon+"-"+year;
                break;
            }
            case Constants.DD___MON___YY: {
                sReturn=day+dateUtils.monthShort[mon]+year;
                break;
            }
            case Constants.DD__MON__YY: {
                sReturn=day+" "+dateUtils.monthShort[mon]+" "+dateUtils.getTwoDigitYear(year);
                break;
            }
            case Constants.DD_MON_YY: {
                sReturn=day+"-"+dateUtils.monthShort[mon]+"-"+dateUtils.getTwoDigitYear(year);
                break;
            }
        }
        if(clAppBuffer.getFarsiCalendar()=="true")
        sReturn =  util.toPersianNumber(sReturn);
        return sReturn;
    };


dateUtils.getDaysInMonth=function(iMonth,iYear)
{
    return new Date(iYear, iMonth, 0).getDate();
};

dateUtils.isLeapYear=function(iYear)
{
    return (iYear/4==0);
};

dateUtils.getDateObjectByType=function(iDatePart,iValue)
{
    if(iDatePart==DATE_UTILS.DD || iDatePart==DATE_UTILS.MM || iDatePart==DATE_UTILS.YY)
    {
        var sDate = DATE_UTILS.convertIntToDate(iValue);
        return util.getDateObject(sDate, sDate.indexOf(" ") != -1, true);
    }
    else if(iDatePart==DATE_UTILS.HH || iDatePart==DATE_UTILS.MI || iDatePart==DATE_UTILS.TIME)
    {
        return DATE_UTILS.getDateObjectFromIntTime(iValue);
    }

    return null;
};


this.DAY=1;
this.MONTH=2;
this.YEAR=3;
this.HOUR=4;
this.MINUTE=5;
this.SECOND=6;


//functions used in formulas

var DATE_UTILS=dateUtils;
DATE_UTILS.DD=1;
DATE_UTILS.MM=2;
DATE_UTILS.YY = 3;

DATE_UTILS.HH=4;
DATE_UTILS.MI=5;
DATE_UTILS.SS=6;

//CONVERT FUNCTION PARAM CONSTANTS
DATE_UTILS.DATE = 7;
DATE_UTILS.TIME = 8;
DATE_UTILS.DATETIME = 9;


DATE_UTILS.DATEADD = function (byDatePart,iDate,iValue)
{
    if(!iDate)
        return 0;

    var dDate = null;
    var isDateTime = dateUtils.isLongDate(iDate);

    if(isDateTime)
    {
        //dDate = new Date(iDate);
        dDate = util.getDateObject();
        dDate.setTime(iDate);

        //var sDate = DATE_UTILS.convertIntToDate(iDate);
        //dDate = util.getDateObject(sDate, sDate.indexOf(" ") != -1, true);
    }
    else
    {
        dDate = DATE_UTILS.getDateObjectByType(byDatePart, iDate);
    }

    //util.writeToLog("sDate,dDate=="+sDate+","+dDate)
    var iNoOfDays=0;
    var isTime=false;

    switch(byDatePart)
    {
        case DATE_UTILS.DD:
        {
            iNoOfDays=iValue;
            break;
        }
        case DATE_UTILS.MM:
        {
            //iNoOfDays=DATE_UTILS.getDaysInMonth(dDate.getMonth()+1,dDate.getYear());
            var dDate2=util.getDateObject();//new Date();
            dDate2.setDate(1);
            dDate2.setFullYear(dDate.getFullYear());
            dDate2.setMonth(dDate.getMonth()+iValue);
            dDate2.setDate(dDate.getDate());            

            //util.writeToLog("add months=="+iValue+",date=="+dDate2)
            iNoOfDays=dateUtils.getDateDiffByType(DATE_UTILS.DD,dDate,dDate2);

            break;
        }
        case DATE_UTILS.YY:
        {
            var dDate2=util.getDateObject();//new Date();
            dDate2.setDate(1);
            dDate2.setFullYear(dDate.getFullYear()+iValue);
            dDate2.setMonth(dDate.getMonth());
            dDate2.setDate(dDate.getDate());

            iNoOfDays=dateUtils.getDateDiffByType(DATE_UTILS.DD,dDate,dDate2);

            break;
        }
        case DATE_UTILS.HH:
        {
            dDate.setTime(dDate.getTime() + (iValue*60*60*1000));
            isTime=true;
            break;
        }
        case DATE_UTILS.MI:
        {
            dDate.setTime(dDate.getTime() + (iValue*60*1000));
            isTime=true;
            break;
        }
    }

    //return dateUtils.AddDays(sDate,iNoOfDays);
    if(iNoOfDays!=0)
        dDate=util.getDateAdd(dDate,iNoOfDays);
    //util.writeToLog("return dDate=="+sDate+","+dDate)
    if(isDateTime)
        return dDate.getTime();
    else
    {
        if(isTime)
            return dateUtils.getIntTime(dDate.getHours(),dDate.getMinutes(),0);
        else
            return DATE_UTILS.getIntDate(dDate.getDate(), dDate.getMonth() + 1, dDate.getFullYear());
    }
};


DATE_UTILS.DATEPART= function (byDatePart,iDate)
{
    var dDate ;

    var isDateTime = dateUtils.isLongDate(iDate);

    if(isDateTime)
    {
        if(clAppBuffer.getFarsiCalendar()=="true")
        {
            dDate = util.getDateObject();
            dDate.setTime(iDate);
        }
        else {
            dDate = new Date(iDate);
            dDate.setTime(iDate);
        }
    }
    else if(dateUtils.isIntTime(iDate))
    {
        dDate = DATE_UTILS.getDateObjectByType(byDatePart, iDate);
    }
    else
    {
        var sDate = DATE_UTILS.convertIntToDate(iDate);
        dDate = util.getDateObject(sDate, sDate.indexOf(" ") != -1, true);
    }
    switch (byDatePart)
    {
        case DATE_UTILS.DD:
        {
            return dDate.getDate();
        }
        case DATE_UTILS.MM:
        {
            return dDate.getMonth() + 1;
        }
        case DATE_UTILS.YY:
        {
            return dDate.getFullYear();
        }
        case DATE_UTILS.HH:
        {
            return dDate.getHours();
        }
        case DATE_UTILS.MI:
        {
            return dDate.getMinutes();
        }
    }

};


DATE_UTILS.DATEDIFF = function (byDatePart,iDate1,iDate2)
{
    //alert(byDatePart+","+iDate1+","+iDate2);

    var dDate1;
    var dDate2;

    var isDateTime = dateUtils.isLongDate(iDate1);

    //if(iDate1>2734247652) // for javascript date, value will be > 2734247652 (January 1, 1970). For CRM int dates and time will be less than this value

    if(isDateTime)
    {
        dDate1 = new Date();
        dDate1.setTime(iDate1);

        dDate2 = new Date();
        dDate2.setTime(iDate2);
    }
    else
    {
        /*var sDate1=DATE_UTILS.convertIntToDate(iDate1);
         var sDate2=DATE_UTILS.convertIntToDate(iDate2);
         var dDate1=util.getDateObject(sDate1,sDate1.indexOf(" ")!=-1,true);
         var dDate2=util.getDateObject(sDate2,sDate2.indexOf(" ")!=-1,true);*/

        dDate1 = DATE_UTILS.getDateObjectByType(byDatePart, iDate1);
        dDate2 = DATE_UTILS.getDateObjectByType(byDatePart, iDate2);
    }

    var iDiff=dateUtils.getDateDiffByType(byDatePart,dDate1,dDate2);
    if(byDatePart==DATE_UTILS.TIME)
    {
        if(iDiff>0)
        {
            var iHr = parseInt(iDiff / 60);
            var iMin = parseInt(iDiff % 60);
            iDiff = dateUtils.getIntTime(iHr, iMin, 0);
        }
        else
            iDiff=0;
    }

    return iDiff;
};


dateUtils.getDateDiffByType=function(byDatePart,dDate1,dDate2)
{
    switch(byDatePart)
    {
        case DATE_UTILS.DD:
        {
            return util.getDateDiff(dDate1,dDate2);
        }
        case DATE_UTILS.MM:
        {
            var iMonthsToAdd;
            iMonthsToAdd=(dDate2.getFullYear()-dDate1.getFullYear())>0? ((dDate2.getFullYear()-dDate1.getFullYear())*12):0;
            return iMonthsToAdd+(dDate2.getMonth()-dDate1.getMonth());
        }
        case DATE_UTILS.YY:
        {
            return dDate2.getFullYear()-dDate1.getFullYear();
        }
        case DATE_UTILS.HH:
        {
            var iMinsDiff=util.getTimeDiff(dDate1,dDate2);
            if(iMinsDiff>=60)
                return iMinsDiff/60;
            return 0;
        }
        case DATE_UTILS.MI:
        case DATE_UTILS.TIME:
        {
            var iValue=util.getTimeDiff(dDate1,dDate2);
            if(iValue)
                return parseInt(iValue);
        }
    }
    return 0;
};


/**
 * @return {number}
 */
DATE_UTILS.TIMEMINS=function (iTime)
{
    return dateUtils.convertIntToMins(iTime);
};

DATE_UTILS.CONVERT=function(iType,lDateTime)
{
    var sReturnValue=null;

    if(iType==DATE_UTILS.DATETIME)
    {
        if(lDateTime>0)
        {
            sReturnValue = dateUtils.convertLongToDateTime(lDateTime,0);
            /*var dDate = new Date();
            dDate.setTime(lDateTime);
            sReturnValue = dateUtils.getDateString(dDate, 0, true);*/
        }
    }
    else
    if(iType==DATE_UTILS.DATE)
        sReturnValue=dateUtils.convertIntToDate(lDateTime,clAppBuffer.getDateFormat());
    else if(iType==DATE_UTILS.TIME)
        sReturnValue=dateUtils.convertInttoTime(lDateTime, clAppBuffer.getTimeFormat());


    return sReturnValue;
};

DATE_UTILS.ROUNDOFF=function(fValue,iNoOfDecimals)
{
    var fRoundOffValue=0;
    if(!isNaN(fValue))
    {
        if (!iNoOfDecimals)
            iNoOfDecimals = 0;

        //fRoundOffValue = Math.round(fValue);
        fRoundOffValue = parseFloat(fValue).toFixed(iNoOfDecimals);//util.roundValue(fRoundOffValue,clAppBuffer.getNumOfDecimals());
    }

    return fRoundOffValue;
};


DATE_UTILS.NOW=function()
{
    return dateUtils.getCurrentDateTimeToInt(false,false,0,false);
};
var dropdownlist = new function()
{
    this.arrInstances={};
    var me=this;
    this.sEvtSrc=null;
    this.iListenerId=0;
    this.popUpOpen=false;

    function DropdownList()
    {
        this.iTimeout='';
        this.objPopupDiv='';
        this.iSelIndex=0;
    }

    this.getSelectedVal = function(sDropDownId)
    {
        var tblDropDown,arrRows,iSelVal = 0,iSelIndex;
        tblDropDown = document.getElementById(sDropDownId+"List");
        iSelIndex= tblDropDown.getAttribute("prevRowIndex");
        arrRows = tblDropDown.tBodies[0].rows;
        iSelVal = arrRows[iSelIndex].getAttribute("value");
        /*for(var i = 0;i < arrRows.length;i++)
         {
         if(arrRows[i].className == "selectedItem")
         {
         iSelVal = arrRows[i].getAttribute("value");
         break;
         }
         }*/
        return iSelVal;
    };

    this.getDropdownList=function(sMenuId)
    {
        if(!me.arrInstances[sMenuId])
            me.arrInstances[sMenuId]=new DropdownList();
        return me.arrInstances[sMenuId];
    };

    this.mopen=function(sTableId,e,objThis,sStyleClass)
    {
        e=e?e:window.event;
        me.sEvtSrc=cross.getSrcElement(e);
        if(sStyleClass==null || sStyleClass=='null')
            sStyleClass="";
//        var tblMain = document.getElementById("1toptbl");//TODO
        //var tblMain = objThis.parentNode.parentNode.parentNode;
        var tblMain = document.getElementById(sTableId+"toptbl");
        if(me.iListenerId>=0)
            cross.unregisterEventListener(me.iListenerId);
        if(util.trim(sStyleClass).length==0)
            sStyleClass="1";
        var sMainClassName="mainDiv";
        var sMainOpenClassName="mainDivopen";
        var objDotAction = tblMain.getAttribute("dotaction");
        if(objDotAction!=null && util.trim(objDotAction)==2)
        {
            sMainClassName="mainDivdots";
            sMainOpenClassName="mainDivdotsOpen";
        }


        me.iListenerId=cross.registerEventListener(cross.EVENT_ONCLICK,me.hideDiv,[document.getElementById(sTableId+"List"),"null",tblMain,sStyleClass,e]);
        var ddmenuitem = document.getElementById(sTableId+"List");
        //        if (!ddmenuitem.style.width)
        var iListWidth=document.getElementById(sTableId+"Label").parentNode.offsetWidth;
        var iTempListWidth=ddmenuitem.offsetWidth;
        ddmenuitem.className="popDiv1";
        ddmenuitem.style.display="";
        iListWidth=ddmenuitem.offsetWidth;
        //alert(iListWidth)
        ddmenuitem.className="popDiv";
        ddmenuitem.style.display="none";
        if(iListWidth<20)
            iListWidth=60;
        else if(iListWidth>=200)
            iListWidth=180;
        if(iTempListWidth==0)
        {
            if (iListWidth > 100)
                ddmenuitem.style.width = iListWidth + 25;
            /*else if (iListWidth > 100 && iListWidth< 110)
                ddmenuitem.style.width = iListWidth + 40;*/
            else
                ddmenuitem.style.width = iListWidth + 60;
        }
        var objDv=ddmenuitem.parentNode;
        //    alert(ddmenuitem.id);
        if (objDv.style.visibility == 'visible')
        {
            //objDv.style.visibility = 'none';

            util.animateToggle(objDv,{"transition-property":"height","transition-duration":"0.2"});
//            ddmenuitem.style.display = 'none';
            tblMain.onmouseover= function()
            {
                dropdownlist.showMouseOverDiv(this,sStyleClass);
            };
            tblMain.onmouseout=function()
            {
                dropdownlist.showMouseOutDiv(this,sStyleClass);
            };
            tblMain.className=sMainClassName+" "+sStyleClass;
        }
        else
        {
            objDv.style.visibility = 'hidden';
            objDv.style.position='absolute';
            ddmenuitem.style.display = 'block';
            ddmenuitem.style.zIndex = 20;

            objDv.style.width=ddmenuitem.offsetWidth+"px";
            objDv.style.height = ((ddmenuitem.offsetHeight)+10)+"px";


            util.animateToggle(objDv,{"transition-property":"height","transition-duration":"0.2"});
//            ddmenuitem.style.display = 'block';
            tblMain.onmouseout="";
            tblMain.onmouseover="";
            tblMain.className=sMainOpenClassName+" "+sStyleClass;
        }
        cross.cancelBubble(e);
        return false;
    };

    this.clearPrevSelection=function(sTableId)
    {
        var objTable=document.getElementById(sTableId+"List");
        var iSelIndex=me.getSelectedIndex(objTable);
        if(objTable.rows[iSelIndex].className!="dropwdown_disable")
        {
            objTable.rows[iSelIndex].className = "divLinks";
            objTable.rows[iSelIndex].childNodes[0].className = "";
        }
    };


    this.selectItem=function(sTableId,objTR,objHFld,event,sStyleClass)
    {
        //        alert(sTableId+","+objTR)
        var objTable=document.getElementById(sTableId+"List");
        //var tblMain = objTable.parentNode.parentNode.parentNode.parentNode;
        var tblMain = document.getElementById(sTableId+"toptbl");
        var comboType=document.getElementById(sTableId+"List").getAttribute('combotype');
        me.clearPrevSelection(sTableId);
        me.setSelectedIndex(sTableId+"List",objTR.rowIndex);
        var iSelIndex=objTR.rowIndex;
        objTable.rows[iSelIndex].className="selectedItem";
        var label=document.getElementById(sTableId+'Label');
        var lblElement = label.childNodes[0];
        if(comboType=='true')
        {
            lblElement.innerHTML=objTable.rows[iSelIndex].cells[2].innerHTML;
        }
        objTable.setAttribute("prevRowIndex",iSelIndex);
        if(util.trim(sStyleClass).length==0)
            sStyleClass="1";
        objTR.childNodes[0].className="fa fa-check";
        if(!me.popUpOpen)
            dropdownlist.hideDiv(objTable,objTR,tblMain,sStyleClass,event);
        me.popUpOpen=false;
        cross.cancelBubble(event);
        return false;

    };

    this.hideDropDownPopup=function(sTableId)
    {
        var objTable=document.getElementById(sTableId+"List");
        var tblMain = document.getElementById(sTableId+"toptbl");
        var evt=window.event;
        dropdownlist.hideDiv(objTable,"null",tblMain,"1",evt);
        me.popUpOpen=false;
    };

    this.setSelectedIndex=function(sTableId,iIndex)
    {
        me.getDropdownList(sTableId).iSelIndex=iIndex;
    };

    this.getSelectedIndex=function(objTable)
    {
        for(var i=0; i < objTable.rows.length; i++)
        {
            if(objTable.rows[i].className=="selectedItem")
            {
                return i;
            }
        }
        return 0;
    };

    this.showMouseOver=function(objTR, e)
    {
        e = e ? e : window.event;
        if(objTR.className!="selectedItem")
            objTR.className = 'linksMover';
        //        e.cancelBubble = true;
        return false;
    };

    this.showMouseOut=function(objTR, e)
    {
        e = e ? e : window.event;
        if(objTR.className!="selectedItem")
            objTR.className = 'divLinks';
        //        e.cancelBubble = true;
        return false;
    };

    this.showMouseOverDiv=function(objDiv,sStyleClass)
    {
//        objDiv.className = 'maindivMover';
//        alert(sStyleClass)
        var sMainClassName="mainDivMover";
        var objDotAction = objDiv.getAttribute("dotaction");
        if(objDotAction!=null && util.trim(objDotAction)==2)
        {
            sMainClassName="mainDivdotsMover";
        }
        if(sStyleClass!="null")
        {
            objDiv.className = sMainClassName+" " +sStyleClass+"";
        }
        else
            objDiv.className = sMainClassName;
    };

    this.showMouseOutDiv=function(objDiv,sStyleClass)
    {
        var sMainClassName="mainDiv";
        var objDotAction = objDiv.getAttribute("dotaction");
        if(objDotAction!=null && util.trim(objDotAction)==2)
        {
            sMainClassName="mainDivdots";
        }
        if(sStyleClass!="null")
        {
            objDiv.className = sMainClassName+' '+sStyleClass;
        }
        else
            objDiv.className = sMainClassName;
    };

    this.hideThisDiv=function(objThis)
    {
        //        alert(objme.innerHTML);
        me.objPopupDiv = objThis;

        //        me.iTimeout = setTimeout(cross.createCallbackFunc(this,dropdownlist.hideThis(),null), 5000);
        //    hideThis(objThis);
    };

    this.hideThis=function()
    {
        if(me.objPopupDiv != null)
        {
            clearTimeout(me.iTimeout);
            me.objPopupDiv.style.display = 'none';
            me.objPopupDiv = null;
        }

    };

    /* me.createObjectCallback=function(obj, fn, arguments)
     {
     return function()
     {
     fn.apply(obj, arguments);
     };
     };*/


    this.hideDiv=function(objDiv,objSrc,tblMain,sStyleClass,e)
    {
        if(cross.getSrcElement(cross.getEvent(e)).className!="disable")
        {
            if(me.sEvtSrc && objSrc.id && objSrc.id==me.sEvtSrc.id)
            {
                me.sEvtSrc=null;
                return;
            }
            var objDv=objDiv.parentNode;
            objDv.style.visibility="visible";
            util.animateToggle(objDv,{"transition-property":"height","transition-duration":"0.3"});
            //objDiv.style.display = 'none';
            var sMainClassName="mainDiv";
            var objDotAction = tblMain.getAttribute("dotaction");
            if(objDotAction!=null && util.trim(objDotAction)==2)
            {
                sMainClassName="mainDivdots";
            }
            tblMain.className=sMainClassName+" "+sStyleClass;
            if(sStyleClass=="1")
                sStyleClass="";
            tblMain.onmouseover= function()
            {
                dropdownlist.showMouseOverDiv(this,sStyleClass);
            };
            tblMain.onmouseout=function()
            {
                dropdownlist.showMouseOutDiv(this,sStyleClass);
            };

            if(me.iListenerId>=0)
                cross.unregisterEventListener(me.iListenerId);
        }
    };

    this.labelOnClick=function(sTableId,objTR,e,sStyleClass)
    {
        var objTable=document.getElementById(sTableId+"List");
        var comboType=document.getElementById(sTableId+"List").getAttribute('combotype');
        var iSelIndex=me.getSelectedIndex(objTable);
//        var iSelIndex=me.getDropdownList(sTableId+"List").iSelIndex;
        me.mopen(sTableId,e,null,sStyleClass);
        me.popUpOpen=true;
        if(comboType=='true')
        {
            objTable.rows[iSelIndex].onclick(e);
        }
        cross.cancelBubble(e);
        return false;
    };

    this.addListItem = function(sDropDownId,sItemName,sValue,isSelected,fnCallback,fnArgs)
    {
        var tblDropDwn,tbdDropDwn,trNew;
        tblDropDwn = document.getElementById(sDropDownId+"List");
        tbdDropDwn = tblDropDwn.tBodies[0];
        trNew = tbdDropDwn.rows[0].cloneNode(true);
        trNew.className="divLinks";
        trNew.onclick = function(e)
        {
            e = cross.getEvent(e);
            dropdownlist.selectItem(sDropDownId,trNew,null,e);
            if(fnCallback)
                cross.callFunction(window,fnCallback,fnArgs);
        };
        tbdDropDwn.appendChild(trNew);
        trNew.setAttribute("value",sValue);
        trNew.cells[1].innerHTML = sItemName;
        if(isSelected)
            me.setSelectedRow(trNew.rowIndex,sDropDownId);
    };

    this.removeListItem = function(sDropDownId,index,isAll)
    {
        var tblDropDwn,tbdDropDwn,trNew;
        tblDropDwn = document.getElementById(sDropDownId+"List");
        tbdDropDwn = tblDropDwn.tBodies[0];
        var arrRows = tblDropDwn.tBodies[0].rows;
        if(isAll)
        {
            for(var i=1;i<arrRows.length;i++)
            {
                tbdDropDwn.deleteRow(i);
            }
        }
        else
        {
            tbdDropDwn.deleteRow(index);
        }

    };

    this.setSelectedRow = function(iIndex,sTableId)
    {
        var objTable=document.getElementById(sTableId+"List");
        var comboType=document.getElementById(sTableId+"List").getAttribute('combotype');
        var iSelIndex=me.getSelectedIndex(objTable);
        objTable.rows[iSelIndex].className="divLinks";
        iSelIndex=iIndex;
        objTable.rows[iSelIndex].className="selectedItem";
        var label=document.getElementById(sTableId+'Label');
        var lblElement = label.childNodes[0];
        if(comboType=='true')
        {
            lblElement.innerHTML=objTable.rows[iSelIndex].cells[1].innerHTML;
        }

    };

    this.getItemAt = function(sDropDownId,iIndex)
    {
        return document.getElementById(sDropDownId+"List").tBodies[0].rows[iIndex];
    };

    this.getSelectedItem = function(sDropDownId)
    {
        var tblDropDown,iSelIndex;
        tblDropDown = document.getElementById(sDropDownId+"List");
        iSelIndex = tblDropDown.getAttribute("prevRowIndex");
        return tblDropDown.tBodies[0].rows[iSelIndex];
    };

    this.getItemIndex = function(sDropDownId)
    {
        var tblDropDown,iSelIndex;
        tblDropDown = document.getElementById(sDropDownId+"List");
        iSelIndex= tblDropDown.getAttribute("prevRowIndex");
        return iSelIndex;
    };

    /**
     * image specific
     * @param rowId
     * @param src
     */
    this.setSelectedImageSrc = function(rowId,src)
    {
        var objRow=document.getElementById(rowId);
        var imgTag = objRow.childNodes[0].childNodes[0];
        if(imgTag!=null && imgTag.tagName=="IMG")
        {
            imgTag.src="";
            imgTag.src=src;
        }
    };
    /**
     * image specific
     * @param rowId
     * @param isShowImg
     */
    this.showHideImg = function(rowId,isShowImg)
    {
        var objRow=document.getElementById(rowId);
        var imgTag = objRow.childNodes[0].childNodes[0];
        if(imgTag!=null && imgTag.tagName=="IMG")
        {
            if(!isShowImg)
                imgTag.style.visibility="hidden";
            else
                imgTag.style.visibility="visible";
        }
    };

    /**
     * THIS method is used to set dropdown item based on value which must be unique
     * @param sTableId
     * @param sValue
     */
    this.setSelectedRowByValue = function(sTableId,sValue)
    {
        var objTable=document.getElementById(sTableId+"List");
        var comboType=document.getElementById(sTableId+"List").getAttribute('combotype');
        var label=document.getElementById(sTableId+'Label');
        var lblElement = label.childNodes[0];
        var iSelectedIndex=0;
        for(var i=0;i<objTable.rows.length;i++)
        {
            if(objTable.rows[i].getAttribute("value")==sValue)
            {
                objTable.rows[i].className="selectedItem";
                iSelectedIndex = i;
            }
            else
            {
                if(objTable.rows[i].className=="selectedItem")
                    objTable.rows[i].className="divLinks";
            }
        }
        if(comboType=='true')
        {
            lblElement.innerHTML=objTable.rows[iSelectedIndex].cells[1].innerHTML;
        }
        objTable.setAttribute("prevRowIndex",iSelectedIndex);
    };

    /**
     * this method is used to disable or enable dropdown rows based on values
     * @param sTableId
     * @param sValue
     * @param isDisabled
     */
    this.setRowDisabled = function(sTableId,sValue,isDisabled)
    {
        var objTable=document.getElementById(sTableId+"List");
        for(var i=0;i<objTable.rows.length;i++)
        {
            if(objTable.rows[i].getAttribute("value")==sValue)
            {
                if(isDisabled && (objTable.rows[i].oldClick==null || objTable.rows[i].oldClick==undefined))
                {
                    objTable.rows[i].className="dropwdown_disable";
                    objTable.rows[i].oldClick=objTable.rows[i].onclick;
                    objTable.rows[i].oldMouseOver= objTable.rows[i].onmouseover;
                    objTable.rows[i].oldMouseOut= objTable.rows[i].onmouseout;
                    //                    objTable.rows[i].oldMouseUp=objTable.rows[i].onMouseUp;
//                    alert(objTable.rows[i].oldClick)
                    objTable.rows[i].onclick = null;
                    objTable.rows[i].onmouseover = null;
                    objTable.rows[i].onmouseout = null;
                    break;
                    //                    objTable.rows[i].onMouseup = null;
                }
                else if(!isDisabled)
                {
                    if(objTable.rows[i].className!="selectedItem")
                        objTable.rows[i].className="divLinks";
                    if(objTable.rows[i].onclick==null && objTable.rows[i].oldClick!=null)
                    {
//                        alert(objTable.rows[i].oldClick)
                        objTable.rows[i].onclick = objTable.rows[i].oldClick;
                        objTable.rows[i].onmouseover = objTable.rows[i].oldMouseOver;
                        objTable.rows[i].onmouseout = objTable.rows[i].oldMouseOut;
                        objTable.rows[i].oldClick=null;
                        objTable.rows[i].oldMouseOver= null;
                        objTable.rows[i].oldMouseOut= null;
                    }
                    //                    objTable.rows[i].onMouseUp = objTable.rows[i].oldMouseUp;
                }

            }
        }
    };
    // It returns dropdown main table id.
    this.getDropDownTableId=function(sDropDownId)
    {
        return sDropDownId+"toptbl";
    };

    //specific function : selected value is different : todo:change written by Lavanya
    this.updateSelectedItem = function(objTr,sDropdownTblId)
    {
        var sValue  = objTr.getAttribute("value"),tblDD;
        tblDD = document.getElementById(me.getDropDownTableId(sDropdownTblId));
        tblDD.tBodies[0].rows[0].cells[0].innerHTML = sValue;
    }

    this.openDropDown = function(sTableId)
    {
        me.mopen(sTableId,window.event,null,null);
    }


    this.closeDropDown=function(sTableId)
    {
        me.hideDropDownPopup(sTableId);
    }

};/**
 * SCROLL TABS
 *ref Url: https://joshreed.github.io/jQuery-ScrollTabs/
 * call function scrollTabs with respected id in component.
 * eg: $('#id').scrollTabs().
 * changes: round of the panel width.
 * change scrolltab icon color according to theme by adding and removing scroll_icon class.
 * change name of method size() to length.
 *
 *  JQuery Plugin to manage scrollable tabs. See the 'defaultOptions' data structure for available options for configuration. The plugin is configured jointly via
 *  these Javascript options and CSS classes to style how it is displayed. Some of the CSS is set here in the javascript so that users will have minimal
 *  configuration to make the tabs themselves work, and should only have to do configuration on how they want it styled. 
 *
 * Known Limitations:
 *  IE6 problems, it does not properly apply scrolling and therefore is always the 'full width.' Additionally, the multiple-class CSS styling does not work
 *  properly in IE6. We can work around this in the future by apply distinct class stylings that represent all the combinations. 
 *
 * Version:   2.0 
 * Author:    Josh Reed
 */
(function($) {
  $.fn.scrollTabs = function(opts){
    var initialize = function(state){
      opts = $.extend({}, $.fn.scrollTabs.defaultOptions, opts);

      if($(this).prop('tagName').toLowerCase() === 'ul'){
        this.itemTag = 'li';
      } else {
        this.itemTag = 'span';
      }
      
      $(this).addClass('scroll_tabs_container');
      if($(this).css('position') === null || $(this).css('position') === 'static'){
        $(this).css('position','relative');
      }
      
      $(this.itemTag, this).last().addClass('scroll_tab_last');
      $(this.itemTag, this).first().addClass('scroll_tab_first');
      
      $(this).html("<div class='scroll_tab_left_button'></div><div class='scroll_tab_inner'><span class='scroll_tab_left_finisher'>&nbsp;</span>"+$(this).html()+"<span class='scroll_tab_right_finisher'>&nbsp;</span></div><div class='scroll_tab_right_button'></div>");
      
      $('.scroll_tab_inner > span.scroll_tab_left_finisher', this).css({
        'display': 'none'
      });
      
      $('.scroll_tab_inner > span.scroll_tab_right_finisher', this).css({
        'display': 'none'
      });
      
      
      var _this = this;
      
      $('.scroll_tab_inner', this).css({
        'margin': '0px',
        'overflow': 'hidden',
        'white-space': 'nowrap',
        '-ms-text-overflow': 'clip',
        'text-overflow': 'clip',
        'font-size': '0px',
        'position': 'absolute',
        'top': '0px',
        'left': opts.left_arrow_size + 'px',
        'right': opts.right_arrow_size + 'px'
      });

      // If mousewheel function not present, don't utilize it
      if($.isFunction($.fn.mousewheel)){
        $('.scroll_tab_inner', this).mousewheel(function(event, delta){
          // Only do mousewheel scrolling if scrolling is necessary
          if($('.scroll_tab_right_button', _this).css('display') !== 'none'){
            this.scrollLeft -= (delta * 30);
            state.scrollPos = this.scrollLeft;
            event.preventDefault();
          }
        });
      }
      
      // Set initial scroll position
      $('.scroll_tab_inner', _this).animate({scrollLeft: state.scrollPos + 'px'}, 0);
      
      $('.scroll_tab_left_button', this).css({
        'position': 'absolute',
        'left': '0px',
        'top': '0px',
        'width': opts.left_arrow_size + 'px',
        'cursor': 'pointer'
      });
      
      $('.scroll_tab_right_button', this).css({
        'position': 'absolute',
        'right': '0px',
        'top': '0px',
        'width': opts.right_arrow_size + 'px',
        'cursor': 'pointer'
      });
      
      $('.scroll_tab_inner > '+_this.itemTag, _this).css({
        'display': '-moz-inline-stack',
        'display': 'inline-block',
        'zoom':1,
        '*display': 'inline',
        '_height': '40px',
        '-webkit-user-select': 'none',
        '-khtml-user-select': 'none',
        '-moz-user-select': 'none',
        '-ms-user-select': 'none',
        '-o-user-select': 'none',
        'user-select': 'none'
      });

       /* change scrolltab icon color according to theme by adding and removing scroll_icon class.*/
      var size_checking = function(){
        var panel_width = $('.scroll_tab_inner', _this).outerWidth();
          panel_width = Math.round(panel_width);
        
        if($('.scroll_tab_inner', _this)[0].scrollWidth > panel_width){
          $('.scroll_tab_right_button',_this).show();
          $('.scroll_tab_left_button',_this).show();
          $('.scroll_tab_inner',_this).css({left: opts.left_arrow_size + 'px', right: opts.right_arrow_size + 'px'});
          $('.scroll_tab_left_finisher',_this).css('display','none');
          $('.scroll_tab_right_finisher',_this).css('display','none');
          
          if($('.scroll_tab_inner', _this)[0].scrollWidth - panel_width == $('.scroll_tab_inner', _this).scrollLeft()){
            $('.scroll_tab_right_button', _this).addClass('scroll_arrow_disabled').addClass('scroll_tab_right_button_disabled').removeClass('scroll_icon');
          } else {
            $('.scroll_tab_right_button', _this).removeClass('scroll_arrow_disabled').removeClass('scroll_tab_right_button_disabled').addClass('scroll_icon');
          }
          if ($('.scroll_tab_inner', _this).scrollLeft() == 0) {
            $('.scroll_tab_left_button', _this).addClass('scroll_arrow_disabled').addClass('scroll_tab_left_button_disabled').removeClass('scroll_icon');
          } else {
            $('.scroll_tab_left_button', _this).removeClass('scroll_arrow_disabled').removeClass('scroll_tab_left_button_disabled').addClass('scroll_icon');
          }
        } else {
          $('.scroll_tab_right_button',_this).hide();
          $('.scroll_tab_left_button',_this).hide();
          $('.scroll_tab_inner',_this).css({left: '0px', right: '0px'});
          
          if($('.scroll_tab_inner > '+_this.itemTag+':not(.scroll_tab_right_finisher):not(.scroll_tab_left_finisher):visible', _this).length > 0){
            $('.scroll_tab_left_finisher',_this).css('display','inline-block');
            $('.scroll_tab_right_finisher',_this).css('display','inline-block');
          } 
        }
      };
      
      size_checking();
      
      state.delay_timer = setInterval(function(){
        size_checking();
      }, 500);
  
      var press_and_hold_timeout;
      
      $('.scroll_tab_right_button', this).mousedown(function(e){
        e.stopPropagation();
        var scrollRightFunc = function(){
          var left = $('.scroll_tab_inner', _this).scrollLeft(); 
          state.scrollPos = Math.min(left + opts.scroll_distance,$('.scroll_tab_inner', _this)[0].scrollWidth - $('.scroll_tab_inner', _this).outerWidth());
          $('.scroll_tab_inner', _this).animate({scrollLeft: (left + opts.scroll_distance) + 'px'}, opts.scroll_duration);
        };
        scrollRightFunc();
        
        press_and_hold_timeout = setInterval(function(){
          scrollRightFunc();
        }, opts.scroll_duration);
      }).bind("mouseup mouseleave", function(){
        clearInterval(press_and_hold_timeout);
      }).mouseover(function(){
        $(this).addClass('scroll_arrow_over').addClass('scroll_tab_right_button_over');
      }).mouseout(function(){
        $(this).removeClass('scroll_arrow_over').removeClass('scroll_tab_right_button_over');
      });
      
      $('.scroll_tab_left_button', this).mousedown(function(e){
        e.stopPropagation();
        var scrollLeftFunc = function(){
          var left = $('.scroll_tab_inner', _this).scrollLeft(); 
          state.scrollPos = Math.max(left - opts.scroll_distance,0);
          $('.scroll_tab_inner', _this).animate({scrollLeft: (left - opts.scroll_distance) + 'px'}, opts.scroll_duration);
        };
        scrollLeftFunc();
        
        press_and_hold_timeout = setInterval(function(){
          scrollLeftFunc();
        }, opts.scroll_duration);
      }).bind("mouseup mouseleave", function(){
        clearInterval(press_and_hold_timeout);
      }).mouseover(function(){
        $(this).addClass('scroll_arrow_over').addClass('scroll_tab_left_button_over');
      }).mouseout(function(){
        $(this).removeClass('scroll_arrow_over').removeClass('scroll_tab_left_button_over');
      });
      
      $('.scroll_tab_inner > '+this.itemTag+(this.itemTag !== 'span' ? ', .scroll_tab_inner > span' : ''), this).mouseover(function(){
        $(this).addClass('scroll_tab_over');
        if($(this).hasClass('scroll_tab_left_finisher')){
          $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_first', _this).addClass('scroll_tab_over').addClass('scroll_tab_first_over');
        }
        if($(this).hasClass('scroll_tab_right_finisher')){
          $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_last', _this).addClass('scroll_tab_over').addClass('scroll_tab_last_over');
        }
        if($(this).hasClass('scroll_tab_first') || $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_last', _this).hasClass('scroll_tab_first')){
          $('.scroll_tab_inner > span.scroll_tab_left_finisher', _this).addClass('scroll_tab_over').addClass('scroll_tab_left_finisher_over');
        }
        if($(this).hasClass('scroll_tab_last') || $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_first', _this).hasClass('scroll_tab_last')){
          $('.scroll_tab_inner > span.scroll_tab_right_finisher', _this).addClass('scroll_tab_over').addClass('scroll_tab_right_finisher_over');
        }
      }).mouseout(function(){
        $(this).removeClass('scroll_tab_over');
        if($(this).hasClass('scroll_tab_left_finisher')){
          $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_first', _this).removeClass('scroll_tab_over').removeClass('scroll_tab_first_over');
        }
        if($(this).hasClass('scroll_tab_right_finisher')){
          $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_last', _this).removeClass('scroll_tab_over').removeClass('scroll_tab_last_over');
        }
        if($(this).hasClass('scroll_tab_first') || $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_last', _this).hasClass('scroll_tab_first')){
          $('.scroll_tab_inner > span.scroll_tab_left_finisher', _this).removeClass('scroll_tab_over').removeClass('scroll_tab_left_finisher_over');
        }
        if($(this).hasClass('scroll_tab_last') || $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_first', _this).hasClass('scroll_tab_last')){
          $('.scroll_tab_inner > span.scroll_tab_right_finisher', _this).removeClass('scroll_tab_over').removeClass('scroll_tab_right_finisher_over');
        }
      }).click(function(e){
        e.stopPropagation();
        $('.tab_selected',_this).removeClass('tab_selected scroll_tab_first_selected scroll_tab_last_selected scroll_tab_left_finisher_selected scroll_tab_right_finisher_selected');
        $(this).addClass('tab_selected');
        
        var context_obj = this;
        if($(this).hasClass('scroll_tab_left_finisher')){
          context_obj = $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_first', _this).addClass('tab_selected').addClass('scroll_tab_first_selected');
        }
        if($(this).hasClass('scroll_tab_right_finisher')){
          context_obj = $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_last', _this).addClass('tab_selected').addClass('scroll_tab_last_selected');
        }
        if($(this).hasClass('scroll_tab_first') || $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_last', _this).hasClass('scroll_tab_first')){
          $('.scroll_tab_inner > span.scroll_tab_left_finisher', _this).addClass('tab_selected').addClass('scroll_tab_left_finisher_selected');
        }
        if($(this).hasClass('scroll_tab_last') || $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_first', _this).hasClass('scroll_tab_last')){
          $('.scroll_tab_inner > span.scroll_tab_right_finisher', _this).addClass('tab_selected').addClass('scroll_tab_left_finisher_selected');
        }
        
        // "Slide" it into view if not fully visible.
        scroll_selected_into_view.call(_this, state);
        
        opts.click_callback.call(context_obj,e);
      });
      
      // Check to set the edges as selected if needed
      if($('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_first', _this).hasClass('tab_selected'))
        $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_left_finisher', _this).addClass('tab_selected').addClass('scroll_tab_left_finisher_selected');
      if($('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_last', _this).hasClass('tab_selected'))
        $('.scroll_tab_inner > '+_this.itemTag+'.scroll_tab_right_finisher', _this).addClass('tab_selected').addClass('scroll_tab_right_finisher_selected');
    };
    
    var scroll_selected_into_view = function(state){
      var _this = this;
      
      var selected_item = $('.tab_selected:not(.scroll_tab_right_finisher, .scroll_tab_left_finisher)', _this);
      
      var left = $('.scroll_tab_inner', _this).scrollLeft();
      var scroll_width = $('.scroll_tab_inner', _this).width();
      if(selected_item && typeof(selected_item) !== 'undefined' && selected_item.position() && typeof(selected_item.position()) !== 'undefined'){
        if(selected_item.position().left < 0){
          state.scrollPos = Math.max(left + selected_item.position().left + 1,0);
          $('.scroll_tab_inner', _this).animate({scrollLeft: (left + selected_item.position().left + 1) + 'px'}, opts.scroll_duration);
        } else if ((selected_item.position().left + selected_item.outerWidth()) > scroll_width){
          state.scrollPos = Math.min(left + ((selected_item.position().left + selected_item.outerWidth()) - scroll_width),$('.scroll_tab_inner', _this)[0].scrollWidth - $('.scroll_tab_inner', _this).outerWidth());
          $('.scroll_tab_inner', _this).animate({scrollLeft: (left + ((selected_item.position().left + selected_item.outerWidth()) - scroll_width)) + 'px'}, opts.scroll_duration);
        }
      }
    };
    
    var ret = [];
    
    this.each(function(){
      var backup = $(this).html();
      
      var state = {};
      state.scrollPos = 0;
      initialize.call(this, state);
      
      var context_obj = this;
      
      ret.push({
        domObject: context_obj,
        state: state,
        addTab: function(html, position){
          if(typeof(position) === 'undefined'){
            position = $('.scroll_tab_inner > '+context_obj.itemTag, context_obj).length - (context_obj.itemTag === 'span' ? 2 : 0);
          } 
          
          $('.scroll_tab_inner > '+context_obj.itemTag+'.scroll_tab_last', context_obj).removeClass('scroll_tab_last');
          $('.scroll_tab_inner > '+context_obj.itemTag+'.scroll_tab_first', context_obj).removeClass('scroll_tab_first');
          backup = "";
          var count = 0;
          $('.scroll_tab_inner > '+context_obj.itemTag, context_obj).each(function(){
            if($(this).hasClass('scroll_tab_left_finisher') || $(this).hasClass('scroll_tab_right_finisher')) return true;
            if(position == count){
              backup += html;
            }
            backup += $(this).clone().wrap('<div>').parent().html();
            count++;
          });
          
          if(position >= count)
            backup += html;

          this.destroy();
          initialize.call(context_obj, state);
          this.refreshFirstLast();
        },
        removeTabs: function(jquery_selector_str){
          $('.scroll_tab_left_finisher', context_obj).remove();
          $('.scroll_tab_right_finisher', context_obj).remove();
          
          $(jquery_selector_str, context_obj).remove();
          
          $('.scroll_tab_inner > '+context_obj.itemTag+'.scroll_tab_last', context_obj).removeClass('scroll_tab_last');
          $('.scroll_tab_inner > '+context_obj.itemTag+'.scroll_tab_first', context_obj).removeClass('scroll_tab_first');

          this.refreshState();
        },
        destroy: function(){
          clearInterval(state.delay_timer);
          $(context_obj).html(backup);
          $(context_obj).removeClass('scroll_tabs_container');
        },
        refreshState: function(){
          $('.scroll_tab_inner > '+context_obj.itemTag+'.scroll_tab_last', context_obj).removeClass('scroll_tab_last');
          $('.scroll_tab_inner > '+context_obj.itemTag+'.scroll_tab_first', context_obj).removeClass('scroll_tab_first');
          backup = $('.scroll_tab_inner',context_obj).html();
          this.destroy();
          initialize.call(context_obj, state);
          this.refreshFirstLast();
        },
        clearTabs: function(){
          backup = "";
          this.destroy();
          initialize.call(context_obj, state);
          this.refreshFirstLast();
        }, 
        refreshFirstLast: function(){
          var old_last_item = $('.scroll_tab_inner > '+context_obj.itemTag+'.scroll_tab_last', context_obj);
          var old_first_item = $('.scroll_tab_inner > '+context_obj.itemTag+'.scroll_tab_first', context_obj);
          
          old_last_item.removeClass('scroll_tab_last');
          old_first_item.removeClass('scroll_tab_first');
          
          if(old_last_item.hasClass('tab_selected'))
            $('.scroll_tab_inner > span.scroll_tab_right_finisher', context_obj).removeClass('tab_selected scroll_tab_right_finisher_selected');
          if(old_first_item.hasClass('tab_selected'))
            $('.scroll_tab_inner > span.scroll_tab_left_finisher', context_obj).removeClass('tab_selected scroll_tab_left_finisher_selected');
          
          if($('.scroll_tab_inner > '+context_obj.itemTag+':not(.scroll_tab_right_finisher):not(.scroll_tab_left_finisher):visible', context_obj).length > 0){
            var new_last_item = $('.scroll_tab_inner > '+context_obj.itemTag+':not(.scroll_tab_right_finisher):visible', context_obj).last();
            var new_first_item = $('.scroll_tab_inner > '+context_obj.itemTag+':not(.scroll_tab_left_finisher):visible', context_obj).first();
            
            new_last_item.addClass('scroll_tab_last');
            new_first_item.addClass('scroll_tab_first');
            
            if(new_last_item.hasClass('tab_selected'))
              $('.scroll_tab_inner > span.scroll_tab_right_finisher', context_obj).addClass('tab_selected').addClass('scroll_tab_right_finisher_selected');
            if(new_first_item.hasClass('tab_selected'))
              $('.scroll_tab_inner > span.scroll_tab_left_finisher', context_obj).addClass('tab_selected').addClass('scroll_tab_right_finisher_selected');
          } else {
            $('.scroll_tab_inner > span.scroll_tab_right_finisher', context_obj).hide();
            $('.scroll_tab_inner > span.scroll_tab_left_finisher', context_obj).hide();
          }
        },
        hideTabs: function(domObj){
          $(domObj, context_obj).css('display','none');
          this.refreshFirstLast();
        },
        showTabs: function(domObj){
          $(domObj, context_obj).css({
            'display': '-moz-inline-stack',
            'display': 'inline-block',
            '*display': 'inline'
          });
          this.refreshFirstLast();
        },
        scrollSelectedIntoView:function(){
          scroll_selected_into_view.call(context_obj, state);
        }
      });
    });
    
    if(this.length == 1){
      return ret[0];
    } else {
      return ret;
    }
  };
  
  $.fn.scrollTabs.defaultOptions = {
    scroll_distance: 300,
    scroll_duration: 300,
    left_arrow_size: 22,
    right_arrow_size: 22,
    click_callback: function(e){
      var val = $(this).attr('rel');
      if(val){
        window.location.href = val;
      }
    }
  };
})(jQuery);
