
/*
  function checkInput(oTxt,iType) // Allows only specified type of values to be entered.
  function checkDateFormat(oTxt) // Allows values to be entered in date format.
  function RollOver(oRow) // Changes the row style when mouse is over
  function RollOut(oRow) // Changes the row style when mouse is moved out
  function Select(oRow) // Changes the row style when mouse is clicked
  function MoveToNext(oRow) // Changes the style when arrow keys are pressed  
*/

var TYPE_DISPLAY = 0;
var TYPE_STRING = 1;
var TYPE_NUMERIC = 2;
var TYPE_FLOAT = 3;
var TYPE_DATE = 4;
var TYPE_COMBOBOX = 5;//TYPE_COMBOBOX
var TYPE_CHECKBOX = 6;
var TYPE_RADIO = 7;
var TYPE_IMAGE = 8;
var TYPE_HIDDEN = 9;
var TYPE_SIMPLECOMBO = 10;
var TYPE_SPINFIELD = 11;
var TYPE_BUTTON = 12;
var TYPE_COMBOBOX2 = 13;
var TYPE_ACTIONS = 14;
var TYPE_SNOs = 15;
var TYPE_LONG = 16;
var TYPE_BYTE = 17;
var TYPE_SHORT = 18;
var TYPE_DATE_PICKER = 19;
var TYPE_TIME_PICKER = 20;
var TYPE_UPLOAD_FILE = 21;
var TYPE_COLOR_PICKER = 22;

//var TYPE_NUMERIC=2,TYPE_FLOAT=3,TYPE_DATE=4;



/**
  Allows values of type specified in parameter to be entered.
  @param objTxt -- TextField object
  @param iType -- Field type -- Default - 'string'
  values: string=1,numeric=2,float=3,date=4
**/
function checkInput(objTxt,iType,isAllowNegative,evt)
{
    var keycode;
    evt=evt?evt:window.event;
    
    /*if(window.event)
        evt = window.event;
    else
        evt = window.Event;*/

    keycode = evt.keyCode;
    var sValue;

    if(objTxt.getAttribute("cdatatype")!=null)
        iType=objTxt.getAttribute("cdatatype");    

    if (keycode != 9 && keycode != 16)
    {  //9-tab,16-shift+tab
        if (keycode != 37 && keycode != 39 && keycode != 8 && keycode != 46 && keycode != 36 && keycode != 35)
        {               // left arrow,right arrow, backspace, delete , Home , End
            if (iType == TYPE_STRING)
            {
                if(objTxt.getAttribute("maxlength")>0)
                {

                    if(objTxt.value.length < objTxt.getAttribute("maxlength") && objTxt.nodeName == "TEXTAREA")
                    {
                        var dvMsg = document.getElementById("msg" + objTxt.id);
                        dvMsg.innerHTML = "<span style='font-size:80%'>"+MsgHandler.getMsg(MsgConstants.CHAR_COUNT)+" : ("+objTxt.value.length+"/"+objTxt.getAttribute("maxlength")+") </span>";
                        dvMsg.style.display = "block";
                        dvMsg.style.color = "grey";
                    }
                    else if(objTxt.value.length == objTxt.getAttribute("maxlength"))
                    {
                        var dvMsg = document.getElementById("msg" + objTxt.id);
                        dvMsg.style.color = "";
                        dvMsg.style.display = "none";
                        /*var sValue=objTxt.value;
                        objTxt.value = sValue.substring(0, objTxt.getAttribute("maxlength"));//sValue.length-1);*/
                        Validation.showMessage("Value reaches maximum limit",Validation.WARNING_MSG,objTxt);
                        setTimeout(cross.createCallbackFunc(null,clearValidationMessage,[objTxt]),2000);                           
                    }
                }
            }
            else if (iType == TYPE_NUMERIC || iType == TYPE_LONG || iType == TYPE_BYTE || iType == TYPE_SHORT )//Numeric
            {
                var sValue=objTxt.value;
                if(isAllowNegative)
                    sValue = sValue.replace(/([^\-0-9])/g, ""); //objTxt.value = objTxt.value.replace(/([^/\d])/g,"");
                else
                    sValue = sValue.replace(/([^0-9])/g, "");

                if (sValue.lastIndexOf("-") > 0)
                    sValue = sValue.substring(0, sValue.lastIndexOf("-"));

                var MIN,MAX;
                if(iType == TYPE_BYTE)
                {
                    MIN=-128;
                    MAX=127;
                }
                else if(iType == TYPE_SHORT)
                {
                    MIN=-32768;
                    MAX=32767;
                }
                else if(iType == TYPE_NUMERIC)
                {
                    MIN=-2147483648;
                    MAX=2147483647;
                }
                else if(iType == TYPE_LONG)
                {
                    MIN=-9223372036854775808;
                    MAX=9223372036854775807;
                }

                var iValue=parseInt(sValue,10);
                var iLimit = 0;
                if(iValue > MAX) {
                    iLimit = MAX.toString().length;
                    while(iValue > MAX){
                        sValue = sValue.substring(0, iLimit);
                        iValue = parseInt(sValue,10);
                        iLimit--;
                    }
                }
                else if(iValue < MIN) {
                    iLimit = MIN.toString().length;
                    while(iValue < MIN){
                        sValue = sValue.substring(0, iLimit);
                        iValue = parseInt(sValue,10);
                        iLimit--;
                    }
                }

                objTxt.value = sValue;

                    /*Validation.setValidationStatus(false,objTxt,null,true,false,Validation.ERROR_INVALID,Constants.CONTROLTYPE_TXTBOX);
                else
                    Validation.clearMessage(objTxt,false);*/
            }
            else if (iType == TYPE_FLOAT)//Float
            {
                sValue=util.parseNumberValue(objTxt.value);
                if(isAllowNegative)
                    sValue = sValue.replace(/([^.\-0-9])/g, "");
                else
                    sValue = sValue.replace(/([^.0-9])/g, "");

                if (sValue.lastIndexOf("-") > 0)
                    sValue = sValue.substring(0, sValue.lastIndexOf("-"));
                if (sValue.indexOf(".") != sValue.lastIndexOf("."))
                    sValue= sValue.substring(0, sValue.lastIndexOf("."));

                if(sValue > Number.MAX_SAFE_INTEGER)
                    sValue= sValue.substring(0, sValue.length-1);
                objTxt.value = sValue;

                //checkNoOfDecimals(objTxt,0);

            }
            else if (iType == TYPE_DATE)//date
            {
                //checkDateFormat(objTxt);
            }
        }else if((keycode == 8 || keycode == 46) && iType == TYPE_STRING && objTxt.getAttribute("maxlength")>0 && objTxt.nodeName == "TEXTAREA")
        {
            if(objTxt.value.length < objTxt.getAttribute("maxlength"))
            {
                var dvMsg = document.getElementById("msg" + objTxt.id);
                dvMsg.innerHTML = "<span style='font-size:80%'>"+MsgHandler.getMsg(MsgConstants.CHAR_COUNT)+" : ("+objTxt.value.length+"/"+objTxt.getAttribute("maxlength")+") </span>";
                dvMsg.style.display = "block";
                dvMsg.style.color = "grey";
            }
        }
    }

    var isFormatNumber=objTxt.getAttribute("isFormatNumber")==1;

    if(isFormatNumber)
    {
        if (objTxt.value && (iType == TYPE_NUMERIC || iType == TYPE_FLOAT || iType == TYPE_LONG || iType == TYPE_BYTE || iType == TYPE_SHORT ))//Numeric
        {
            /*if(iType == TYPE_FLOAT)
            {
                if(objTxt.value!="-" && objTxt.value!=".")
                    objTxt.value = util.formatNumberToString(objTxt.value);
            }
            else*/
            if(!isNaN(objTxt.value))
                objTxt.value = util.formatNumberToString(objTxt.value);
        }
    }


    if(objTxt.nodeName!="TEXTAREA" && keycode==13) //enter key
    {
        
        if(typeof checkInput.fnCallback=="object")
        {
            //alert("calling.....");
            var fnCallback=checkInput.fnCallback[0];
            //var fnCallbackParams=checkInput.fnCallback[1];            
            fnCallback.apply(this, [objTxt,evt]);
            //fnCallback(objTxt,evt);
        }
        //cross.fireEvent2(objTxt, 'blur');
    }
}



function clearValidationMessage(objField)
{
    Validation.clearMessage(objField);
}

function checkNoOfDecimals(objInput,iNoOfDecimals)
{
    //alert(objInput.value+"-----------"+iNoOfDecimals+"-----------"+util.roundValue(objInput.value,iNoOfDecimals))
    var sValue=objInput.value.toString();
    sValue=util.parseNumberValue(sValue);

    if(!isNaN(sValue) && iNoOfDecimals!=-1)// && !isNaN(objInput.value))
    {
        if(iNoOfDecimals <= 0)
            iNoOfDecimals=clAppBuffer.getNumOfDecimals();

        var isFormatNumber=objInput.getAttribute("isFormatNumber")==1;
        objInput.value=util.roundValue(sValue,iNoOfDecimals,isFormatNumber);
    }
}

function formatNumber(objInput)
{
    objInput.value=util.formatNumberToString(objInput.value);
}

 function toggleRevealPassword(objThis,sInputId)
{
    var objPassword = document.getElementById(sInputId);
    var iType = objPassword.getAttribute("ipwdattr");
    if(iType==1)
    {
        objPassword.setAttribute("type","password");
        objPassword.setAttribute("ipwdattr",0) ;
        util.removeClass(objThis,"crm-hide-eye");
        util.addClass(objThis,"crm-eye")
    }
    else{
        objPassword.setAttribute("type","text");
        objPassword.setAttribute("ipwdattr",1) ;
        util.removeClass(objThis,"crm-eye");
        util.addClass(objThis,"crm-hide-eye")
    }


}



if(typeof window["loadResources"]!="function")
{    

var iScriptCount=0;
var iScriptTotal=0;
var iStyleCount=0;
var iStyleTotal=0;
var iResCount=0;


var callBackFnHandler;
var objResourcesToDelete=[];
var isLoadInlineScripts=false;
var sInlineScript=null;
var bStopResLoad=false;
//var hashBodyContent=true;

function loadResources(objDivDynContent,fnCallBack)
{
  //   clearStopLoading();
    //hashBodyContent=false;
    callBackFnHandler=fnCallBack;
    loadHtmlResources(objDivDynContent,true);
   //  alert("3333r")
	loadHtmlResources(objDivDynContent,false);
    //alert("r")
    removeResources(document.getElementsByTagName("HEAD")[0]);
}

/*
function loadScripts(objDivTag)
{

}
function loadStyles(objDivTag)
{
 loadHtmlResources(objDivTag)
}
*/


function loadHtmlResources(objDivTag,isStyle)
{

	var objResources ;
    if(isStyle)
       objResources=objDivTag.getElementsByTagName("LINK");
    else
      objResources=objDivTag.getElementsByTagName("SCRIPT");

	var objResourceTag;
  //  alert(bStopResLoad)

	iScriptCount=0;
	iScriptTotal=0;
    isLoadInlineScripts=false;
	var objHeadTag=document.getElementsByTagName("HEAD")[0];
    var sSrc;
    /*for (var i = 0; i < objResources.length; i++)
    {
      writeToLog("Res-Len-------"+objResources[i].href)
    }*/

   // objResources.sort()

    iScriptTotal=objResources.length;

	for (var i = 0; i < objResources.length; i++)
	{
       if(bStopResLoad)
       {   bStopResLoad=false;
           break;
       }

       if(isStyle)
       {
          objResourceTag=document.createElement("LINK");
          objResourceTag.type="text/css";
         if(objResourceTag.async)
            objResourceTag.async = true;  
          objResourceTag.rel="stylesheet";
          sSrc=objResources[i].href;
       }
      else
       {

         objResourceTag=document.createElement("SCRIPT");
		 objResourceTag.id="dyn_"+(iResCount++);
		 objResourceTag.type="text/javascript";
        if(objResourceTag.async)
            objResourceTag.async = true;
		 objResourceTag.language="javascript";

         sSrc=objResources[i].src;
        // loadScript(sSrc,(iResCount++));

        // writeToLog(sSrc);
          // document.removeChild(objResources[i]);
       //  alert("--")
       }



        if( (isStyle && isIncludeResource(sSrc)) || !isStyle )
        {  //    alert(sSrc)
              if(isStyle)
              {
                iStyleTotal++;
                  //<script type="text/javascript">
                  //ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';  
                  objResourceTag.href=sSrc;
                  objHeadTag.appendChild(objResourceTag);
              }
             else
              {

               try
               {

                    //iScriptTotal++;
                    if(sSrc.length==0) // in case of inline script
                    { // alert(objResources[i].text)
                        objResourceTag.text=objResources[i].text;
                      //  objResources[i].setAttribute("objResources[i]")
                    }
                    else
                    {   objResourceTag.src = sSrc;


                    }
                      objHeadTag.appendChild(objResourceTag);

               }
               catch(ee) { alert(ee.message); }

              }

                if(sSrc.length==0)
                {
                  //  alert(objResources[i].getAttribute("isLineScript"))
                   // alert(objResources[i].innerHTML)
                   if(objResources[i].getAttribute("isLineScript"))
                   {
                      sInlineScript=objResources[i].innerHTML;

                      // eval(objResources[i].innerHTML)
                   }
                  trackScripts(objDivTag,false,isStyle);
                //    alert(sInlineScript)

                }
                else
                {
                    if (objResourceTag.readyState) //IE ,opera
                    {
                            objResourceTag.onreadystatechange = function()
                            {
                                /*if(isStyle)
                                    writeToLog("loaded:"+this.href)
                                else
                                    writeToLog("loaded:"+this.src)*/
                                if (this.readyState == "loaded" ||this.readyState == "complete")
                                    trackScripts(objDivTag,false,isStyle);
                            };
                    }
                   else //Other browsers
                   {
                        objResourceTag.onload = function(event)
                        {
                           // alert("www")
                        //    if(isStyle)
                             //writeToLog("loaded:"+this.href)
                         //  else
                           //  writeToLog("loaded:"+this.src)
                            trackScripts(objDivTag,false,isStyle);
                         };
                    }
                }
        }
      /* else
        {
        // alert(objResources[i].innerText)
         alert(objResources[i].innerHTML)
        }*/

	}
    //isLoadInlineScripts=true;
      //trackScripts(objDivTag,true,isStyle);// load inlne scritps
}

function loadScript(sSrc,iResCount)
{
        var objResourceTag=document.createElement("SCRIPT");
		 objResourceTag.id="dyn_"+(iResCount);
		 objResourceTag.type="text/javascript";
		 objResourceTag.language="javascript";
        var objHeadTag=document.getElementsByTagName("HEAD")[0];
         objResourceTag.src = sSrc;
        if (objResourceTag.readyState) //IE ,opera
            {
                    objResourceTag.onreadystatechange = function()
                    {
                        /*if(isStyle)
                            writeToLog("loaded:"+this.href)
                        else
                            writeToLog("loaded:"+this.src)*/
                       // if (this.readyState == "loaded" ||this.readyState == "complete")
                        //    trackScripts(objDivTag,false,isStyle);
                    };
            }
           else //Other browsers
           {
                objResourceTag.onload = function(event)
                {
                   // alert("www")
                //    if(isStyle)
                     //writeToLog("loaded:"+this.href)
                 //  else
                   //  writeToLog("loaded:"+this.src)
                   // trackScripts(objDivTag,false,isStyle);
                 };
            }

       return objResourceTag;
}

function trackScripts(objDivTag,isLoadInline,isStyle)
{
  trackScripts(objDivTag,isLoadInline,false);
}
function trackScripts(objDivTag,isLoadInline,isStyle)
{
  if(isStyle)
   {
     iStyleCount++;

   }
  else
  {
    isStyle=false;
   if(!isLoadInline)
   {  iScriptCount++;
       //isLoadInlineScripts=false;
   }
    //else
   //{
       isLoadInlineScripts=true;
       // writeToLog(iScriptTotal+"--style-- "+iScriptCount+"--"+isLoadInlineScripts)
   //}

   //}
      //util. writeToLog(iScriptTotal+"--style-- "+iScriptCount+"--"+isLoadInlineScripts)
     // util. writeToLog("dddddddddddd----"+((isLoadInlineScripts && ( iScriptTotal<=iScriptCount  ||  iScriptTotal==iScriptCount ) )));
  }


     //isLoadInlineScripts &&
    msg.setPageStatus("  ... Loading "+iScriptCount+" ( "+iScriptTotal+" )");
  // alert("set ")
  if( (isLoadInlineScripts && ( iScriptTotal<=iScriptCount  ||  iScriptTotal==iScriptCount ) )
             //            &&
           // (isStyle &&iStyleTotal==iStyleCount)
     ) //!isStyle  &&
	{
        //   alert(iScriptTotal+"--"+iScriptCount+"  "+isLoadInlineScripts)
     //    writeToLog("Callback for init "+isStyle)
         //writeToLog(iStyleTotal+"--style-- "+iStyleCount+"--"+isLoadInlineScripts)
         //alert("call back")

		/*var objScripts = objDivTag.getElementsByTagName("script");
		var objScriptTag;
        var isInitScript=false;

		for (var i = 0; i < objScripts.length; i++)
		{
			if(objScripts[i].src.length==0)// assuming only script with src as empty
			{
                isInitScript=true;
				objScriptTag=document.createElement("SCRIPT");
				objScriptTag.type="text/javascript";
				objScriptTag.language="javascript";
				objScriptTag.text=objScripts[i].text;

                document.getElementsByTagName("HEAD")[0].appendChild(objScriptTag);

                if (objScriptTag.readyState) //IE
                {
                        objScriptTag.onreadystatechange = function()
                        {
                            if (this.readyState == "loaded"
                                    ||this.readyState == "complete")
                            {
                                invokeCallBack();
                            }
                        };
                }
               else //Other browsers
               {
                  //  objScriptTag.onload = function() // onload is getting fired for inline script
                    //{
                     //alert("jjj");
                     invokeCallBack(); // need to check
                   //};
                }




                objScripts[i].parentNode.removeChild(objScripts[i]);

                //eval(objScriptTag.text);

			}
		}
     if(!isInitScript)    // assuming only one script without src in a jsp page
        invokeCallBack();
        */
       // alert("invokeCallBack:"+iScriptTotal+"-- scripts sum -"+iScriptCount)
       if(sInlineScript)
       {  // alert(iScriptTotal+","+iScriptCount)
          // alert(clTinyMce+"  "+tinymce+"  "+tinyMCE)
           //alert(sInlineScript)
          eval(sInlineScript)
       }
       if(iScriptTotal==iScriptCount)
        invokeCallBack();
   }
  else if(isLoadInline &&  iScriptTotal!=iScriptCount)
  {
     // alert(isLoadInline+","+iScriptTotal+","+iScriptCount)
     //alert('Failed to load script(s), could be invalid script name or path')
  }

}




function invokeCallBack()
{
    if(iScriptTotal<=0 || iScriptTotal==iScriptCount)
    { //  alert(iScriptTotal+"-"+iScriptCount)
           msg.closePageStatus();    
    }

    if(typeof(callBackFnHandler)=="function")
    {
        ///alert("---")
        callBackFnHandler();
        callBackFnHandler=null;
    }

     //bStopResLoad=false;

  //  hashBodyContent=true;
}

function loadStyles(objDivDynContent)
{
    var objStyles = objDivDynContent.getElementsByTagName("LINK");
	var objStyleTag;
	var objHeadTag=document.getElementsByTagName("HEAD")[0];

	for (var i = 0; i < objStyles.length; i++)
	{
        if(isIncludeResource(objStyles[i].href))
        {
            objStyleTag=document.createElement("LINK");
            objStyleTag.type="text/css";
            objStyleTag.rel="stylesheet";
            objStyleTag.href=objStyles[i].href;
            objHeadTag.appendChild(objStyleTag);


//             writeToLog("CSS: "+objStyles[i].href)
        }
	}
}

function isIncludeResource(sSrc)
{
    if(objResourcesToDelete)
    {
//                writeToLog(objResourcesToDelete[]+"=="+sSrc)
        for(var j=0;j < objResourcesToDelete.length; j++)
        {
           // alert(objResourcesToDelete[j].nodeName+"=="+sSrc)
         //   alert("isIncludeResource="+objResourcesToDelete[j].href+","+objResourcesToDelete[j].src)
            if(objResourcesToDelete[j]!=null &&
                    (
                            objResourcesToDelete[j].href && objResourcesToDelete[j].href==sSrc    //CSS
                           /* ||
                            objResourcesToDelete[j].src && objResourcesToDelete[j].src==sSrc*/
                    )
                    )
            {

                objResourcesToDelete[j]=null;
                return false;
            }
        }
    }


    
    return true;
}

function removeResources(objHeadTag)
{       //  alert("removeResources")
    if(objResourcesToDelete)
    {
        for (var j = 0; j < objResourcesToDelete.length; j++)
        {
            if (objResourcesToDelete[j] != null)
            {
                try
                {
                    //  alert("remove---"+objResourcesToDelete[j].href+","+objResourcesToDelete[j].src)
                    objHeadTag.removeChild(objResourcesToDelete[j]);
                }
                catch (e)
                {
                }
            }
        }
        objResourcesToDelete = [];
    }
}

/////// Resource unloading functions
/**
 * srikanth ---ll be used later
 * @param objDivDynContent
 */
function unloadInitScripts(objDivDynContent)
{
     var objHeadTag = document.getElementsByTagName("HEAD")[0];
     var objScripts= objHeadTag.getElementsByTagName("SCRIPT");

  for (var i = 0; i < objScripts.length; i++)
	{

       if( util.trim(objScripts[i].src).length==0)//if(util.trim(sSrc).length>0)
			{
               try
                {
                     objScripts[i].parentNode.removeChild(objScripts[i])

                }
                catch(e)
                {
                    alert(e)
                }
            }
    }
}
function stopResourceLoading()
{
    bStopResLoad=true;
    sInlineScript=null;
}

function unloadResources(objDivDynContent)
{
    unloadResByType(objDivDynContent,2);//"LINK"
   // unloadResByType(objDivDynContent,1);//"SCRIPT"
}

function unloadResByType(objDivDynContent,sResType)
{
	var sTagName="";
	if(sResType==1)
		sTagName="SCRIPT";
	else if(sResType==2)
		sTagName="LINK";

	var objResToDelete = objDivDynContent.getElementsByTagName(sTagName);
	var objHeadTag = document.getElementsByTagName("HEAD")[0];
	var objTotalResources,sSrc,sSrc2;

	for (var i = 0; i < objResToDelete.length; i++)
	{
		if(sResType==1)
			sSrc=objResToDelete[i].src;
		else if(sResType==2)
			sSrc=objResToDelete[i].href;

		if(util.trim(sSrc).length>0)
		{
			objTotalResources = objHeadTag.getElementsByTagName(sTagName);
			//alert("objTotalResources.length... "+objTotalResources.length);
			for (var j = 0; j < objTotalResources.length; j++)
			{
				if(sResType==1)
					sSrc2=objTotalResources[j].src;
				else if(sResType==2)
					sSrc2=objTotalResources[j].href;

				if(sSrc==sSrc2)
				{  // alert("unload--"+sSrc)
                    if(!objResourcesToDelete)
                        objResourcesToDelete=[];

                    objResourcesToDelete[objResourcesToDelete.length]=objTotalResources[j];
				}
               /* else if(sSrc.length==0)
                {
                  objHeadTag.removeChild(objTotalResources[j]);
                }*/
			}
		}
	}
}

}var CLButtonUtil = new function()
{
    this.enableButton = function(clButton)
    {
        var clClickEvent= clButton.oldClick;//getAttribute('oldClick');
        if (clClickEvent)
        {
            //clButton.onClick =  clClickEvent;
            clButton.onclick =clButton.oldClick;// clButton.getAttribute("oldClick");
            clButton.onMouseOver = clButton.oldMouseOver;//clButton.getAttribute("oldMouseOver");
            clButton.onMouseOut = clButton.oldMouseOut;//clButton.getAttribute("oldMouseOut");
            clButton.onMouseUp =  clButton.oldMouseUp;//clButton.getAttribute("oldMouseUp");
        }
        clButton.className = 'nPrimaryButton';
    };

    this.disableButton = function (clButton)
    {
        if(clButton.onclick)
        {
            clButton.oldClick=clButton.onclick;
            clButton.oldMouseOver= clButton.onMouseOver;
            clButton.oldMouseOut= clButton.onMouseOut;
            clButton.oldMouseUp=clButton.onMouseUp;

            clButton.onclick =null;
            clButton.onMouseOver = null;
            clButton.onMouseOut = null;
            clButton.onMouseUp = null;
        }
        clButton.className = 'dButton';
    };

    //function handleEnterKey(){}
    this.onMouseOver = function(clButton)
    {
        //if(clButton.className!='disableButton2')
        // clButton.className='button2MouseOver';

        if(clButton.className!='dButton')
        {
            if(clButton.className=='nPrimaryButton')
                clButton.className='mPrimeOverButton';
            else if(clButton.className=='nButton')
                clButton.className='mOverButton';
        }
    };
    this.onMouseOut = function (clButton)
    {
        if(clButton.className!='dButton')
        {
            if(clButton.className=='mPrimeOverButton')
                clButton.className='nPrimaryButton';
            else if(clButton.className=='mOverButton')
                clButton.className='nButton';
        }
    };

    this.onMouseDown = function (clButton)
    {
        //if(clButton.className!='disableButton2')
        //  clButton.className='buttonPress';

        if(clButton.className!='dButton')
        {
            if(clButton.className=='mPrimeOverButton')
                clButton.className='pButton';
            else if(clButton.className=='mOverButton')
                clButton.className='pSecondaryButton';
        }

    };
    this.onMouseUp = function (clButton)
    {
        if(clButton.className!='dButton')
        {
            if(clButton.className== 'pButton')
                clButton.className='nPrimaryButton';
            else if(clButton.className== 'pSecondaryButton')
                clButton.className='nButton';
        }
    };


    this.checkEnterKey = function (event)
    {
        var code;
        if (document.layers)
        {
            code = event.which;
        }
        else
        {
            code = event.keyCode;
        }

        if (code == 13)
        {
            //var clSource=event.source;
            //clSource.onClick();
            //checkPreSubmit (document.logonForm);      return false;
        }
        else
        {
            return true;
        }
    };

};
var clNotifyMessage = new function()
{
    var me=this,t;
    this.clNotifyMsgDTOs = null;
    this.sNotifyMsgUrl=null;
    this.sNotifyCountUrl=null;
    this.iListenerId=0;
    this.iTimeInterval=0;
    this.iReminderTimeout=0;
    this.iReminderId=0;


    this.iIndex;
    this.isList = false;
    this.isBack = false;
    this.isDisplayDlg = false;
    this.isSetCenterUI = false;
    this.isToastWindow = false;
    this.sIdExt = "dlg";
    this.sUrl = null;
    this.sIgnoreUrl = null;
    this.DIRECTION_LEFT = 1;
    this.DIRECTION_RIGHT = 2;
    this.g_iCount=-1;
    this.g_isConnected=false;
    app.registerInstance("NotifyMessage",this);

    this.onWLoadSetData = function(isToastWindow,sUrl,sIdExt,sIgnoreUrl,iContainerHeight,fromDashlet)
    {
        me.isToastWindow = isToastWindow;
        me.sUrl = sUrl;
        me.sIdExt=sIdExt;
        me.sIgnoreUrl = sIgnoreUrl;
        me.iContainerHeight = iContainerHeight;
        me.fromDashlet = fromDashlet;
    };
    this.onLoadSetMsgDTOs = function(clNotifyMsgDTOs)
    {
        //alert(encodeURI(clNotifyMsgDTOs))
        clNotifyMsgDTOs=document.getElementById("dvNotifyMsgData").innerHTML;
        me.clNotifyMsgDTOs = JSON.parse(clNotifyMsgDTOs);
    };

    /**
     * This function is used for set the NotifyMessage  Encrypted Url's
     */
    this.onWLoadGetNotifyConfigData = function(sNotifyCountUrl,sNotifyMsgUrl,sNotifyConfigUrl)
    {
        me.sNotifyCountUrl = sNotifyCountUrl;
        me.sNotifyMsgUrl = sNotifyMsgUrl;
        con.sendNonUItRequest(sNotifyConfigUrl,null,null,"clNotifyMessage.arhConfigData",null,false);
    };

    this.arhConfigData=function(sConfigData)
    {
        sConfigData=sConfigData.split(",");
        me.arhNotifyCount(sConfigData[1],sConfigData[2],sConfigData[3]);  //sConfigData[3]-- reminders count

        /*if(clAppBuffer.isSupportSSE())
        {
            clAsyncWatcher.registerAsyncWatcher();
        }
        else*/
        {
            var iTimeInterval=parseInt(sConfigData[0]);
            iTimeInterval=(iTimeInterval?iTimeInterval:1);
            me.iTimeInterval=(1000*60*iTimeInterval);
            clearInterval(t);
            t = setInterval(me.getCount,me.iTimeInterval);
        }
    };
    /**
     * This function is used for get the NotifyMessages  based on time interval
     */
    this.refreshNotifyCount = function()
    {
       // if(clAppBuffer.isSupportSSE())
        {
            clearInterval(t);
            //var iInterval = (1000*60*30);
            me.getCount();
            t = setInterval(me.getCount, me.iTimeInterval);
        }
    };

    /**
     * This function is used for show or hide the Notify Message Dialog
     */
    this.onClkShowNotifyMsgDlg= function(objThis)
    {
        var iNotifyCount = parseInt(document.getElementById("dvCount").innerHTML);
        if(iNotifyCount > 0)
            msg.showToastWindowFromURL(objThis,'common/notifymsg!getMessages.do?isToastWindow=true&limit=4',true,null,Constants.PRONG_TOP,false,null,null,true,true,Constants.SCOPE_DIALOG,null,null,null,null,false,false)
    };

    this.removeNotifyDlg = function(element,isRegister,evt)
    {
        var objDvNotify = document.getElementById("dvNotify");
        if(objDvNotify) {
            var iWidth, iHeight, iPositions, iTargetX=0, iTargetY=0;
            iWidth = objDvNotify.offsetWidth;
            iHeight = objDvNotify.offsetHeight;
            iPositions = cross.getPosition(objDvNotify);
            if (evt)
            {
                evt = cross.getEvent(evt);
                iTargetX = evt.clientX + document.body.scrollLeft;
                iTargetY = evt.clientY + document.body.scrollTop;
            }
            if((iTargetX>=iPositions[0] && iTargetX<=(iPositions[0]+iWidth)) && (iTargetY>=iPositions[1] && iTargetY<=(iPositions[1]+iHeight)))
            {
                return true;
            }
            else
            {
                util.removeClass(element,'notifyBtnMClk');
                objDvNotify.parentNode.removeChild(objDvNotify);
            }
        }
        if(me.iListenerId >= 0)
            cross.unregisterEventListener(me.iListenerId);
    };

    this.getCount = function()
    {
        if(!me.g_isConnected)
        {
            me.g_isConnected=true;

            function handleResponse(sResponse)
            {
                var arrResponse=eval(sResponse);
                var arrNotifyResponse = null,arrReminderInfo=null;

                //var subject="",sRelatedTypeTitle="",sRelatedToTitle="",sEventDate="";
                var iDueIn= 0,iReminderId= 0;//,iModuleId= 0,iRelatedToId=0,iRelatedTypeId=0;

                arrNotifyResponse=arrResponse[0];

                arrReminderInfo = arrResponse[1];

                me.arhNotifyCount(arrNotifyResponse[0],arrNotifyResponse[1],0);//arrNotifyResponse[2]-- reminder count is not required --sri



                if(arrReminderInfo!=null)
                {
                    iReminderId = arrReminderInfo[0];
                    iDueIn = arrReminderInfo[1];

                    if(me.iReminderId != iReminderId  && arrNotifyResponse[2]>0 && parseInt(iDueIn)>=0)
                    {
                        if(me.iReminderTimeout>0) {
                            clearTimeout(me.iReminderTimeout);
                            me.iReminderTimeout=0;
                        }

                        var iTimeInterval = parseInt(iDueIn);
                        me.iTimeInterval = (1000 * 60 * iTimeInterval);
                        me.iReminderTimeout = setTimeout(function () {

                            var sUrl = "common/activities!getReminders.do?iCurReminderId="+iReminderId+"&isFromDlg=true";
                            var arrActions = new Array();

                            //arrActions[0] = MsgHandler.getMsg(MsgConstants.CLOSE) + "|";
                            //arrActions[1] = MsgHandler.getMsg(MsgConstants.CANCEL) + "|";

                            if(!getDialogBox("reminderDlg"))
                            {
                                var clReminderDlg = new DialogBox("reminderDlg", null, 100, 50, 450, 540, sUrl, true, null, false, true, null, null, null, true, null, null, null, null, true);
                                clReminderDlg.setCenter();
                                clReminderDlg.show();
                            }

                            me.iReminderId = iReminderId;

                            util.blinkBrowserTab("You have new Reminder(s)",document.title);

                            /*var oldTitle = document.title;
                            var msg = "you have one new Reminder!";
                            var timeoutId = false;

                            function blink() {
                                document.title = document.title == msg ? oldTitle : msg;//Modify Title in case a popup

                                if(document.hasFocus())//Stop blinking and restore the Application Title
                                {
                                    document.title = oldTitle;
                                    clearInterval(timeoutId);
                                }
                            };
                            timeoutId = setInterval(blink, 5000);//Initiate the Blink Call*/

                        }, me.iTimeInterval);


                    }

                    // dont use toggleBackground in Notifications
                    //  util.toggleBackground(false);


                    arrReminderInfo = null;

                }
                else
                {
                    if(me.iReminderTimeout>0) {
                        clearTimeout(me.iReminderTimeout);
                        me.iReminderTimeout=0;
                    }
                }

            };

            con.sendNonUItRequest(me.sNotifyCountUrl, null, handleResponse,null, con.RESPONSE_HTML);
        }
    };


    /*this.showConfirmHandler = function(iTransId,iModuleId,iStatus)
    {

        if (iStatus == Constants.YES)
            clReminders.onClkSnoozeDlg(iTransId,iModuleId);

        else if(iStatus == Constants.NO)
            clReminders.onClkDismiss(iTransId,false,iModuleId);
    }*/


    this.onCCMMessageReceive=function(sNotifyData)
    {
        var clNotifyMsgDTO = JSON.parse(sNotifyData);
        clNotifyMsgDTO.iCount = 1;
        me.clNotifyMsgDTOs = [clNotifyMsgDTO];
        me.sUrl = "common/notifymsg!setView.do";
        var dvNotifyCount = document.getElementById("dvCount");
        var iNotifyCount = parseInt(dvNotifyCount.innerHTML);
        iNotifyCount++;
        dvNotifyCount.innerHTML = iNotifyCount;

        msg.showToastMsg(me.getMessgeHTML(clNotifyMsgDTO),60*1000,true);

        //con.sendPostRequest("common/notifymsg!getToastMessageGrid.do?sNotifyMsgDTO="+sNotifyData, null, null, "clNotifyMessage.arhToastMsgGrid", false);

        //msg.showToastMsg(sData,20000);

        //sData=sData.split(',');
        //me.arhNotifyCount(sData[0],sData[1],sData[2]);
    };
    this.arhToastMsgGrid = function(sResponse)
    {
        msg.showToastMsg(sResponse,20000);
        //toastr.options.timeOut = 0;
        //toastr.options.extendedTimeOut = 0;
        /*toastr.options.positionClass = "toast-bottom-right";
        toastr.options.showMethod = "slideDown";
        toastr.options.hideMethod = "slideUp";
        toastr.options.rtl = true;
        toastr.info("<div class='bootstrap'>"+sResponse+"</div>");*/
    };


    this.getMessgeHTML=function(clNotifyMsgDTO)
    {
        var sMainMsgPanelClass,sMsgSubTitleClass,sMainPanelClick;
        var msgPanelHeight="110";

        var iMsgId,iMsgType,iTransId,iCount,iModuleId,iCategoryId,iIconBGColor;
        var sMsgTitle,sMsg,sCategoryName,sModuleName,sPicName,sCreatedOn,sContentType,sCreatedBy,sMsg2;
        var chIconChar;
        var byPriority, byStatus,byViewType,byDismissAction;
        var iTargetModuleId,iTargetTransId;
        var iTransStatus;
        var iCreatedUserId;

        iMsgId=clNotifyMsgDTO.iMsgId;
        iMsgType=clNotifyMsgDTO.iMsgType;
        iTransId=clNotifyMsgDTO.iTransId;
        iCount=clNotifyMsgDTO.iCount;
        iModuleId=clNotifyMsgDTO.iModuleId;
        iCategoryId=clNotifyMsgDTO.iCategoryId;
        iIconBGColor=clNotifyMsgDTO.iIconBGColor;

        sMsgTitle=clNotifyMsgDTO.sMsgTitle;
        sMsg=clNotifyMsgDTO.sMsg;
        sCategoryName=clNotifyMsgDTO.sCategoryName;
        sModuleName=clNotifyMsgDTO.sModuleName;
        sPicName=clNotifyMsgDTO.sPicName;
        sCreatedOn=clNotifyMsgDTO.sCreatedOn;
        sContentType=clNotifyMsgDTO.sContentType;
        sCreatedBy=clNotifyMsgDTO.sCreatedBy;
        sMsg2=clNotifyMsgDTO.sMsg2;

        chIconChar=clNotifyMsgDTO.chIconChar;
        byPriority=clNotifyMsgDTO.byPriority;
        byStatus=clNotifyMsgDTO.byStatus;
        byViewType=clNotifyMsgDTO.byViewType;
        byDismissAction=clNotifyMsgDTO.byDismissAction;
        iTargetModuleId=clNotifyMsgDTO.iTargetModuleId;
        iTargetTransId=clNotifyMsgDTO.iTargetTransId;
        iTransStatus=clNotifyMsgDTO.iTransStatus;
        iCreatedUserId=clNotifyMsgDTO.iCreatedUserId;

        if (iCount<=1 && iTransStatus==5)
        {
            sMainMsgPanelClass = "mainMsgPanelDeprecated";
            sMsgSubTitleClass = "msgSubTitleDeprecated";
            sMainPanelClick = "";
        }
        else {
            sMainMsgPanelClass = "";
            sMsgSubTitleClass = "";
            sMainPanelClick = "clNotifyMessage.onClkGetMsgView(this,'Notifications','"+sModuleName+"','"+sCategoryName+"',event);";
        }


        var statusClass = "status";


        if (byStatus == 0)//constants.INOTIFICATION_STATUS_UNREAD}")
            statusClass = "statusUnRead";
        else if (byStatus == 1)//constants.INOTIFICATION_STATUS_LIST}")
            statusClass = "statusList";
        else if (byStatus == 3)//constants.INOTIFICATION_STATUS_DEPRECATED}")
            statusClass = "statusDeprecated";


        var sHtml ='<div class="bootstrap" style="width:400px">';
        sHtml += '<div class="container-fluid notifyContainer" id="dvInnNotify" style="width: 100%;">';

        sHtml += '<div class="row notifyBody">';
        sHtml += '<div id="notifyFeedDiv" icurrdivindex="0" style="height:;overflow-y:auto;overflow-x:hidden;">';
        sHtml += '<div id="notifypage0" style="">';


        sHtml += '<div class="col-xs-12 mainMsgPanel '+sMainMsgPanelClass+' '+statusClass+'" style="height:'+msgPanelHeight+'px;padding: 0px 0px;">';

        sHtml += '<div class="innMsgPanel">';
        sHtml += '<div  class="animate" id="animate0" msgId="'+iMsgId+'">';

        sHtml += '<div class="col-xs-12 msgType-Def" id="msg0" iIndex="0" idExt="" onmouseout1="clNotifyMessage.onMOutAddStyle(this);"';
        sHtml += ' onmouseover1="clNotifyMessage.onMOverAddStyle(this);" onclick="'+sMainPanelClick+'" style="padding: 0;">';


        var imgUrl = sPicName;

        if (!imgUrl)
            imgUrl = "defaultimg.gif";


        sHtml += '<table width="100%" height="100%" border="0" cellpadding="0" cellspacing="1" style="padding: 10px 0px 5px 0px;">';

        sHtml += '<col width="20%">';
        sHtml += '<col width="60%">';
        sHtml += '<col width="20%">';
        sHtml += '<tr>';

        var sIconStyle = "";
        if (iIconBGColor > 0)
            sIconStyle = "background-color:#;"+util.getHexaColor(iIconBGColor);

        sHtml += '<td style="" valign="middle" rowspan="1" align="center">';
        sHtml += '<div class="img-circle notifyIcon" style="'+sIconStyle+';"><span>'+chIconChar+'</span></div>';

        sHtml += '</td>';

        sHtml += '<td >';
        sHtml += '<div class="">';
        sHtml += '<table width="100%" border="0" cellpadding="0" cellspacing="0" style="color:inherit;">';
        sHtml += '<tr>';
        sHtml += '<td class="" style="padding-bottom: 3px;" valign="middle">';

        var isDispalyArrow = false;
        if(iCount > 1) {
            isDispalyArrow = true;
        }

        sHtml+= '<div class="msgTitle textOverflow" title="\''+sMsgTitle+'\'">'+sMsgTitle;
        sHtml+= '</div>';

        if(iCount>0)
            sHtml+= '<div class="img-circle notification-count">'+iCount+'</div>';

        sHtml+= '</td>';

        sHtml+= '</tr>';
        sHtml+= '<tr>';
        sHtml+= '<td style="padding-top:3px;font-weight:normal;">';
        sHtml+= '<div class="msgSubTitle textOverflow highlightOnMover '+sMsgSubTitleClass+'" title="'+sMsg+'" ';
        sHtml+= ' style="max-width: 200px;font-size: 100%;">'+sMsg+'</div>';
        sHtml+= '</td>';

        sHtml+= '</tr>';
        sHtml+= '</table>';
        sHtml+= '</div>';
        sHtml+= '</td>';
        sHtml+= '<td align="right" valign="top" style="padding-right: 15px;">';
        sHtml+= '<div class="msgCreatedDt highlightOnMover">'+sCreatedOn+'</div>';
        sHtml+= '</td>';

        sHtml+= '</tr>';
        sHtml+= '<tr>';
        sHtml+= '<td></td>';


        sHtml+= '<td colspan="1" class="hrLine" style11="border-bottom: 1px solid #F2F2F2;"></td>';
        sHtml+= '<td></td>';
        sHtml+= '</tr>';
        sHtml+= '<tr>';
        sHtml+= '<td></td>';
        sHtml+= '<td>';
        sHtml+= '<table>';
        sHtml+= '<tr>';
        sHtml+= '<td align="right" style="padding-right: 10px;">';
        sHtml+= '<div>';
        sHtml+= '<img class="img-circle userImg" src="uploadImage.action?moduleId='+Constants.USERS+'&transId='+iCreatedUserId+'" style="float:left;">';
        sHtml+= '</div>';
        sHtml+= '</td>';
        sHtml+= '<td class="msgSubTitle textOverflow highlightOnMover" title="'+iCreatedUserId+'">'+iCreatedUserId+'</td>';
        sHtml+= '</tr>';
        sHtml+= '</table>';
        sHtml+= '</td>';
        sHtml+= '<td align="right" style="padding-right: 15px;">';


        if(isDispalyArrow) {
            sHtml += '<div>';
            sHtml += '<span id="categoryMsgs" class="fa fa-angle-right highlightOnMover"></span>';
            sHtml += '</div>';
        }
        else {
            sHtml += '<div>';

            if (iTransStatus == 5)
                sHtml += '&nbsp;';

            else

                sHtml += '<a msgId="'+iMsgId+'" style="text-decoration: none"><span id="ignoreNotify" class="crm crm-aknowledge acknowledge-icon"></span> </a>';
        }

        sHtml+= '</div>';
        sHtml+= '</td>';
        sHtml+= '</tr>';
        sHtml+= '</table>';
        sHtml+= '</div>';
        sHtml+= '</div>';
        sHtml+= '</div>';
        sHtml+= '</div>';

        sHtml+= '</div>';
        sHtml+= '</div>';
        sHtml+= '</div>';
        sHtml+= '</div>';
        sHtml+= '</div>';

        //alert(sHtml);
        return sHtml;
    };

    this.handleAsyncWatcher=function(sData)
    {
        sData=sData.split(',');
        me.arhNotifyCount(sData[0],sData[1],sData[2]);
    };

    this.arhNotifyCount = function(iCount,iPrioriy,iReminderCount)
    {
        me.g_isConnected=false;
        var objDv=document.getElementById("dvCount");
        var sStyle=null;
        var isShowMsg=false;

        //if(objDv)
         {
             iCount=(iCount?iCount:0);
             iReminderCount=(iReminderCount?iReminderCount:0);
             objDv.innerHTML=  iCount;

             if(iPrioriy==Constants.IPRIORITY.HIGH)
              sStyle="highPriority";
             //document.getElementById("dvCount").className="innNotifyBtn default warnBtn";
            else if(iPrioriy==Constants.IPRIORITY.MEDIUM)
               sStyle="mediumPriority";
            else if(iPrioriy==Constants.IPRIORITY.LOW)
               sStyle="lowPriority";
            else
               sStyle="normalPriority";

           if(objDv.className.indexOf("notifyBtnBG2")>0)
            util.removeClass(objDv,'notifyBtnBG2');
           else if(objDv.className.indexOf("errorBtn")>0)
            util.removeClass(objDv,'errorBtn');
          else if(objDv.className.indexOf("warnBtn")>0)
            util.removeClass(objDv,'warnBtn');

            if(objDv.className.indexOf("highPriority")>0)
             util.removeClass(objDv,'highPriority');
            else if(objDv.className.indexOf("mediumPriority")>0)
             util.removeClass(objDv,'mediumPriority');
            else if(objDv.className.indexOf("lowPriority")>0)
             util.removeClass(objDv,'lowPriority');
            else if(objDv.className.indexOf("normalPriority")>0)
             util.removeClass(objDv,'normalPriority');

             var sArrActNames=new Array(),sArrActFns=new Array();
           /*  var dvRCount=document.getElementById("dvRCount");
             cross.setVisible(dvRCount,true);

             dvRCount.innerHTML=iReminderCount;*/
             if(iReminderCount>0)
             {
                 //cross.setVisible(document.getElementById("dvReminders"),true);
                 isShowMsg=true;
                 sArrActNames[sArrActNames.length]=MsgHandler.getMsg(MsgConstants.REMINDERS);
                 sArrActFns[sArrActFns.length]="clNotifyMessage.openNotifyFromAlert(event);";
             }

            if(iCount >0)
            {

                util.addClass(objDv,sStyle);
                if(me.g_iCount == -1)
                    isShowMsg=true;
                else if(me.g_iCount<iCount)
                    isShowMsg=true;
                if(isShowMsg)
                {
                    var iViewMode=clAppBuffer.getViewMode();
                    if( iViewMode!=Constants.PORTAL)
                        util.shakeElement(objDv,10);
                    sArrActNames[sArrActNames.length]=MsgHandler.getMsg(MsgConstants.NOTIFICATIONS);
                    sArrActFns[sArrActFns.length]="clNotifyMessage.openNotifyFromAlert(event);";
                }
                me.g_iCount=iCount;                                     
            }
            else
            {
                 sStyle="notifyBtnBG2";
                util.addClass(objDv,sStyle);
                var objDvNotify = document.getElementById("dvNotify");
                if(objDvNotify)
                    me.removeNotifyDlg(document.getElementById("notifyBtn"));
            }
            if(isShowMsg==true)
            {
                msg.showToastMsg(me.getMessage(sArrActNames,sArrActFns),5000,true);
                util.playNotificationSound();
            }
        }

    };
    this.setNotificationCount=function(iCount)
    {
        var objDv=document.getElementById("dvCount");
        objDv.innerHTML=  iCount;
        me.g_iCount=iCount;
    };

    /**
     * This function is used for get the NotifyMessages
     */
    this.getNotifyMsg = function(sUrl,sFormData)
    {
        sFormData+="&containerHeight="+me.iContainerHeight+"&fromDashlet="+me.fromDashlet;
        con.sendPostRequest(sUrl, sFormData, null, "clNotifyMessage.arhGetNotifyMsg", false);
    };
    /**
     *  Ajax Response handler for getNotifyMsg...
     * @param sResponse
     */
    this.arhGetNotifyMsg = function(sResponse)
    {        
        // alert("isSetCenterUI ="+me.isSetCenterUI +"=isList ="+me.isList +"=isBack ="+me.isBack+"=isDisplayDlg="+me.isDisplayDlg)
        var objNotifyBtn,objDvNotify,objDiv;
        objNotifyBtn = document.getElementById("notifyBtn");
        //objDvNotify = document.getElementById("dvNotify");
        objDvNotify = msg.getToastWindowContentElement();
        objDiv = document.getElementById("dvNotifyCenterUI");
        util.removeClass(objNotifyBtn,'notifyBtnMClk');

        if(me.isToastWindow)//!objDiv)    // Dialog View
        {
            /*if(!objDvNotify)
            {
                objDvNotify = document.createElement("div");
                objDvNotify.id="dvNotify";
                objNotifyBtn.parentNode.appendChild(objDvNotify);
                objDvNotify.className = "dvNotify default innNotify";
            }*/
            objDvNotify.innerHTML = sResponse;
            loadResources(objDvNotify, util.onScriptsLoad);
            /*if(me.isDisplayDlg || me.isList || me.isBack)
            {
                objDvNotify.style.display = "block";
            }
            else
                me.removeNotifyDlg(objNotifyBtn);*/

            /*if(me.iListenerId >= 0)
                cross.unregisterEventListener(me.iListenerId);
            me.iListenerId =cross.registerEventListener(cross.EVENT_ONCLICK,clNotifyMessage.removeNotifyDlg,[objNotifyBtn,true]);*/

        }
        else // setCenterUI View
        {
            objDiv.innerHTML  = sResponse;
            loadResources(objDiv, util.onScriptsLoad);
        }

        var iTotalRecords = 0;
        if(document.getElementById("hfTotalMsgs"+me.sIdExt))
            iTotalRecords = document.getElementById("hfTotalMsgs"+me.sIdExt).value;
        /*if(me.isDisplayDlg && iTotalRecords > 0)  //todo.......
            me.refreshNotifyCount();*/

        if(objDvNotify  && iTotalRecords > 0)
        {
            /*var arrPositions,iWidth=470,iLeft;
            arrPositions = cross.getPosition(objNotifyBtn);
            iLeft=arrPositions[0];
            objDvNotify.style.width = iWidth+"px";
            var iDocWidth = document.body.clientWidth-document.body.scrollLeft;
            if((iLeft+iWidth)>iDocWidth)
                iLeft = (iLeft- ((iLeft+iWidth)-iDocWidth))-20;

            objDvNotify.style.left = iLeft+"px";
            objDvNotify.style.top = (arrPositions[1] +(objNotifyBtn.offsetHeight))+"px";
            objDvNotify.style.display = "block";
            objNotifyBtn.className="notifyBtn notifyBtnMClk";*/

            //me.hideViewAll(iTotalRecords);
        }
        else
        {
            if(objDvNotify)
                msg.hideToastWindowDlg();

        }

        if(me.isList)
        {
            me.isList = false;
            //me.isDisplayDlg = true;
            document.getElementById("dvInnNotify"+me.sIdExt).style.width = '100%';
            //if(me.isToastWindow)
            //    document.getElementById("notifyBtn").className="notifyBtn notifyBtnMClk";
            var objHeading = document.getElementById("headingMsg"+me.sIdExt);
            util.removeClass(objHeading,"headingMsg1");
            me.onClkRunAnimation(me.DIRECTION_RIGHT);
        }
        else if(me.isBack)
        {
            me.isBack = false;
            if(me.isToastWindow)
                //me.isDisplayDlg = false;
            if(document.getElementById("dvInnNotify"+me.sIdExt))
                document.getElementById("dvInnNotify"+me.sIdExt).style.width = '100%';
            me.onClkRunAnimation(me.DIRECTION_LEFT);
        }
        //else if(me.isDisplayDlg  && !me.isSetCenterUI)
        //    me.isDisplayDlg = false;

        var objFld,objCount,iHasPriority=0,sStyle;
        objCount =document.getElementById("dvCount");
        objFld=document.getElementById("hfTotalMsgs"+me.sIdExt);
        sStyle = "innNotifyBtn default dvCount ";
        iTotalRecords = 0;

        if(objFld)
        {
            iHasPriority=objFld.getAttribute("hasPriority");
            iTotalRecords = objFld.value;
            objCount.innerHTML = iTotalRecords;
        }

        if(iTotalRecords<=0)
            objCount.className=sStyle+" notifyBtnBG2";
        else
        {
             if(iHasPriority==Constants.IPRIORITY.HIGH)
              sStyle+="highPriority";
            else if(iHasPriority==Constants.IPRIORITY.MEDIUM)
               sStyle+="mediumPriority";
            else if(iHasPriority==Constants.IPRIORITY.LOW)
               sStyle+="lowPriority";
            else // if(iHasPriority==Constants.IPRIORITY.NORMAL)
               sStyle+="normalPriority";
            //else sStyle+="notifyBtnBG1";

           objCount.className=sStyle;
        }

    };
    /**
     * This function is used for get Individual message for list of messages
     */
    this.onClkGetMsgView = function(objDv,sTitle, sModuleName, sCategoryName,evt)
    {

        var iIndex,iCount,iModuleId,srcElmt,byViewType,byDismissAction;
        var iViewMode=clAppBuffer.getViewMode();
        //me.isSetCenterUI = !me.isToastWindow;

        //me.sIdExt = sIdExt;
            /*iIndex = parseInt(objDv.getAttribute("iIndex"));
        iCount = parseInt(document.getElementById("hfCount"+me.sIdExt+"["+iIndex+"]").value);
        iModuleId = parseInt(document.getElementById("hfModuleId"+me.sIdExt+"["+iIndex+"]").value);
        byViewType = parseInt(document.getElementById("hfViewType"+me.sIdExt+"["+iIndex+"]").value);
        byDismissAction = parseInt(document.getElementById("hfDismissAction"+me.sIdExt+"["+iIndex+"]").value);*/

        srcElmt = cross.getSrcElement(evt);
        iIndex = parseInt(objDv.getAttribute("iIndex"));
        me.iIndex = iIndex;
        var idExt = srcElmt.getAttribute("idExt");
        var clNotifyMsgDTOs = me.clNotifyMsgDTOs;
        var clNotifyMsgDTO = clNotifyMsgDTOs[iIndex];
        iCount = clNotifyMsgDTO.iCount;
        iModuleId = clNotifyMsgDTO.iModuleId;
        byViewType = clNotifyMsgDTO.byViewType;
        byDismissAction = clNotifyMsgDTO.byDismissAction;
        if(srcElmt.id == 'ignoreNotify' || ( iCount<=1 && iViewMode==Constants.PORTAL) || (iCount<=1 && ((  iModuleId != Constants.QUOTE &&iModuleId != Constants.MESSAGES &&
                                                            iModuleId != Constants.ANNOUNCEMENT &&
                                                            iModuleId != Constants.ALLACTIVITIES &&  iModuleId>=Constants.INTERNAL_MODULES &&
                                                            iModuleId <= (Constants.INTERNAL_MODULES+Constants.MODULE_SLAB)))))//(iModuleId == Constants.TASKS) ||
        {
            me.iMsgId = clNotifyMsgDTO.iMsgId;
            con.sendPostRequest(me.sIgnoreUrl, "&msgIds="+clNotifyMsgDTO.iMsgId+"&moduleIds="+iModuleId, null, "clNotifyMessage.arhIgnore", false);
        }
        else
        {
            var sFormData = me.getNotifyFormData2QueryString(clNotifyMsgDTO,false,me.isToastWindow);
//            var sFormData = me.getNotifyFormData2QueryString(iIndex,(iCount>1 && srcElmt.id != 'categoryMsgs'));TODO: need to uncomment -- show listview from notification
            clearInterval(t);
            if(iCount>1)
            {
                me.isList = true;
                //sFormData = "&isBack=true&isToastWindow="+me.isToastWindow+"&"+sFormData;
                sFormData = "&isBack=true&"+sFormData;

//                alert(sFormData)
//                if(srcElmt.id == 'categoryMsgs')TODO: need to uncomment -- show listview from notification
                {
                    me.getNotifyMsg(me.sUrl,sFormData);
                }
                /*else  // display listview
                {
                    sUrl="module/moduleView!getModuleView.do";
                    sFormData+="&isViewChange=true";
                    sUrl+="?"+sFormData;
                    me.removeNotifyDlg(document.getElementById("notifyBtn"));
                    home.setCenterUI(sUrl);
                }*/
            }
            else
            {
                /*var objDvNotify = document.getElementById("dvNotify");
                if(objDvNotify)
                {
                    util.removeClass(document.getElementById("notifyBtn"),'notifyBtnMClk');
                    objDvNotify.parentNode.removeChild(objDvNotify);
                }*/
                if(msg.getToastWindowContentElement())
                    msg.hideToastWindowDlg(false);
                me.setBackTrack(me.sUrl,sFormData, byViewType,sTitle, sModuleName, sCategoryName, byDismissAction,iModuleId,iCount);
            }
        }
    };

    this.setBackTrack = function(sUrl,sParams , byViewType, sTitle, sModuleName, sCategoryName, byDismissAction,iModuleId,iCount)
    {
        sUrl = sUrl+"?"+sParams+"&viewType="+byViewType;
        //@carona@ Announcement, Messages ared displaying in Overlay view
        if((iCount==1 || iCount==0) && (iModuleId == Constants.ANNOUNCEMENT || iModuleId == Constants.MESSAGES))
        {
            sTitle=(iModuleId == Constants.ANNOUNCEMENT)?MsgHandler.getMsg(MsgConstants.ANNOUNCEMENT):MsgHandler.getMsg(MsgConstants.MESSAGE)+" Details";
            clOverlay.showOverlay("clNotificationMsg","dvNotificationInfo",750,"90%",clOverlay.OVERLAY_RIGHT,null,50,null,sTitle,"containerDiv");
            con.sendPostRequest(sUrl,null,null,me.resNotificationAnnMsg,null,0,null,false,false,ACTION_LOADING);
        }
        else if(byViewType == Constants.DISP_CURRENT_WINDOW)
            home.setCenterUI(sUrl,null,false,false,"clNotifyMessage.arhMsgView");
        else if(byViewType == Constants.DISP_DIALOG)
        {
            var clNotifyDlg=null;
            sTitle = sTitle+" ' "+sModuleName+"-"+sCategoryName+" '";

            if(clNotifyDlg == null)
                clNotifyDlg = getDialogBox("notifyDlg");

            clNotifyDlg = new DialogBox("notifyDlg",sTitle,140,120,600,300,sUrl, true, null, false,true,[MsgHandler.getMsg(MsgConstants.CLOSE)]);
            clNotifyDlg.callFn("parent.clNotifyMessage.refreshNotifyCount");
            clNotifyDlg.setCenter();
            clNotifyDlg.show();

            //me.refreshNotifyCount();    // todo
        }
        else   // New tab
        {
            sUrl=clAppBuffer.getContextPath()+"/crmhome.do?url="+util.encodeURI(sUrl);
            window.open(sUrl);
            me.refreshNotifyCount();
        }
    };

    this.resNotificationAnnMsg=function(res)
    {
        var objDiv=document.getElementById("dvNotificationInfo");
        objDiv.innerHTML = res;
        loadResources(objDiv, util.onScriptsLoad);
    };

    //this.onClkIgnoreAll = function(sIgnoreUrl,isToastWindow,idExt)
    this.onClkIgnoreAll = function()
    {
        //me.isToastWindow=isToastWindow;
        //me.idExt=idExt;
        var objFld,i=0,sFrmData="", clNotifyMsgDTO;
        var clNotifyMsgDTOs = me.clNotifyMsgDTOs;
        objFld = document.getElementById("hfMsgId"+me.sIdExt+"["+i+"]");
        //while(objFld)
        for(i=0; i<clNotifyMsgDTOs.length; i++)
        {
            clNotifyMsgDTO = clNotifyMsgDTOs[i];
            sFrmData+="&msgIds="+clNotifyMsgDTO.iMsgId;
            sFrmData+="&moduleIds="+clNotifyMsgDTO.iModuleId;
            //objFld = document.getElementById("hfMsgId"+me.sIdExt+"["+i+"]");
        }
        con.sendPostRequest(me.sIgnoreUrl, sFrmData, null, "clNotifyMessage.arhIgnoreAll", false);
    };
    /**
     * Ajax Response handler for onClkMsgView...
     * @param sResponse
     */
    this.arhMsgView = function(sResponse,iStatus)
    {
        home.handleResponse(sResponse,iStatus);
        me.refreshNotifyCount();
    };

    this.arhIgnore = function(sResponse,iStatus)
    {
        var objDv;
        objDv = document.getElementById("animatesrcn["+me.iIndex+"]");
        me.removeMsgPanal(objDv,me.iMsgId);
        objDv = document.getElementById("animatedlg["+me.iIndex+"]");
        me.removeMsgPanal(objDv,me.iMsgId);
        objDv = document.getElementById("animatetoast["+me.iIndex+"]");
        me.removeMsgPanal(objDv,me.iMsgId);
        //me.refreshNotifyCount();

        me.setNotificationCount(me.g_iCount-1);
        if(me.g_iCount==0)
        {
            util.addClass(document.getElementById("dvCount"),"notifyBtnBG2");
            msg.hideToastWindowDlg(false);
        }
    };
    this.removeMsgPanal = function(objDv,iMsgId)
    {
        if(objDv && iMsgId==parseInt(objDv.getAttribute("msgId")))
        {
            var objMsgPannal;
            objMsgPannal = objDv.parentNode.parentNode;
            objMsgPannal.parentNode.removeChild(objMsgPannal);
        }
    };
    this.arhIgnoreAll = function()
    {
        //me.removeNotifyDlg();
        me.refreshNotifyCount();
        me.onClkBackToNotify(me.isToastWindow,me.idExt);
    };
    /**
     * This function is used for form query string for  notifymessage form..
     * @param iIndex : index of the currently clicked message
     * @return : query string
     */
      this.getNotifyFormData2QueryString = function(clNotifyMsgDTO, isListview, isToastWindow)
    {
        var sQueryStr = "";
        sQueryStr += "moduleId="+clNotifyMsgDTO.iModuleId;
        if(!isListview)
            sQueryStr += "&transId="+clNotifyMsgDTO.iTransId;
        sQueryStr += "&msgId="+clNotifyMsgDTO.iMsgId;
        sQueryStr += "&categoryId="+clNotifyMsgDTO.iCategoryId;
        sQueryStr += "&count="+clNotifyMsgDTO.iCount;
        sQueryStr += "&createdUserId="+clNotifyMsgDTO.iCreatedUserId;
        sQueryStr += "&viewType="+clNotifyMsgDTO.byViewType;
        sQueryStr += "&isToastWindow="+isToastWindow;

        /*var sQueryStr = "";
        sQueryStr += "moduleId="+document.getElementById("hfModuleId"+me.sIdExt+"["+iIndex+"]").value;
        if(!isListview)
            sQueryStr += "&transId="+document.getElementById("hfTransId"+me.sIdExt+"["+iIndex+"]").value;
        sQueryStr += "&msgId="+document.getElementById("hfMsgId"+me.sIdExt+"["+iIndex+"]").value;
        sQueryStr += "&categoryId="+document.getElementById("hfCategoryId"+me.sIdExt+"["+iIndex+"]").value;
        sQueryStr += "&count="+document.getElementById("hfCount"+me.sIdExt+"["+iIndex+"]").value;
        sQueryStr += "&createdUserId="+document.getElementById("hfCreatedUserId"+me.sIdExt+"["+iIndex+"]").value;*/
        return sQueryStr;
    };
    /**
     * This function is used for Back to NotifyMessages
     */
    this.onClkBackToNotify = function(isToastWindow,sIdExt)
    {
       //me.sIdExt = sIdExt;
        me.isBack = true;
        var sFormData;
        if(me.isToastWindow)
        {
            //me.isSetCenterUI = false;
            sFormData = "&limit=4&isBack=true&isToastWindow="+me.isToastWindow;
        }
        else
        {
            //me.isSetCenterUI = true;
            sFormData = "&limit=0&isBack=true&isToastWindow="+me.isToastWindow;
        }
        me.getNotifyMsg(me.sNotifyMsgUrl,sFormData);
    };

    this.hideViewAll = function(iTotalRecords,isList)
    {
        var clNotifyMsgDTOs, clNotifyMsgDTO, iCount, iTotalCount=0;
        clNotifyMsgDTOs = me.clNotifyMsgDTOs;
        for(var i=0; i<clNotifyMsgDTOs.length; i++)
        {
            clNotifyMsgDTO = clNotifyMsgDTOs[i];
            iCount = clNotifyMsgDTO.iCount;
            if(iCount <= 0)
                iCount =1;
            iTotalCount += iCount;
        }

        if(!isList && (iTotalRecords > iTotalCount))
            document.getElementById("aViewAll"+me.sIdExt).style.display = "";
        else
            document.getElementById("aViewAll"+me.sIdExt).style.display = "none";
    };
    this.hideViewAll_ = function(iTotalRecords)
    {
        var iIndex=0,iTolCount=0,objCount;
        objCount =  document.getElementById("hfCount"+me.sIdExt+"["+iIndex+"]");
        while(objCount)
        {
            var iVal=parseInt(objCount.value);
            if(iVal <= 0)
                iVal =1;
            iTolCount = (parseInt(iVal)+parseInt(iTolCount));
            iIndex++;
            objCount =  document.getElementById("hfCount"+me.sIdExt+"["+iIndex+"]");
        }
        //alert(iTotalRecords+"===="+iTolCount)
        if(iTotalRecords==iTolCount)
            document.getElementById("aViewAll").style.display = "none";
    };

    /**
     * This function is used for get the all messages
     */
    this.onClkViewAll = function(sUrl)
    {
        //me.isSetCenterUI = true;
        me.isToastWindow = false;
        //var objDvNotify = document.getElementById("dvNotify");
        //util.removeClass(document.getElementById("notifyBtn"),'notifyBtnMClk');
        //objDvNotify.parentNode.removeChild(objDvNotify);
        var sFrmData ="&limit=0&isToastWindow="+me.isToastWindow;
        home.setCenterUI(sUrl+"&"+sFrmData,null);
        msg.hideToastWindowDlg(false);
    };
    /**
     *
     */
    this.arhViewAll =  function(sResponse)
    {
        home.handleResponse(sResponse);
    };
    /**
     * This function is used for update message status
     */
    this.onClkMarkAsRead = function(sUrl)
    {
        var sFrmData="",isSend = false;
        var clTable,iRowCnt,tdChk,objChkBox;
        clTable = new sTable("listReportTab_1");
        iRowCnt = clTable.getRowCount();
        for (var i = 0; i < iRowCnt; i++)
        {
            tdChk = clTable.getElementAt(i,0).parentNode;
            objChkBox = cross.getFirstElement(tdChk.childNodes);

            if(objChkBox.checked)
            {
                isSend =  true;
                sFrmData = sFrmData+"&msgId="+document.getElementById("hfNotifyMsgId["+i+"]").value;
            }
        }

        if(isSend)
        {
            Validation.clearMessage(null,true);
            clearInterval(t);
            con.sendPostRequest(sUrl,sFrmData, null, "clNotifyMessage.arhMarkAsRead", false);
        }
        else
        {
            Validation.showMessage("You must Select at least 1 Record",Validation.ERROR_MSG,null,Validation.ERROR_CUSTOM,true);
            return false;
        }
    };
    /**
     * Ajax Response handler for onClkMarkAsRead...
     * @param sResponse
     */
    this.arhMarkAsRead = function(sResponse)
    {
        me.refreshNotifyCount();
    };

    /**
     * This function is used for applay styles to the dialog while mouse over
     * @param element
     */
    this.onMOverAddStyle = function(element)
    {
        $(element).addClass("dvMoutColor");
    };
    /**
     * This function is used for applay styles to the dialog while mouse out
     * @param element
     */
    this.onMOutAddStyle = function(element)
    {
        $(element).removeClass("dvMoutColor");
    };

    /**
     *  This function is used for shuffle notify messages Left to Right
     */
    this.onClkRunAnimation = function (iDirection)
    {
        var objFld, iIndex = 0;
        var arrElements = new Array();
        objFld = document.getElementById("animate"+me.sIdExt+"["+iIndex+"]");
        while(objFld)
        {
            arrElements[iIndex] =  objFld ;

            if(iIndex>15)
                break;
            iIndex ++;
            objFld = document.getElementById("animate"+me.sIdExt+"["+iIndex+"]");
        }
        me.runAnimation(arrElements, iDirection, 150);

    };
    /**
     * This function is used for apply the animaion of the elements.
     * @param arrElements
     * @param iFrom
     * @param iInterval
     * @param iDirection
     */
    this.runAnimation =  function(arrElements, iDirection, iFrom, iInterval)
    {
        if(arrElements && arrElements != null)
        {
            var  iCount = 10;
            if(!parseInt(iFrom))
                iFrom = 100;
            if(!parseInt(iInterval))
                iInterval = 500;

            for(var i=0; i<arrElements.length; i++)
            {
                if(iDirection == me.DIRECTION_LEFT)
                    arrElements[i].style.left = iFrom+"px";
                else
                    arrElements[i].style.right = iFrom+"px";
            }
            t=setInterval(function()
            {
                if(iCount <= iFrom)
                {
                    for(var i=0; i<arrElements.length; i++)
                    {
                        if(iDirection == me.DIRECTION_LEFT)
                            arrElements[i].style.left = (iFrom - iCount)+"px";
                        else
                            arrElements[i].style.right = (iFrom - iCount)+"px";
                    }
                    iCount = iCount + 10;
                }
                else
                {
                    clearInterval(t);
                }
            }, iInterval/200);
        }
    };

    this.getMessage = function(sArrActionNames, sArrActionFns)
    {
        var sHtml='<div align="right" style="padding:5px"><strong>';
        sHtml+=MsgHandler.getMsg(MsgConstants.YOU_HAVE)+"&nbsp;";
        var sId="";
        for(var i=0; i<sArrActionNames.length;i++)
        {
            if(i!=0)
                sHtml+="&nbsp;"+MsgHandler.getMsg(MsgConstants.AND)+"&nbsp;";

            /*if(sArrActionNames[i].indexOf("Reminder")!=-1)
            sId="anchorReminders";*/

            sHtml+='<a id="'+sId+'" onclick="'+sArrActionFns[i]+'">'+sArrActionNames[i]+'</a>';
            sId="";
        }
        sHtml+='</strong></div>';
        return sHtml;
    };

    this.openNotifyFromAlert = function(evt)
    {
        cross.cancelBubble(evt);
        cross.fireEvent(document.getElementById("notifyBtn"),'click');
    };

};







////////////////////////////////////////////////////////////////
/**
 * This function is used for get the width , height of the screen
 * @return array ...... array[iWidth, iHeight]
 */
/*
 function getPagePositions()
 {
 var iWidth;
 var iHeight;

 if( typeof( window.innerWidth ) == 'number' )
 {
 //Non-IE
 iWidth = window.innerWidth;
 iHeight = window.innerHeight;
 // alert(iWidth+"::iHeight="+iHeight);
 }
 else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) )
 {
 //IE 6+ in 'standards compliant mode'
 iWidth = document.documentElement.clientWidth;
 iHeight = document.documentElement.clientHeight;
 }
 else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) )
 {
 //IE 4 compatible
 iWidth = document.body.clientWidth;
 iHeight = document.body.clientHeight;
 }
 return [iWidth,iHeight];
 }
 */

/**
 * Created by chakradhar on 31-01-17.
 */
var clAsyncWatcher=new function()
{
    var me=this;
    var clEventSource;

    var ASYNC_NOTIFICATION=1;
    var ASYNC_SESSION_EXPIRED=2;
    var ASYNC_KNOWLARITY=3;

    this.registerAsyncWatcher=function()
    {
        if(!clEventSource)
            clEventSource = new EventSource(clAppBuffer.getContextPath()+"/sse");
       // else alert("event source found:"+clEventSource);

        clEventSource.onmessage = function(event)
        {
            me.evaluateData(event.data);
        };
        clEventSource.onopen = function(event)
        {

        };
        clEventSource.readyState  = function(event)//CONNECTING (0), OPEN (1), or CLOSED (2).
        {

        };
        clEventSource.onerror = function(event)
        {

        };
        clEventSource.url = function(event)
        {

        };

    };

    this.unRegisterAsyncWatcher=function()
    {
        clEventSource.close();
        clEventSource=null;
    };

    this.evaluateData=function(clAsyncResponseDTO)
    {
        clAsyncResponseDTO=eval(clAsyncResponseDTO);
        clAsyncResponseDTO=clAsyncResponseDTO[0];

        if(clAsyncResponseDTO.byAsyncType==ASYNC_NOTIFICATION)
        {
            clNotifyMessage.handleAsyncWatcher(clAsyncResponseDTO.sData)
        }
        else if(clAsyncResponseDTO.byAsyncType==ASYNC_KNOWLARITY)
        {
            var ORIGINATE=1;// = Call has originated (which means landed on the number)
            var BRIDGE=2;// = Call is connected to an agent (You will have to use this for pop up)
            var HANGUP=3;// = Call gets disconnected
            var CDR=4;// = It will have the call logs of the entire conversation

           // alert(clAsyncResponseDTO.sData);
            var sData=clAsyncResponseDTO.sData;
            sData=sData.split(',');

            var byEventType,iModuleId, iTransId, iMemberId,sTitle;

            byEventType=sData[0];
            iModuleId=sData[1];
            iTransId=sData[2];
            iMemberId=sData[3];
            sTitle=sData[4];

            var sUrl,sParams;
            sParams = "knowlarity=true&moduleId="+iModuleId+"&transId="+iTransId+"&memberId="+iMemberId;
            sUrl = con.getStruts2Url("security","home.do","getRecentItemDetails_nrf",null);
            sUrl += sParams;
            //msg.showToastWindowFromURL(document.body,sUrl,true,null,0,false,null,null,false,true,Constants.SCOPE_SCREEN,null);
            //con.sendPostRequest(sUrl, null, null, arhBusinessCard, false);

            var clDlg=getDialogBox("knowlarity");
            if(byEventType==ORIGINATE)
            {
                clDlg=createSimpleDialog("knowlarity",sTitle,0,0,500,230,sUrl,false,null,false,false,false,false,false,false);


                document.getElementById("knowlaritytitlebar").style.backgroundColor="green";
                document.getElementById("knowlaritySTitlebar").style.color="#ffffff";
                clDlg.setCenter();
                clDlg.show();
            }
            else if(clDlg)
            {
                clDlg.setTitle(sTitle);
                document.getElementById("knowlaritytitlebar").style.backgroundColor="gray";
            }

        }
        else // session expired...
        {
            me.unRegisterAsyncWatcher();
            util.sessionExpired();
        }


        function arhBusinessCard(sResponse)
        {
            msg.showToastMsg(sResponse,5000,true);
        }
    };

};

function CLAsyncResponseDTO(byAsyncType,sData)
{
    this.byAsyncType=byAsyncType; // notification, session-expired,..
    this.sData=sData;
}/*
////////////////////////////////  showToastMsg, showInfoMsg, showConfirm, showMessage////////////////////////////////
*/
var msg=new function()
{
    var me=this;
    me.sLastToastWindowId=null;
    me.iTWindowListenerId=0;

    /**
     * This function is used for show toast message
     * @param sMessage
     * @param iInterval
     */
    this.showToastMsg=function(sMessage,iInterval,isSlideUp)
    {
        var objToastMsg = document.getElementById("dvToastMsg");
        if(!objToastMsg)
        {
            objToastMsg = document.createElement("div");
            objToastMsg.id="dvToastMsg";
            document.body.appendChild(objToastMsg);
            objToastMsg.className = "toast_def";
        }
        objToastMsg.style.width = 270;
        var t,iVal=270;
        if(!isSlideUp)
        {
            util.removeClass(objToastMsg,'toastMsgSlideUp');
            me.runToastMsgAnimate(objToastMsg,{right: '-='+iVal+'px'},{right: '+='+iVal+'px'},true,500);
        }
        else
        {
            iVal=100;
            util.addClass(objToastMsg,'toastMsgSlideUp');
            me.runToastMsgAnimate(objToastMsg,{bottom: '-='+iVal+'px'},{bottom: '+='+iVal+'px'},true,1500);
        }
        objToastMsg.innerHTML=sMessage;
        if(!iInterval)
            iInterval=5000;

        clearTimeout(t);
        t=setTimeout(function()
        {
            if(!isSlideUp)
                me.runToastMsgAnimate(objToastMsg,{right: '-='+iVal+'px'},{right: '+='+iVal+'px'},false,500);
            else
                me.runToastMsgAnimate(objToastMsg,{bottom: '-='+iVal+'px'},{bottom: '+='+iVal+'px'},false,1000);
        },iInterval);

        objToastMsg.onclick=function()
        {
            cross.setVisible(objToastMsg,false);
        };

        objToastMsg.onmouseover=function()
        {
            clearTimeout(t);
        };

        objToastMsg.onmouseout=function()
        {
            t=setTimeout(function()
            {
                if(!isSlideUp)
                    me.runToastMsgAnimate(objToastMsg,{right: '-='+iVal+'px'},{right: '+='+iVal+'px'},false,500);
                else
                    me.runToastMsgAnimate(objToastMsg,{bottom: '-='+iVal+'px'},{bottom: '+='+iVal+'px'},false,1000);
            },500);

        };
    };

    this.runToastMsgAnimate=function(element,arrProp1,arrProp2,isShow,iInterval)
    {
        if(isShow)
            $(element).animate(arrProp1, 0,null, function(){cross.setVisible(element,true);$(element).animate(arrProp2, iInterval);});
        else
            $(element).animate(arrProp1, iInterval,null,function(){$(element).animate(arrProp2, 0, null,cross.setVisible(element,false));});
    };


    this.maximizeElement=function(element, fnHandler)
    {
        var objCenter,objAnimate,iPositions;
        var iWidth,iHeight,iLeft,iTop, iCenterHeight,iClientWidth,iClientHeight,iNewWidth,iNewHeight;

        objCenter=document.getElementById("dvCenter");
        objAnimate = document.getElementById("elmntAnimate");

        //iCenterHeight = objCenter.offsetHeight;
        iClientWidth = document.body.clientWidth;
        iClientHeight = document.body.clientHeight;
        iWidth = element.offsetWidth;
        iHeight = element.offsetHeight;
        iNewWidth=objCenter.offsetWidth;
        iNewHeight=objCenter.offsetHeight;

        iPositions = cross.getPosition(element);
        iLeft=  iPositions[0];
        iTop=iPositions[1];

        var objNextNode = element.nextSibling;
        while (objNextNode && objNextNode.nodeType!=1)
        {
            objNextNode=objNextNode.nextSibling;
        }

        element.oldSibling=objNextNode;
        element.oldParent=element.parentNode;

        if(!objAnimate)
        {
            objAnimate = document.createElement("DIV");
            objAnimate.id = "elmntAnimate";
            objAnimate.className='elmtMax';
        }


        objAnimate.style.width =iWidth+"px";
        objAnimate.style.height =iHeight+"px";
        objAnimate.style.left = iPositions[0]+"px";
        objAnimate.style.top = iPositions[1]+"px";
        objAnimate.setAttribute("actualWidth",iWidth);
        objAnimate.setAttribute("actualHeight",iHeight);

        objAnimate.appendChild(element);
        objCenter.appendChild(objAnimate);

        iWidth=iNewWidth-iWidth;
        iHeight=iNewHeight-iHeight;

        iPositions = cross.getPosition(objCenter);
        iLeft=-(iPositions[0] -iLeft+5);
        iTop= -(iPositions[1] -iTop+5);

        iClientHeight =  (iClientHeight - iPositions[1]);
        iClientHeight= iClientHeight-30;

        element.iAnimWidth = iWidth;
        element.iAnimHeight = iHeight;
        element.iAnimLeft = iLeft;
        element.iAnimTop = iTop;

        $(objAnimate).animate({"height": "+="+iHeight+"px", "width": "+="+iWidth+"px","left": "-="+(iLeft)+"px","top": "-="+(iTop)+"px"}, 400,null,
                function()
                {
                    if(fnHandler)
                        fnHandler(element,iNewWidth,iNewHeight);
                });
    };

    this.restoreElement=function(element, fnHandler)
    {
        var objAnimate,iWidth,iHeight,iLeft,iTop;

        objAnimate = document.getElementById("elmntAnimate");
        iWidth =element.iAnimWidth;
        iHeight =element.iAnimHeight;
        iLeft =element.iAnimLeft;
        iTop =element.iAnimTop;

        $(objAnimate).animate({"height": "-="+iHeight+"px", "width": "-="+iWidth+"px","left": "+="+(iLeft)+"px","top": "+="+(iTop)+"px"}, 400,null,callBack);

        function callBack()
        {
            var elementParent=element.oldParent;
            var objNextNode = element.oldSibling;

            if(objNextNode)
                elementParent.insertBefore(element,objNextNode);
            else
                elementParent.appendChild(element);

            if(fnHandler)
            {
                iWidth=objAnimate.getAttribute("actualWidth");
                iHeight=objAnimate.getAttribute("actualHeight");
                fnHandler(element,iWidth,iHeight);
            }

            if(objAnimate && objAnimate.parentNode)
                objAnimate.parentNode.removeChild(objAnimate);
        }
    };

    /**
     * This function is used for show the information message
     * @param element
     * @param sMessage
     * @param iInterval if interval is lessthan or equal to zero the information dialog cannot be closed
     */
    this.showToastWindow=function(element ,
                                  sMessage,
                                  iInterval ,
                                  sTitle,
                                  iWidth ,
                                  isModel,
                                  isProng,
                                  sId,
                                  iProngType,
                                  isClose,
                                  sAppendClass,
                                  sRemoveClass,
                                  ignoreWithInClick,
                                  iScope,
                                  scrollObject,

                                  ignoreRegisterEvent,
                                  sHideCallBack,iLeftTW,
                                  iTopTW,bIgnoreParentScroll)
    {
        me.objLastParent;
        var dvTWindow,objTWindow,iLeft,iTop;
        var iPositions = cross.getPosition(element);
        var sActualId=sId;

        if(me.objLastParent)
            util.removeClass(me.objLastParent,"TWindowParent");
        me.objLastParent=element;
        if(me.sLastToastWindowId && me.sLastToastWindowId !=sId)
        {
            dvTWindow = me.getToastWindowElement(me.sLastToastWindowId);
            if(dvTWindow != null)
            {
                 cross.setVisible(dvTWindow,false);
            }
        }
        if(!sId) sId ="";
        objTWindow = me.getToastWindowElement(sId);
        if(!objTWindow)
        {
            var ObjContainerDiv =  document.getElementById("containerDiv");
            objTWindow = document.createElement("div");
            objTWindow.id=me.getToastWindowId(sId);
         // objTWindow.className="toastwin";//("scope",iScope);
            objTWindow.setAttribute("scope",iScope);

            if(ObjContainerDiv)
                ObjContainerDiv.appendChild(objTWindow);
            else
                document.body.appendChild(objTWindow);
        }
        me.sLastToastWindowId = sId;

        if(isModel == undefined || isModel == null)
            isModel=false;

        /*if(isProng == undefined || isProng == null)
         isProng=false;*/
        util.toggleBackground(isModel,isModel);
        var sInnerHTML="<div  class='innInfo'><table border='0' cellspacing='0' cellpadding='0'";
        if(iWidth)
            sInnerHTML+=" width='100%'";
        sInnerHTML+="><tr>" +((sTitle!=undefined ||sTitle!=null )?"<td><span  "+(iWidth? 'style="width:'+(iWidth-50)+';"':'')+" class='infoHeading'>"+ sTitle+"</span></td>" :"");
        if(isClose)//isProng && isClose
        {
            sInnerHTML+="<td><span id='infoClose"+sId+"' height='22px;' style='cursor:pointer;' align='right' ";/*sInnerHTML+="<td><img id='infoClose"+sId+"' height='22px;' style='visibility:hidden;cursor:pointer;' align='right' ";*/
            // sInnerHTML+=" src='"+app.getImagePath()+"closeDlg.gif'> </td>";
            sInnerHTML+=" src='"+app.getImagePath(true)+"blank.png' class='crm crm-close-dlg facrm-font-size-11'></span> </td>";/*   sInnerHTML+=" src='"+app.getImagePath(true)+"blank.png' class='sModule s-closeDlg'> </td>";*/

        }
        sInnerHTML+="</tr><tr><td id='"+me.getToastWindowContentId(sId)+"' class='infoMsgBody' "+(!isClose ? "style='padding-top:5px;'":"")+" colspan=2></td></td></tr></table></div>";

        if(typeof sMessage == "object")
        {
            cross.setVisible(sMessage,false);
            document.body.appendChild(sMessage);
        }

        objTWindow.innerHTML=sInnerHTML;
        if(iWidth)
            objTWindow.style.width = iWidth +'px';

        if(typeof sMessage == "object")
        {
            me.getToastWindowContentElement(sId).appendChild(sMessage);
            cross.setVisible(sMessage,true);
        }
        else
            me.getToastWindowContentElement(sId).innerHTML ="<span>"+sMessage+"</span>";

        if(isProng)
        {
            var iScrollTop=0,iScrollLeft=0,iScrollTop2=0,sAppendStyle,iBottom,iRight,isProngSupport=true,iProngPosition=-1;
            objTWindow.className = "info";
            iRight = (document.body.clientWidth-iPositions[0]); //- iWidth ;
            iBottom =  document.body.clientHeight  - iPositions[1];
            iRight = iRight - element.offsetWidth/2;
            iRight =iRight  - 20;

            if (cross.isIE())
            {
                //iRight =iRight  - 20;
                iBottom =iBottom  - 15;//element.offsetHeight;
                if(cross.getBrowserVersion() < 7)
                    isProngSupport=false;
                if(!bIgnoreParentScroll)
                {
                    iScrollTop = parseInt(objTWindow.parentNode.scrollTop);
                    iScrollLeft = parseInt(objTWindow.parentNode.scrollLeft);
                }
                if(scrollObject)
                {
                    iScrollLeft=iScrollLeft+parseInt(scrollObject.scrollLeft);
                    iScrollTop2=parseInt(scrollObject.scrollTop);
                    iScrollTop=iScrollTop+iScrollTop2;
                }
            }
            else
            {
                if(!bIgnoreParentScroll)
                    iScrollTop = parseInt(window.scrollY);
                //iScrollLeft = parseInt(window.scrollX);
                if(scrollObject)
                {
                    iScrollLeft=iScrollLeft+scrollObject.scrollLeft;
                    iScrollTop2=scrollObject.scrollTop;
                    iScrollTop=iScrollTop+iScrollTop2;
                }
            }

            iBottom+=iScrollTop2;

            sAppendStyle = "right:30px;";
            if(iProngType==undefined||iProngType==null)
                iProngType = Constants.PRONG_BOTTOM;
            if(element.offsetWidth<5)
                sAppendStyle = "left:10px;";
            if((iPositions[1]-iScrollTop) < objTWindow.offsetHeight)
            {
                //iProngType = Constants.PRONG_BOTTOM;
                iBottom = (iBottom-objTWindow.offsetHeight);
            }
            if((iPositions[0]-iScrollLeft) < objTWindow.offsetWidth)
            {
                sAppendStyle  =  "left:20px;";
                iRight = (iRight -objTWindow.offsetWidth);
            }
            if(iProngType == Constants.PRONG_NONE ||iProngType == Constants.PRONG_LEFT || iProngType == Constants.PRONG_RIGHT)
            {
                iProngPosition = 20;

                iLeft=(iProngType==Constants.PRONG_NONE?5:15);
                if(iProngType!=Constants.PRONG_NONE &&(document.body.clientWidth < (iLeft+iPositions[0]+objTWindow.offsetWidth+element.offsetWidth )))
                {
                    iLeft =(iPositions[0]-iLeft-objTWindow.offsetWidth);
                    iProngType = Constants.PRONG_RIGHT;
                }
                else iLeft = iPositions[0]+iLeft+element.offsetWidth ;

                iTop=iPositions[1]-iProngPosition;

                iTop-=iScrollTop2;

                objTWindow.style.left =iLeftTW>0?iLeftTW:iLeft-iScrollLeft;/*todo:change*///iPositions[0] + element.offsetWidth + (iProngType==Constants.PRONG_NONE?5:15);
                //if((document.body.clientHeight - (iPositions[1]+element.offsetHeight+iScrollTop)) < (objTWindow.offsetHeight))
                //   objTWindow.style.top = (iPositions[1]-objTWindow.offsetHeight) + (document.body.clientHeight - (iPositions[1]+element.offsetHeight))+iScrollTop;
                // else
//                objTWindow.style.top = iTop;
                objTWindow.style.top = iTopTW>0?iTopTW:iTop+"";
            }
            else
            {
                objTWindow.style.right =  (iRight+iScrollLeft)+'px';
                if(iProngType == Constants.PRONG_BOTTOM)
                    objTWindow.style.bottom = iBottom+'px';
                else
                    objTWindow.style.top = iTopTW>0?iTopTW:(iPositions[1]-iScrollTop2+element.offsetHeight+10)+'px';
            }
            if(isProngSupport && iProngType!=Constants.PRONG_NONE)
                objTWindow.childNodes[0].innerHTML += me.getProng(sAppendStyle,iProngType,iProngPosition);
        }
        else
        {
            objTWindow.className = "dvURLTWindow";
            $(element).addClass("TWindowParent");
            iLeft=0;
            if(!iWidth)
                objTWindow.style.width=objTWindow.offsetWidth;
            if(document.body.clientWidth < (iPositions[0]+objTWindow.offsetWidth))
                iLeft = (iPositions[0]-objTWindow.offsetWidth) + element.offsetWidth;
            else
                iLeft = iPositions[0];
            //objTWindow.style.left = iLeft-((ObjContainerDiv?ObjContainerDiv.scrollLeft:0)+document.body.scrollLeft);
            objTWindow.style.left = iLeftTW>0?iLeftTW:iLeft;
            objTWindow.style.top =  iTopTW>0?iTopTW:(iPositions[1] + (element.offsetHeight-1.5));
        }

        if(isProng)
        {
            var t;
            clearTimeout(t);
            if(iInterval &&iInterval>0)
            {
                t=setTimeout(function()
                {
                    me.hideToastWindowDlg(isModel,sActualId,element,sAppendClass,sRemoveClass,ignoreWithInClick,sHideCallBack);
                    util.removeClass(element,"TWindowParent");
                },iInterval);
            }
            objTWindow.onmouseover=function()
            {
                /*if(document.getElementById("infoClose"+sId))
                    document.getElementById("infoClose"+sId).style.visibility = "visible";*/
                clearTimeout(t);
            };
            objTWindow.onmouseout=function()
            {
                objTWindow.className = "info";
                /*if(document.getElementById("infoClose"+sId))
                    document.getElementById("infoClose"+sId).style.visibility = "hidden";*/
                if(iInterval &&iInterval>0)
                {
                    t=setTimeout(function()
                    {
                        me.hideToastWindowDlg(isModel,sActualId,element,sAppendClass,sRemoveClass,ignoreWithInClick,sHideCallBack);
                        util.removeClass(element,"TWindowParent");
                    },2000);
                }
            };
        }
        if(isClose)//isProng&&isClose
        cross.addListener(document.getElementById('infoClose'+sId),cross.EVENT_ONCLICK,msg.hideToastWindowDlg,true,[isModel,sActualId,element,sAppendClass,sRemoveClass,ignoreWithInClick,sHideCallBack]);

        var clFrame=null;
        if(window.frames.length>1)// if advance search response in frames template
            clFrame=window.frames[1];

        if(me.iTWindowListenerId >= 0)
            cross.unregisterEventListener(me.iTWindowListenerId);

        if(clFrame)
        {
            try{
                if(clFrame.msg.iTWindowListenerId >= 0)
                clFrame.cross.unregisterEventListener(clFrame.msg.iTWindowListenerId);
            }
            catch(e){
                clFrame=null;
            }
        }

        if(!ignoreRegisterEvent)
        {

            if(clFrame)
                clFrame.msg.iTWindowListenerId =clFrame.cross.registerEventListener(cross.EVENT_ONCLICK,msg.hideToastWindowDlg,[isModel,sActualId,element,sAppendClass,sRemoveClass,ignoreWithInClick,sHideCallBack],null,Constants.SCOPE_SCREEN);
            me.iTWindowListenerId =cross.registerEventListener(cross.EVENT_ONCLICK,msg.hideToastWindowDlg,[isModel,sActualId,element,sAppendClass,sRemoveClass,ignoreWithInClick,sHideCallBack],null,Constants.SCOPE_SCREEN);
        }
    };





    this.showImage=function(element , sImgUrl, iWidth, iHeight,isShowOriginalImg,e)
    {
        var objImgPreview = document.getElementById("dvImgPreview");

        if(!objImgPreview)
        {
            objImgPreview = document.createElement("div");
            objImgPreview.id="dvImgPreview";
            objImgPreview.className = "msg-def dvImgPrev";
            objImgPreview.style.zIndex = "2";

            var objContainerDiv =  document.getElementById("containerDiv");
            if(objContainerDiv)
                objContainerDiv.appendChild(objImgPreview);
            else
                document.body.appendChild(objImgPreview);
        }

        var sInnerHTML="<div";
        sInnerHTML+=">";
        sInnerHTML+="<div>&nbsp;<img id='imgPrevClose' class='imgPrevClose' width='22'  height='22' src="+app.getImagePath(false)+"close-black.gif>";
        sInnerHTML+="</div><div id='dvImgPrevBody' class='dvImgPrevBody'";
        if(isShowOriginalImg)
            sInnerHTML+=" style='overflow:auto'";
        sInnerHTML+="><img id='imgUrl' onload='msg.resizeImage(this,"+isShowOriginalImg+")'  style='cursor:pointer;' src="+sImgUrl+">";
        sInnerHTML+="</div></div>";

         /*objImgPreview.style.left = (  (cross.getClientWidth()/2) -(iWidth/2)+(window.scrollX) ) +"px";//(iPositions[0]) ;
         objImgPreview.style.top = ( ( (cross.getClientHeight()/2)- (iHeight/2))+(window.scrollY)) +"px";//(iPositions[1]);*/

        objImgPreview.innerHTML=sInnerHTML;
        cross.cancelBubble(e);
        return false;


        //util.toggleBackground(false,true);
    };


    /**
     * This function is used for show the image
     */
    this.isZooming=false;
    this.resizeImage=function(image,isShowOriginalImg)
    {
        if(me.isZooming)
            return false;

         me.isZooming=true;

        var iWidth=0,iHeight=0;
        iWidth=image.width;
        iHeight=image.height;


        var iPercent;
        var iMaxWidth=(cross.getClientWidth());
        var iMaxHeight=(cross.getClientHeight()-70);

        //alert(iHeight+"===="+iWidth);
        //alert("max "+iMaxHeight+"===="+iMaxWidth);

        if(isShowOriginalImg)
        {
            if(iWidth>iMaxWidth)
                iWidth=iMaxWidth-25;
            if(iHeight>iMaxHeight)
                iHeight=iMaxHeight;
        }
        else
        {
            image.style.width="100%";
            image.style.height="100%";

            if(iWidth > iMaxWidth)
            {
                iPercent=(iMaxWidth/iWidth)*100;
                iWidth=iMaxWidth;
                iHeight=iHeight*(iPercent/100);
            }

            if(iHeight>iMaxHeight)
            {
                iPercent=(iMaxHeight/iHeight)*100;
                iHeight=iMaxHeight;
                iWidth=iWidth*(iPercent/100);
            }
        }

        //alert(iHeight+"===="+iWidth);
        //alert(iMaxWidth+"===="+iWidth);

        var dvImgPrevBody=document.getElementById('dvImgPrevBody');
        dvImgPrevBody.style.width=iWidth+20;
        if(iHeight == iMaxHeight)
        {
            dvImgPrevBody.style.height=iHeight-35;
        }
        else
        {
            dvImgPrevBody.style.height=iHeight;
            iHeight=iHeight+25;
        }



        var objImgPreview = document.getElementById("dvImgPreview");
        objImgPreview.style.width = 0;
        objImgPreview.style.height = 0;
        objImgPreview.style.left = (  (cross.getClientWidth()/2) -(iWidth/2)+(window.scrollX?window.scrollX:0) ) +"px";//(iPositions[0]) ;
        objImgPreview.style.top = ( ( (cross.getClientHeight()/2)- (iHeight/2))+(window.scrollY?window.scrollY:0)) +"px";//(iPositions[1]);
        //objImgPreview.style.display='block';



         $(objImgPreview).animate({"height": "+="+iHeight+"px", "width": "+="+(iWidth+20)+"px",
            "left": "="+((cross.getClientWidth()/2) -(iWidth/2)+(window.scrollX?window.scrollX:0))+"px",
            "top": "="+(((cross.getClientHeight()/2)- (iHeight/2))+(window.scrollY?window.scrollY:0))+"px"}, 300,null
                 ,function()
                 {
                     me.isZooming=false;

                     objImgPreview.style.display='block';
                     var imgPreviewClose=document.getElementById("imgPrevClose");

                     me.isListernerCalled=true;
                     cross.addListener(imgPreviewClose,cross.EVENT_ONCLICK,msg.removeImage,true,[objImgPreview,iHeight,iWidth,imgPreviewClose,cross.EVENT_ONCLICK]);
                     //cross.addListener(document,cross.EVENT_ONKEYUP,msg.removeImage,true,[objImgPreview,iHeight,iWidth,document,cross.EVENT_ONKEYUP]);

                 }); //  "left": "-="+(iWidth/2)+"px","top": "-="+(iHeight/2)+"px"}
    };



    this.removeImage=function(objImgPrev,iHeight,iWidth,objEventSrc,iEventType,evt)
    {
        if (me.isListernerCalled)
        {
            if ((iEventType == cross.EVENT_ONKEYUP) && cross.getKeyCode(evt) != 27) // 27 -- Escape key code
                return false;

            $(objImgPrev).animate({
                    "height": "-=" + iHeight + "px", "width": "-=" + iWidth + "px",
                    "left": "+=" + (iWidth / 2) + "px",
                    "top": "+=" + (iHeight / 2) + "px"
                }, 200, null,
                function () {
                    if (objImgPrev && objImgPrev.parentNode)
                        objImgPrev.parentNode.removeChild(objImgPrev);
                    util.toggleBackground(false);
                    cross.removeListener1(objEventSrc, iEventType, msg.removeImage);
                });
        }

    };

    /**
     * This function is used for show confirm message
     * @param sMessage
     * @param sTitle
     * @param sFnHandler
     */
    this.showConfirm=function(sMessage, sTitle , sFnHandler,args,iWidth,sButtonVal_1,sButtonVal_2,isCancel,sImgSrc) {
        iWidth = (iWidth ? iWidth : 450);
        var iHeight = 100, objConfirm = document.getElementById("dvConfirm"), sDefaultImgPath;
        if (!sImgSrc)
            sImgSrc = app.getImagePath() + "warning.png";

        if(clAppBuffer.getFarsiCalendar() == "true")
        {

            if (!objConfirm)
            {
                objConfirm = document.createElement("div");
                objConfirm.id = "dvConfirm";
                document.body.appendChild(objConfirm);
                objConfirm.className = "bootstrap modal fade";
               // objConfirm.className = "bootstrap modal fade";
                objConfirm.role="dialog";
                objConfirm.style.position="fixed";
               objConfirm.style.display = 'none';
                objConfirm.style.zIndex="9999";
            }

            var sHtml;
            <!-- Modal -->
            //sHtml='<div class="modal fade" id="myModal" role="dialog" style="width:'+(iWidth+20)+'">';
            sHtml= '<div class="modal-dialog" style="width:'+(iWidth+20)+'">';

            <!-- Modal content -->
            sHtml+= '<div class="modal-content">';
            sHtml+= '<div class="modal-header">';
            if(isCancel)
                sHtml+= ' <button type="button" class="close" id="cClose" data-dismiss="modal">&times;</button>';//data-dismiss="modal"
            sHtml+= '<h4 class="modal-title">'+(sTitle ? sTitle : '&nbsp;') +'</h4>';
            sHtml+= '</div>';
            sHtml+= '<div class="modal-body">';

            sHtml += "<table align='center'  style='height:" + iHeight + "px;width:" + iWidth + "px;' class='confmBody confirm-def' cellspacing=0 cellpadding=0 border=0><tr><td>" +
            "<td style='padding-right:5px;'><img  src=" + sImgSrc + "></td>" +
            "<td>" + (sMessage ? sMessage : "") + "</td>" +
            "</tr></table>";

            sHtml+= '</div>';

            sHtml+= '<div class="modal-footer">';
            //sHtml+= '<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>';

            if (args == null)
                args = [];
            sButtonVal_1 = (sButtonVal_1 ? sButtonVal_1 : " " + MsgHandler.getMsg(MsgConstants.YES) + " ");
            sButtonVal_2 = (sButtonVal_2 ? sButtonVal_2 : " " + MsgHandler.getMsg(MsgConstants.NO) + " ");

            var sActionHtml = "<div  class='confmActions confirm-def'>";
            sActionHtml = "<input style='width:" + (((sButtonVal_1.length) * 10) + 10) + "px;cursor:pointer;height:auto;' type='button' id='cYes' value='" + sButtonVal_1 + "' class='nPrimaryButton' >";
            sActionHtml +="&nbsp;<input style='width:" + (((sButtonVal_2.length) * 10) + 10) + "px;cursor:pointer;height:auto;' type='button' id='cNo' value='" + sButtonVal_2 + "' class='nButton'>";
            if(isCancel)
                sActionHtml += "&nbsp;<input style='width:65;cursor:pointer;height:auto;' type='button' id='cCancel' value='" + MsgHandler.getMsg(MsgConstants.CANCEL) + "' class='nButton'>";
            //sActionHtml +="</div>";

            sHtml+= sActionHtml;
            sHtml+= '</div>';
            sHtml+= '</div>';

            sHtml+= '</div>';
            sHtml+= '</div>';

            objConfirm.innerHTML=sHtml;
            cross.setVisible(objConfirm, true);

            objConfirm.style.width = (iWidth + 20) + "px";
            objConfirm.style.left = ((document.body.clientWidth - objConfirm.offsetWidth) / 2);
            objConfirm.style.top = (document.body.clientHeight - objConfirm.offsetHeight) / 2;


            util.toggleBackground(true, true);
            //$("#myModal").modal({show: true});
            $("#dvConfirm").modal({backdrop: "static"});
            //$("#myModal").modal("show");

            cross.addListener(document.getElementById('cYes'), cross.EVENT_ONCLICK, msg.onClkConfirmActions, true, [Constants.YES, sFnHandler, args]);
            cross.addListener(document.getElementById('cNo'), cross.EVENT_ONCLICK, msg.onClkConfirmActions, true, [Constants.NO, sFnHandler, args]);
            cross.addListener(document.getElementById('cClose'), cross.EVENT_ONCLICK, msg.onClkConfirmActions, true, [Constants.CANCEL, sFnHandler, args]);
            if (isCancel)
                cross.addListener(document.getElementById('cCancel'), cross.EVENT_ONCLICK, msg.onClkConfirmActions, true, [Constants.CANCEL, sFnHandler, args]);

            cross.addListener(document, cross.EVENT_ONKEYUP, msg.onKUpConfirmActions, true, [Constants.CANCEL, sFnHandler, args]);
        }
        else
        {

            if (!objConfirm) {
                objConfirm = document.createElement("div");
                objConfirm.id = "dvConfirm";
                document.body.appendChild(objConfirm);
                objConfirm.className = "msg-def confirm";
                objConfirm.style.display = 'none';
            }
            util.toggleBackground(true, true);

            objConfirm.innerHTML = "<span  style='cursor:pointer;float:right' src=" + app.getImagePath(true) +
            "blank.png  class='crm crm-close-dlg facrm-font-size-11' id='cClose'></span>";
            /*objConfirm.innerHTML="<img align='right' style='cursor:pointer;' src="+app.getImagePath(true)+
             "blank.png  class='sModule s-closeDlg'id='cClose'>";*/
            objConfirm.innerHTML += "<div  class='confmHeading'>" + (sTitle ? sTitle : '&nbsp;') + "</div>";
            objConfirm.innerHTML += "<table align='center'  style='height:" + iHeight + "px;width:" + iWidth + "px;' class='confmBody confirm-def' cellspacing=0 cellpadding=0 border=0><tr><td>" +
            "<td style='padding-right:5px;'><img  src=" + sImgSrc + "></td>" +
            "<td>" + (sMessage ? sMessage : "") + "</td>" +
            "</tr></table>";

            if (args == null)
                args = [];
            sButtonVal_1 = (sButtonVal_1 ? sButtonVal_1 : " " + MsgHandler.getMsg(MsgConstants.YES) + " ");
            sButtonVal_2 = (sButtonVal_2 ? sButtonVal_2 : " " + MsgHandler.getMsg(MsgConstants.NO) + " ");
            //onclick='msg.onClkConfirmActions(this,\""+Constants.OK+"\",\""+sFnHandler+"\","+args+",event);
            objConfirm.innerHTML += "<div  class='confmActions confirm-def'><input style='width:" + (((sButtonVal_1.length) * 10) + 10) + "px;cursor:pointer;height:auto;' type='button' id='cYes' value='" + sButtonVal_1 + "' class='nPrimaryButton' >" +
            "&nbsp;<input style='width:" + (((sButtonVal_2.length) * 10) + 10) + "px;cursor:pointer;height:auto;' type='button' id='cNo' value='" + sButtonVal_2 + "' class='nButton'>" +
            (isCancel ? "&nbsp;<input style='width:55;cursor:pointer;height:auto;' type='button' id='cCancel' value='" + MsgHandler.getMsg(MsgConstants.CANCEL) + "' class='nButton'>" : "") + "</div>";

            cross.setVisible(objConfirm, true);
            objConfirm.style.width = (iWidth + 10) + "px";
            objConfirm.style.left = ((document.body.clientWidth - objConfirm.offsetWidth) / 2);
            objConfirm.style.top = (document.body.clientHeight - objConfirm.offsetHeight) / 2;


            cross.addListener(document.getElementById('cYes'), cross.EVENT_ONCLICK, msg.onClkConfirmActions, true, [Constants.YES, sFnHandler, args]);
            cross.addListener(document.getElementById('cNo'), cross.EVENT_ONCLICK, msg.onClkConfirmActions, true, [Constants.NO, sFnHandler, args]);
            cross.addListener(document.getElementById('cClose'), cross.EVENT_ONCLICK, msg.onClkConfirmActions, true, [Constants.CANCEL, sFnHandler, args]);
            if (isCancel)
                cross.addListener(document.getElementById('cCancel'), cross.EVENT_ONCLICK, msg.onClkConfirmActions, true, [Constants.CANCEL, sFnHandler, args]);

            cross.addListener(document, cross.EVENT_ONKEYUP, msg.onKUpConfirmActions, true, [Constants.CANCEL, sFnHandler, args]);
        }
    };

    /**
     *  This function is used for show message
     * @param iMsgType
     * @param sMessage
     * @param sTitle
     */
    this.showMessage=function(iMsgType, sMessage, sTitle,iWidth,sFocusFldId,fnHandler)
    {
        iWidth = (iWidth?iWidth:450);
        var  iHeight=100,objMessage = document.getElementById("dvMessage");

        util.toggleBackground(true,true);
        //if(clAppBuffer.getLanguage() == Constants.ILANGUAGE_TYPE.ARABIC || clAppBuffer.getLanguage() == Constants.ILANGUAGE_TYPE.PERSIAN)
        {
            sMessage = decodeURIComponent(sMessage) ;
            sMessage = sMessage .replace(/\+/g, ' ');
        }

        if(clAppBuffer.getFarsiCalendar() == "true")
        {
            if(!objMessage)
            {
                objMessage = document.createElement("div");
                objMessage.id="dvMessage";
                window.document.body.appendChild(objMessage);
                objMessage.className = "bootstrap modal fade";
                objMessage.role="dialog";
                objMessage.style.position="fixed";
                objMessage.style.display = 'none';
                objMessage.style.zIndex="9999";

            }
            var sHtml;
            <!-- Modal -->
            //sHtml='<div class="modal fade" id="myModal" role="dialog" style="width:'+(iWidth+20)+'">';
            sHtml= '<div class="modal-dialog" style="width:'+(iWidth+20)+'">';

            <!-- Modal content -->
            sHtml+= '<div class="modal-content">';
            sHtml+= '<div class="modal-header">';
            sHtml+= '<h4 class="modal-title">'+(sTitle ? sTitle : '&nbsp;') +'</h4>';
            sHtml+= '</div>';
            sHtml+= '<div class="modal-body">';

            sHtml+="<table align='center' style='height:"+iHeight+"px;width:"+iWidth+"px;' class='confmBody confirm-def' cellspacing=0 cellpadding=0 border=0><tr><td>" +
            "<td style='padding-right:10px;'><span  class='crm crm-information' style='padding:5px'></span></td>"+
            "<td style='line-height: 20px'>" +(sMessage?sMessage:"")+"</td>"+
            "</tr></table>";

            sHtml+= '</div>';

            sHtml+= '<div class="modal-footer">';

            var sActionHtml="<div  class='confirm-def confmActions'>";

            sActionHtml+="<input style='width:auto;height:auto;cursor:pointer;' id='mOk' type='button' value='"+MsgHandler.getMsg(MsgConstants.OK)+"' class='nPrimaryButton' onclick='msg.hideMsgDlg(\"dvMessage\",false,"+sFocusFldId+",event);'>";
            sActionHtml+="</div>";

            sHtml+= sActionHtml;

            sHtml+= '</div>';
            sHtml+= '</div>';

            sHtml+= '</div>';
            sHtml+= '</div>';

            objMessage.innerHTML=sHtml;
            cross.setVisible(objMessage,true);

            if(fnHandler)
            {
                cross.addListener(document.getElementById('mOk'),cross.EVENT_ONCLICK,fnHandler,true);
                cross.addListener(document.getElementById('mClose'),cross.EVENT_ONCLICK,fnHandler,true);
            }

            objMessage.style.width = (iWidth+20)+'px';
            objMessage.style.left= (window.document.body.clientWidth-objMessage.offsetWidth)/2+'px';
            objMessage.style. top= (window.document.body.clientHeight-objMessage.offsetHeight)/2+'px';


            $("#dvMessage").modal({backdrop: "static"});
        }
        else
        {
            if(!objMessage)
            {
                objMessage = document.createElement("div");
                objMessage.id="dvMessage";
                window.document.body.appendChild(objMessage);
                objMessage.className = "msg-def confirm";
            }

            objMessage.innerHTML="<span align='right'  id='mClose'  style='cursor:pointer;float: right;' src="+app.getImagePath(true)+
                                 "blank.png class='crm crm-close-dlg facrm-font-size-11' onclick='msg.hideMsgDlg(\"dvMessage\",false,"+sFocusFldId+",event);'></span>";/*  objMessage.innerHTML="<img align='right'  id='mClose'  style='cursor:pointer;' src="+app.getImagePath(true)+
                                 "blank.png class='sModule s-closeDlg' onclick='msg.hideMsgDlg(\"dvMessage\",false,"+sFocusFldId+",event);'>";*/
            objMessage.innerHTML+="<div  class='confmHeading'>" +(sTitle?sTitle:'&nbsp;')+"</div>" ;
            objMessage.innerHTML+="<table align='center' style='height:"+iHeight+"px;width:"+iWidth+"px;' class='confmBody confirm-def' cellspacing=0 cellpadding=0 border=0><tr><td>" +
                                  "<td style='padding-right:10px;'><span  class='crm crm-information' style='padding:5px'></span></td>"+
                                  "<td style='line-height: 20px'>" +(sMessage?sMessage:"")+"</td>"+
                                  "</tr></table>";/* objMessage.innerHTML+="<table align='center' style='height:"+iHeight+"px;width:"+iWidth+"px;' class='confmBody confirm-def' cellspacing=0 cellpadding=0 border=0><tr><td>" +
                                  "<td style='padding-right:5px;'><img  src="+app.getImagePath()+"info.png></td>"+
                                  "<td>" +(sMessage?sMessage:"")+"</td>"+
                                  "</tr></table>";*/
            //objMessage.innerHTML+="<div style='height:"+iHeight+"px;width:"+iWidth+"px;' class='confmBody confirm-def'>"+(sMessage?sMessage:"")+"</div>";

            objMessage.innerHTML+="<div  class='confirm-def confmActions'><input style='width:auto;height:auto;cursor:pointer;' id='mOk' type='button' value='"+MsgHandler.getMsg(MsgConstants.OK)+"' class='nPrimaryButton' onclick='msg.hideMsgDlg(\"dvMessage\",false,"+sFocusFldId+",event);'></div>";
            cross.setVisible(objMessage,true);

            //document.getElementById("mOk").focus();

            if(fnHandler)
            {
                cross.addListener(document.getElementById('mOk'),cross.EVENT_ONCLICK,fnHandler,true);
                cross.addListener(document.getElementById('mClose'),cross.EVENT_ONCLICK,fnHandler,true);
            }

            objMessage.style.width = (iWidth+6)+'px';
            objMessage.style.left= (window.document.body.clientWidth-objMessage.offsetWidth)/2+'px';
            objMessage.style. top= (window.document.body.clientHeight-objMessage.offsetHeight)/2+'px';
        }

    };

      this.hideBusinessMsg=function()
      {
        var objMsgBox=document.getElementById("msgbox");
        if(objMsgBox)
          objMsgBox.style.display="none";
      };

    this.showBusinessMsg=function(sMessage,iMsgType)
    {
        var objMsgBox=document.getElementById("msgbox");
        if(objMsgBox)
        {
            objMsgBox.className="msgBox";
            if(iMsgType==Validation.INFO_MSG)
                util.addClass(objMsgBox,"infoMsg");
            else if(iMsgType==Validation.ERROR_INTEGRATION)
                util.addClass(objMsgBox,"integrationMsg");
            else if(iMsgType==Validation.ERROR_LICENSE)
                util.addClass(objMsgBox,"licenseMsg");
            else
                util.addClass(objMsgBox,"errorMsg");


//            cross.setVisible(objMsgBox,true);
            objMsgBox.style.display = "inline-block";
//            objMsgBox.className = "errBox";
//            objMsgBox.style.display="block";
            objMsgBox.innerHTML=sMessage;

            /*"<span align='right'  style='cursor:pointer;height:18px;padding:0;margin-top:0;float:right;' src="+app.getImagePath(true)+
             "blank.png class='fa crm crm-close-dlg facrm-font-size-8' onclick='msg.hideBusinnesMsg(\"msgbox\");'></span>"+*/


            /* objMsgBox.innerHTML="<span><img align='right'  style='cursor:pointer;height:18px;padding:0;margin-top:0;' src="+app.getImagePath(true)+
                             "blank.png class='sModule s-closeDlg' onclick='msg.hideBusinnesMsg(\"msgbox\");'></span>"+sMessage;*/
//            objMsgBox.innerHTML=sMessage;
//             me.showMessage(0,sMessage,"Message");
        }
        else
            me.showMessage(0,sMessage,MsgHandler.getMsg(MsgConstants.MESSAGE));
    };
    this.hideBusinnesMsg = function(sMsgBoxId)
    {
       document.getElementById(sMsgBoxId).style.display = "none";
    };
    /**
     * This function is used for handle the  confirm dialog actions like(Yes/NO)
     * @param element: is object of the action button
     */


    this.onClkConfirmActions=function(iAction,handler,args)
    {
        me.hideMsgDlg("dvConfirm",false);
        if(!handler || handler != "undefined")
        {
            var newArgs = new Array();
            if(args.length>0)
            {
                for (var i = 0; i < args.length; i++)
                    newArgs.push(args[i]);
            }
            newArgs.push(parseInt(iAction));
          //  alert("fn="+handler)
            cross.callFunction(window,eval(handler),newArgs);
        }

        cross.removeListener1(document,cross.EVENT_ONKEYUP,msg.onKUpConfirmActions);
        cross.removeListener1(document,cross.EVENT_ONKEYUP,msg.onClkConfirmActions);
    };

    this.onKUpConfirmActions=function(iAction,handler,args,evt)
    {
        var iKeyCode=cross.getKeyCode(evt);
        if(iKeyCode == 8 || iKeyCode == 13 || iKeyCode == 27)//8 -- backspace, 13 -- enter, 27 -- esc
        {
            me.onClkConfirmActions(iAction,handler,args);

        }
    };
    /**
     * This function is used for hide the message dialog
     * @param sDvId
     * @param isToast
     * @param evt
     */
    this.hideMsgDlg=function(sDvId,isToastOrInfo,sFocusFldId,evt)
    {
        var objMsg= document.getElementById(sDvId);
        if(objMsg)
        {
            if(isToastOrInfo)
            {
                objMsg.onmouseover=null;
                objMsg.onmouseout=null;
            }
            objMsg.parentNode.removeChild(objMsg);
            //cross.setVisible(objMsg,false);
        }
        util.toggleBackground(false);
        util.toggleDlgBackground(false);
        if(sFocusFldId)
            document.getElementById("sFocusFldId").focus();
    };
    /**
     * This function is used for hide the ToastWindow dialog
     */
    this.hideToastWindowDlg=function(isModel,sId,element,sAppendClass,sRemoveClass,ignoreWithInClick,sHideCallBack,evt)
    {
        if(isModel == undefined)
            isModel=false;
        var objDiv= me.getToastWindowElement(); // non user specific id
        if(isModel)
            util.toggleBackground(false);

        var isShow =false,srcElmt = (evt?cross.getSrcElement(evt):null);

        if(evt && ignoreWithInClick)
        {
            if(srcElmt.id!="infoClose"+(sId?sId:''))
            {
                objDiv = me.getToastWindowElement(sId);
                if(objDiv)
                {
                    if(srcElmt.nodeName=="SELECT"||srcElmt.nodeName=="OPTION"){
                        var parentNode=srcElmt;
                        while(parentNode){
                            if(parentNode == objDiv)
                                return true;
                            parentNode = parentNode.parentNode;
                        }
                    }
                    else if(util.hasClass(srcElmt,"cAutoComplete")||util.hasClass(srcElmt,"lAutoComplete")||util.hasClass(srcElmt,"aAutoComplete")){
                        return true;
                    }
                    else{
                        var iWidth,iHeight,iPositions,iTargetX,iTargetY;
                        iWidth= objDiv.offsetWidth;
                        iHeight= objDiv.offsetHeight;
                        iPositions = cross.getPosition(objDiv);
                        evt=cross.getEvent(evt);
                        iTargetX = evt.clientX + (window.scrollX?window.scrollX:0);
                        iTargetY = evt.clientY + (window.scrollY?window.scrollY:0);
                        if((iTargetX>=iPositions[0] && iTargetX<=(iPositions[0]+iWidth)) && (iTargetY>=iPositions[1] && iTargetY<=(iPositions[1]+iHeight)))
                        return true;
                    }
                }
                else
                    objDiv = me.getToastWindowElement(); // non user specific ids
            }

        }
        while(srcElmt)
        {
            if(srcElmt == element)
            {
                isShow = true;
                break;
            }
            else
                isShow= false;
            srcElmt = srcElmt.parentNode;
        }

//        if(!ignoreWithInClick && (!isShow && objDiv))
        if(!isShow && me.getToastWindowElement())
        {

            objDiv.parentNode.removeChild(objDiv);
            util.removeClass(element,"TWindowParent");
        }
        else if(sId)
        {
            objDiv = me.getToastWindowElement(sId);

            if(objDiv)
            {
                if(isShow)
                    cross.setVisible(objDiv,true);
                else
                {

                    cross.setVisible(objDiv,false);
                    util.removeClass(element,"TWindowParent");
                }
            }
        }
        if(!isShow){
            if(sAppendClass)
                util.addClass(element,sAppendClass);
            if(sRemoveClass)
                util.removeClass(element,sRemoveClass);
        }
        if(sHideCallBack)
            eval(sHideCallBack)(isShow);
    };

    this.removeToastWindowDlg = function(sId)
    {
        var objTWDlg = me.getToastWindowElement(sId);
        if(objTWDlg)
            objTWDlg.parentNode.removeChild(objTWDlg);
    };

    this.getToastWindowId=function(sId)
    {
        return "dvTWindow"+(sId?sId:"");
    };

    this.getToastWindowContentId=function(sId)
    {
        return "msgBody"+(sId?sId:"");
    };

    this.getToastWindowElement=function(sId)
    {
        return document.getElementById(me.getToastWindowId(sId));
    };

    this.getToastWindowContentElement=function(sId)
    {
        return document.getElementById(me.getToastWindowContentId(sId));
    };


    this.removeToastWindows = function(iScope)
    {
        //var ObjContainerDiv =  document.getElementById("containerDiv");

        //ObjContainerDiv.getEl

                           // later can be replaced with querySelector,QuerySelectorAll, depending on the performance ll chnage this code
       $('div[scope='+iScope+']').each
               (
               function(id, element)
                {
                 //var iScopeVal=element.getAttribute("scope");
                 //if(iScopeVal && iScopeVal==iScope)
                 {

                  var parentElement=element.parentNode;
                  parentElement.removeChild(element);
                  element=null;
                 }
                }
            );

        //var objTWDlg = document.getElementById("dvTWindow"+(sId?sId:''));
        //objTWDlg.parentNode.removeChild(objTWDlg);
    };




    this.showToastWindowFromURL=function(element, sUrl,isProng,sId,iProngType,isClose,sAppendClass,sRemoveClass,isLoadResources,ignoreWithInClick,iScope,objScroll,iLeft,iTop,iInterval,ignoreRegisterEvent,isModel,bIgnoreParentScroll)
    {
        me.isProgress;
        //me.isLoadResources=isLoadResources;
        var objDiv = me.getToastWindowElement(sId);

        if(objDiv)
        {
            var sContent = cross.getChildren(me.getToastWindowContentElement(sId))[0];
            objDiv.parentNode.removeChild(objDiv);
            me.showToastWindow(element,sContent,iInterval,null,null,isModel,isProng,sId,iProngType,isClose,sAppendClass,sRemoveClass,ignoreWithInClick,iScope,objScroll,ignoreRegisterEvent,null,iLeft,iTop);
        }
        else if(!me.isProgress)
        {
            me.element = element;
            /*me.isProng = isProng;
            me.sId = sId;
            me.iInterval = iInterval;
            me.iProngType = iProngType;
            me.isProgress = true;
            me.isClose = isClose;
            me.sAppendClass = sAppendClass;
            me.sRemoveClass = sRemoveClass;
            me.ignoreWithInClick = ignoreWithInClick;
            me.iScope = iScope;
            me.objScroll = objScroll;
            me.iLeftTW = iLeft;
            me.iTopTW = iTop;
            me.isModel = isModel;
            me.ignoreRegisterEvent = ignoreRegisterEvent;*/
            me.showToastWindow(element,'<div id="loadStat'+sId+'" style="width:150px; height:50px"></div>',iInterval,null,null,isModel,isProng,sId,iProngType,isClose,sAppendClass,sRemoveClass,ignoreWithInClick,iScope,objScroll,ignoreRegisterEvent,null,iLeft,iTop,bIgnoreParentScroll);
            con.sendPostRequest(sUrl, null, null, arhShowToastWindowFromURL, false,"loadStat"+sId);
        }

        function arhShowToastWindowFromURL(sResponse)
        {
            me.isProgress = false;
            var objDiv = me.getToastWindowElement(sId);
            if(objDiv)
            {
                objDiv.parentNode.removeChild(objDiv);
                me.showToastWindow(element,sResponse,null,null,null,isModel,isProng,sId,iProngType,isClose,sAppendClass,sRemoveClass,ignoreWithInClick,iScope,objScroll,ignoreRegisterEvent,null,iLeft,iTop,bIgnoreParentScroll);
                if(isLoadResources)
                {
                    initAllCombos=null;
                    loadResources(me.getToastWindowContentElement(sId),util.onScriptsLoad);
                }
            }

        }
    };

    this.arhShowToastWindowFromURL_=function(sResponse)
    {

        me.isProgress = false;
        var objDiv = me.getToastWindowElement(me.sId);
        if(objDiv)
        {
            objDiv.parentNode.removeChild(objDiv);
            me.showToastWindow(me.element,sResponse,null,null,null,me.isModel,me.isProng,me.sId,me.iProngType, me.isClose,me.sAppendClass,me.sRemoveClass,me.ignoreWithInClick,me.iScope,me.objScroll,me.ignoreRegisterEvent,null,me.iLeftTW,me.iTopTW);
            if(me.isLoadResources)
            {
                initAllCombos=null;
                loadResources(me.getToastWindowContentElement(me.sId),util.onScriptsLoad);
            }
        }

    };

    this.getProng=function(sAppendStyle, iProngType, iProngPosition)
    {
        var sProng = "" ,sProngClass,sProngLtClass,sProngDkClass;
        if(iProngType == Constants.PRONG_BOTTOM)
        {
            sProngClass = "bottom-prong";
            sProngDkClass= "bottom-prong-dk";
            sProngLtClass= "bottom-prong-lt";
        }
        else if(iProngType == Constants.PRONG_TOP)
        {
            sProngClass = "top-prong";
            sProngDkClass= "top-prong-dk";
            sProngLtClass= "top-prong-lt";
        }

        if(iProngType == Constants.PRONG_BOTTOM || iProngType == Constants.PRONG_TOP)
        {
            sProng = "<div id='prong' class='"+sProngClass+"' style='position: absolute;"+sAppendStyle+"'>"+
                     "<div class='"+sProngDkClass+"'></div>"+
                     "<div class='"+sProngLtClass+"'></div>"+
                     "</div>";
        }
        else{
            sProng = "<div class='prong-left-right1' style='"+(iProngType == Constants.PRONG_LEFT ?"border-right: 10px solid #CCC;"+(navigator.userAgent.indexOf("Firefox")!=-1 ?"left:-9px;":"left:-11px;")+" ":"border-left: 10px solid #CCC; "+(navigator.userAgent.indexOf("Firefox")!=-1 ?"right:-9px;":"right:-10px;")+"")+" top:"+iProngPosition+"px;'>"+
                     "<div></div>"+
                     "</div>";
            sProng += "<div class='prong-left-right2' style='"+(iProngType == Constants.PRONG_LEFT ?"border-right: 10px solid #FFF; left:-9px; _left:-10px; ":"border-left: 10px solid #FFF; right:-9px; _right:-8px; ")+" top:"+(iProngPosition+1)+"px;'>"+
                      "<div></div>"+
                      "</div>";
        }
        return sProng;
    };

    this.setPageStatus=function(sMsg,iWidth,iHeight){
        if(!iWidth || iWidth==0)
            iWidth=16;
        if(!iHeight || iHeight==0)
            iHeight=20;

         var ObjContainerDiv =  document.getElementById("containerDiv");
        var objTWindow=document.getElementById("pgdiv");
        if(!objTWindow)
        {     var sStatus="<div id='pgdiv' " +
                    "style='padding-left:2px;bottom:1px;position: fixed ;border:1px solid #D5D9B8;border-radius-5px;" +
                    "-moz-border-radius:5px;height:"+iHeight+"px;width:"+iWidth+"%'>" +
                    " <table width='100%' height=100%'><tr><td id='pgstatus'>"+sMsg+" </td></tr></table></div>";
             objTWindow = document.createElement("div");
           //  objTWindow.id="pagestat";
             objTWindow.innerHTML=sStatus;
              if(ObjContainerDiv)
                ObjContainerDiv.appendChild(objTWindow);
            else
                document.body.appendChild(objTWindow);
         }
        else
        {   var  pgStatus=document.getElementById("pgstatus");
            pgStatus.innerHTML=sMsg;
            cross.setVisible(objTWindow,true);

        }


    };
    this.closePageStatus=function(){
        var dvStatus;
        dvStatus=document.getElementById("pgdiv");
      if(dvStatus)
        cross.setVisible(dvStatus,false);
       // alert("close-"+dvStatus)
    };
};

var objPopupArray;
var objActivePopup = null;
var TYPE_SEPARATOR=1;

function PopupMenu(objMenuArray, objMenuSrc,isFixedPosition,iTimeInterval,iMenuWidth,iEventType,isGlobal,scrollObject)
{
    var me=this;
    this.me=this;
    this.sEvent="oncontextmenu";
    this.objMenuSrc=objMenuSrc;


    this.isFixedPosition=isFixedPosition;
    this.objMenuArray = objMenuArray;
    this.iMenuWidth=iMenuWidth?iMenuWidth:90;
    this.fnCtxtMenuHandler=null;
    this.arrCtxtMenuParams=null;
    this.iEventType=iEventType;
    this.scrollObject=scrollObject;


    if(iTimeInterval)
        this.iTimeInterval=iTimeInterval;
    else
        this.iTimeInterval=3000;



    this.init = function()
    {
        if (!objPopupArray)
            objPopupArray = new Array();

        objPopupArray[objPopupArray.length] = this;//objMenuSrc;
        me.objMenuSrc.setAttribute("refIndex", objPopupArray.length);
        me.objMenuSrc.setAttribute("isGlobal",isGlobal);

        if(me.objMenuArray)
            this.createPopup(me.objMenuSrc.getAttribute("refIndex"),me.objMenuArray);

        iEventType = (iEventType==undefined)?cross.EVENT_ONCONTEXTMENU:iEventType;
        //alert(iEventType)
        if(iEventType)
        {
            cross.addListener(me.objMenuSrc, iEventType, this.onCtxtMenu, true,null,Constants.SCOPE_SCREEN);//'oncontextmenu'
        }
    };

    this.setCtxtMenuHandler= function(fnHandler,arrParams)
    {
        this.fnCtxtMenuHandler=fnHandler;
        this.arrCtxtMenuParams=arrParams;
    };

    this.onCtxtMenu= function(evt)
    {
        evt = evt ? evt : window.event;
        //var objSrc=cross.getSrcElement(evt);
//        alert(objMenuSrc.outerHTML)
        if(objMenuSrc.getAttribute("disabled"))
            return false;



        if(me.iListenerId>0)
            cross.unregisterEventListener(me.iListenerId);

        var isShowCtxtMenu=true;
        if(me.fnCtxtMenuHandler)
        {
//            alert(me)
            var params=PopupMenu.prototype.getParams([me.objMenuSrc],me.arrCtxtMenuParams,evt);
            isShowCtxtMenu=me.fnCtxtMenuHandler.apply(window,params);
        }


        if(isShowCtxtMenu)
        {
            //me.iListenerId=cross.registerEventListener(cross.EVENT_ONCLICK,hideActiveMenu);
            me.togglePopupVisibility(me.objMenuSrc,evt);
        }

        cross.cancelBubble(evt);
        return false;
    };

    /*this.setSrc= function(objMenuSrc)
    {
        this.objMenuSrc=objMenuSrc;
        objMenuSrc.setAttribute("refIndex", objPopupArray.length);
        addListener(objMenuSrc, this.sEvent, this.onCtxtMenu, true);//'oncontextmenu'
    };*/



    this.init();


}


/*  -------------------------- Pop-up Menu key events -------------------------  */
// popup menu key evt handler
PopupMenu.prototype.navigateCxtMenu = function(objDiv, evt)
{
    evt = evt ? evt : window.event;
    var iKeyCode = evt.keyCode;
    //alert(iKeyCode)
    if (iKeyCode == 13 || iKeyCode == 27)
    {
        //this.hidePopUpMenu();
        hideActiveMenu();
        return false;
    }
    else if (iKeyCode == 40) // moving to next menu item for down arrow
    {
        var objSelectRow=this.getMenuItem(true);
        if(objSelectRow)
            this.selectMenuItem(objSelectRow);
    }
    else if (iKeyCode == 38) // moving to previous menu item for up arrow
    {
        var objSelectRow=this.getMenuItem(false);
        if(objSelectRow)
            this.selectMenuItem(objSelectRow);
    }
    return true;
};

PopupMenu.prototype.getMenuItem = function(isNext)
{
    var objSelectRow=null;
    if (this.objCurrentItem)
    {
        var objTable=this.objCurrentItem.parentNode;
        var iTotalRows=objTable.rows.length;
        var i;
        var condition;
        if(isNext)
        {
            i=this.objCurrentItem.rowIndex+1;
            condition=i < iTotalRows-1;
        }
        else
        {
            i=this.objCurrentItem.rowIndex-1;
            condition=i > 0;
        }

        for( ;condition; )
        {
            if(objTable.rows[i].getAttribute("type")!=TYPE_SEPARATOR)
            {
                objSelectRow=objTable.rows[i];
                break;
            }
            if(isNext)
                i++;
            else
                i--;
        }
        if(!objSelectRow)
        {
            if(isNext)
                objSelectRow=objTable.rows[1];
            else
                objSelectRow=objTable.rows[objTable.rows.length-2];
        }
    }
   return objSelectRow;
};

//  -------------------------- Pop-up Menu mouse events -------------------------  //
PopupMenu.prototype.onClickMenuItem = function(objTD,sMenuId,fnHandler,arrParams,e)
{
    
    var objTR=objTD.parentNode;
    if(objTR.disabled)
        return false;

    hideActiveMenu();
    var objMenuSrc=document.getElementById(sMenuId);
    //this.hidePopUpMenu();
    //alert("onclick  "+fnHandler)
    //alert(PopupMenu.prototype.me.objMenuSrc.id)
    if(fnHandler)
    {
        var params=PopupMenu.prototype.getParams([objMenuSrc,objTR],arrParams,e); //PopupMenu.prototype.me.objMenuSrc
        eval(fnHandler).apply(window,params);
    }
    
    cross.cancelBubble(e);
    return false;
};

PopupMenu.prototype.getParams=function(arrDefParams,arrParams,e)
{
    if(arrParams)
    {
        for(var i=0;i<arrParams.length;i++)
            arrDefParams[arrDefParams.length]=arrParams[i];
    }

    arrDefParams[arrDefParams.length]=e;
    return arrDefParams;
};

// mouseover handler for menuitem
PopupMenu.prototype.selectMenuItem = function(objTR)
{
    //alert("over "+objTR.outerHTML)
    //alert("clearing timeperiod "+this.iTimePeriod)
    clearTimeout(this.iTimePeriod);
    if (this.objCurrentItem)
        this.objCurrentItem.className = "itemUnSelect";
    objTR.className = "itemSelect";
    if (this.isVisible)
        objTR.focus();
    this.objCurrentItem = objTR;
}

PopupMenu.prototype.handleMouseOut = function(objTable)
{
    //alert("setting timeout in handleMouseOut  "+this.iTimePeriod);
    clearTimeout(this.iTimePeriod);
    //this.iTimePeriod = setTimeout(createCallbackFunc(this, hideActiveMenu), this.iTimeInterval);
//    this.iTimePeriod = setTimeout(createObjectCallback(this, this.hidePopUpMenu), this.iTimeInterval);
}

/*  -------------------------- popup display & hide functions -------------------------  */
PopupMenu.prototype.hidePopUpMenu = function()
{
    //alert(this.iTimePeriod)
    //alert("this.iTimePeriod in hide "+this.iTimePeriod);
    //alert("timeperiod when hiding "+this.iTimePeriod)
    

    if (objActivePopup && objActivePopup.isVisible)
    {
        var me=objActivePopup;
        clearTimeout(me.iTimePeriod);
//        this.iTimePeriod=0;

        if(me.iListenerId>0)
            cross.unregisterEventListener(me.iListenerId);
        me.isVisible = false;
        if (me.objCurrentItem)
        {
            me.objCurrentItem.className = "itemUnSelect";
            me.objCurrentItem = null;
        }
        me.objPopUpMenu.style.display = "none";
    }
}

PopupMenu.prototype.showPopUpMenu = function(objSrc,evt)
{
    evt = evt ? evt : window.event;
    //if (!this.objPopUpMenu)
    var iScrollTop=0,iScrollLeft=0;
    if(document.body.scrollTop)
         iScrollTop= parseInt(document.body.scrollTop);
    if(document.body.scrollLeft)
         iScrollLeft= parseInt(document.body.scrollLeft);

    var x,y;

    if(!this.isFixedPosition)
    {
		x=evt.clientX+iScrollLeft;

		var iClientWidth;
		if(document.body.clientWidth)
			iClientWidth=document.body.clientWidth;
		else
			iClientWidth=window.innerWidth;
		if(x < 0)
			x=0;
		//else if( x > iClientWidth)//PopupMenu.prototype.me.iMenuWidth
		//	x=iClientWidth;

		//alert( x+","+iClientWidth);
        //alert(evt.clientX+","+evt.clientY);

        if(clAppBuffer.getLanguage()==Constants.ILANGUAGE_TYPE.ARABIC || clAppBuffer.getLanguage()==Constants.ILANGUAGE_TYPE.PERSIAN)
            x=x-250;  //x-=250


        this.objPopUpMenu.style.left = x;

        this.objPopUpMenu.style.top = evt.clientY+iScrollTop;
    }
    else
    {
        var objPos=cross.getPosition(objSrc);//objPos[0]-left,objPos[1]-top offset positions

        x=objPos[0]//+iScrollLeft;
        y=objPos[1]//+iScrollTop;

        if(this.scrollObject)
        {
             x=x-this.scrollObject.scrollLeft;
             y=y-this.scrollObject.scrollTop;
        }

        if(this.iEventType!=cross.EVENT_ONCONTEXTMENU)
        {
            x=parseInt(x,10)-this.iMenuWidth+10;
            y=parseInt(y,10)+16;
        }

        this.objPopUpMenu.style.left = x;//objSrc.offsetLeft;

        this.objPopUpMenu.style.top = y;//"22px";
    }



    this.objPopUpMenu.style.display = "block";
    this.objPopUpMenu.focus();
    this.isVisible = true;
    //this.hidePopUpMenu();
    //alert("reg "+hideActiveMenu)
    this.iListenerId=cross.registerEventListener(cross.EVENT_ONCLICK,hideActiveMenu,null,null,Constants.SCOPE_SCREEN);
    //this.iTimePeriod = setTimeout(createCallbackFunc(this, PopupMenu.prototype.hidePopUpMenu), this.iTimeInterval);
//    alert("show  "+this.iTimePeriod);
    //"this.hidePopUpMenu()"
}

// shows popup menu for mouse rightclick event on span element otherwise hides menu.
PopupMenu.prototype.togglePopupVisibility = function(objSrc, evt)
{
    if(objActivePopup)
    {
        objActivePopup.hidePopUpMenu();
        objActivePopup=null;
    }


    if (objSrc && !this.isVisible) // showing menu if event is from source element and not it is visible
    {
        objActivePopup=this;
        this.showPopUpMenu(objSrc,evt);
    }
    else
        hideActiveMenu();
};

PopupMenu.prototype.enableMenuItem = function(iItemIndex,isEnable)
{
    //alert(iItemIndex+","+isEnable)
    var objDiv=document.getElementById("popUpMenu"+(parseInt(this.objMenuSrc.getAttribute("refIndex"))));
    var objTR=objDiv.getElementsByTagName("TABLE")[0].rows[iItemIndex+1];

    if(isEnable)
    {
        objTR.disabled=false;
        objTR.style.color="#000";
        util.addClass(objTR.cells[1],"tdPopupItem");
        util.removeClass(objTR.cells[1],"tdPopupItemDisable");
        util.addClass(objTR.cells[0],"tdPopupIcon");
        util.removeClass(objTR.cells[0],"tdPopupIconDisable");
    }
    else
    {
        objTR.style.color="#ACA899";
        objTR.disabled=true;
        util.removeClass(objTR.cells[1],"tdPopupItem");
        util.addClass(objTR.cells[1],"tdPopupItemDisable");
        util.removeClass(objTR.cells[0],"tdPopupIcon");
        util.addClass(objTR.cells[0],"tdPopupIconDisable");
    }
    
};

PopupMenu.prototype.setItemLabel = function(iItemIndex,sLabel)
{
    var objDiv=document.getElementById("popUpMenu"+(parseInt(this.objMenuSrc.getAttribute("refIndex"))));
    var objTR=objDiv.getElementsByTagName("TABLE")[0].rows[iItemIndex+1];
    objTR.cells[1].innerHTML=sLabel;
};

PopupMenu.prototype.onDocKeyDown = function(e)
{
    PopupMenu.prototype.me.navigateCxtMenu(this,e);
};

this.iKeyListenerId=0;

PopupMenu.prototype.createPopup = function(iRefIndex,objMenuArray)
{
 
    PopupMenu.prototype.me = this;
    var objPopup = document.getElementById("popUpMenu" + iRefIndex);

    if(!objPopup)
    {
        objPopup = document.createElement("div");
        objPopup.id = "popUpMenu" + iRefIndex;
        objPopup.className = "menuContainer";

        if(this.iMenuWidth<100)
            this.iMenuWidth=100;

        objPopup.onkeydown = function()
        {
            PopupMenu.prototype.me.navigateCxtMenu(this,event);
        };

        if(document.getElementById("containerDiv"))
            document.getElementById("containerDiv").appendChild(objPopup);
        else
            document.body.appendChild(objPopup);
    }

    var sMenuContent = '<table border=0 width="'+this.iMenuWidth+'" cellpadding="1" cellspacing="0" class="menuStyle"';
    sMenuContent +=  ' onmouseout="PopupMenu.prototype.me.handleMouseOut(this)">';
    sMenuContent +=  '<tr><td style="font-size:21%;" colspan="2">&nbsp;</td></tr>';

    for (var i = 0; i < objMenuArray.length; i++)
    {
        if(objMenuArray[i].type==TYPE_SEPARATOR)
        {
            sMenuContent +=  '<tr type="'+TYPE_SEPARATOR+'">';
            sMenuContent += '<td colspan="2"><hr style="width:94%;border:1px thin #D1D1D1;"></td></tr>';
        }
        else
        {
            sMenuContent +=  '<tr';
            if(objMenuArray[i].disabled)
                sMenuContent +=  ' disabled="true" ';
            sMenuContent +=  ' onmouseover="PopupMenu.prototype.me.selectMenuItem(this)" style="cursor:pointer">';                        /*"*/
            sMenuContent += '<td align="center" class="tdPopupIcon" style="padding-bottom:4px;'+(objMenuArray[i].span?'width:20%;':'')+';'+(objMenuArray[i].span?'padding:8px;':'padding:0')+'">'+(objMenuArray[i].span?'<span style="padding-top:1px; align="left" class="'+objMenuArray[i].span+'" src="/streamline/res/global/images/blank.png"></span>':"&nbsp;")+'</td>';
            sMenuContent += '<td nowrap="true" class="tdPopupItem" style="'+(objMenuArray[i].span?'width:80%;':'width:100%;')+'"';
            sMenuContent += ' onclick="PopupMenu.prototype.me.onClickMenuItem(this,\''+PopupMenu.prototype.me.objMenuSrc.id+'\',\''+objMenuArray[i].handle+'\','+objMenuArray[i].arrParams+',event);">'
                            + objMenuArray[i].name;
            sMenuContent+='</td>';
            sMenuContent+='</tr>';
        }
    }

    sMenuContent +=  '<tr><td colspan="2" style="font-size:21%;">&nbsp;</td></tr>';
    sMenuContent +=  "</table>";
    //alert("sMenuContent  "+sMenuContent);
    objPopup.innerHTML = sMenuContent;


    this.objPopUpMenu = objPopup;
};



function getMenuInstance(objMenuSrc)
{
	if(objPopupArray && objMenuSrc && objMenuSrc.getAttribute("refIndex"))
        return objPopupArray[parseInt(objMenuSrc.getAttribute("refIndex"))-1];
    return null;
}

function getPopupMenuIndex(objMenuSrc)
{
    if(objMenuSrc && objMenuSrc.getAttribute("refIndex"))
        return parseInt(objMenuSrc.getAttribute("refIndex"));
    return -1;
}

function hideActiveMenu(evt)
{
    //alert("objActivePopup  "+objActivePopup)
	//PopupMenu.prototype.hidePopUpMenu();

    if(objActivePopup)
    {
        if(objActivePopup.iTimePeriod)
        {
            clearTimeout(objActivePopup.iTimePeriod);
            objActivePopup.iTimePeriod=0;
        }
        objActivePopup.hidePopUpMenu();
        objActivePopup=null;
    }

	return false;
}

PopupMenu.clearAll=function ()
{            
    if(objPopupArray)
    {
        var hasGlobal=false;
        for(var i=0; i < objPopupArray.length; i++)        
        {
            var dvPopUp=objPopupArray[i].objPopUpMenu;
            if(!dvPopUp || !dvPopUp.getAttribute("isGlobal"))
            {
                if(dvPopUp) //will not be created for dynamic popups. i.e based on element click popup creation 
                    dvPopUp.parentNode.removeChild(dvPopUp);
                objPopupArray.splice(i,1);
                i--;
            }
            else
                hasGlobal=true;
        }

        if(!hasGlobal)
            objPopupArray=null;
    }
};
/*
PopupMenu.clearPopUpInstance=function (objMenuSrc)
{
  var dvPopUp = document.getElementById("popUpMenu" +objMenuSrc.getAttribute("refIndex"));
  dvPopUp.parentNode.removeChild(dvPopUp);
};*/


/*  -------------------------- Adding event listeners -------------------------  */
//addListener(document, 'onclick', hideActiveMenu, true);
//addListener(document, 'oncontextmenu', contextMenuHandler, true);

/*  -------------------------- Event handlers --------------------------  */


/*
function contextMenuHandler(objSrc,evt)
{
    if(!objSrc)
    {
        evt = evt ? evt : (window.event?window.event:window.Event);
        objSrc = evt.srcElement ? evt.srcElement : evt.target;
    }
    else if(objSrc.type=="click" || objSrc.type=="contextmenu")
    {
        evt=objSrc;
        objSrc=objSrc.srcElement?objSrc.srcElement:objSrc.target;
    }
    var objElement = null;//objRef = null,
    objElement = objSrc;

    while(objElement)
    {
        //alert(objElement.outerHTML)
        if(objElement.getAttribute("refIndex"))
        {
            var objMenuInst=getMenuInstance(document.getElementById("usersettings"));
            //alert("objMenuInst  "+objMenuInst);
            if(objMenuInst)
                objMenuInst.setEventSrc(document.getElementById("outlooktable"));
            objElement = objPopupArray[parseInt(objElement.getAttribute("refIndex"))-1];
//				alert("objRef  "+objElement.parentNode.innerHTML);
            objElement.togglePopupVisibility(objSrc,evt);
            if(objElement.isVisible)
                objActivePopup=objElement;
            break;
        }
        objElement=objElement.parentNode;
    }

  return false;
}*/


/*

/*function createCallback(obj, fn, arguments)
{
    return function()
    {
         var newargs = [arguments];
                for (var i = 0; i < arguments.length; i++)
                    newargs.push(arguments[i]);
        fn.apply(obj, arguments);
    };
}*/


var continueSpin=false;
var currentTarget = new Object();
currentTarget.field=null;
currentTarget.spinner=null;
/**
        Constructor for number spinner object
        @param targetField - The target field object.
        @param btnUp - The associated 'Up' button.
        @param btnDn - The associated 'Down' button.
        @param minValue - The minimum value.
        @param maxValue - The maximum value.
        @param oneToOne - Specifies if Up/Down buttons are tied-up to only one targetField or not. (boolean)
        @param btnContainerId - The id container (span) where the Up/Down buttons are located.
        @param interval - The interval between succeeding numbers. Optional. (default is 1)
        @param hasLeadingZero - Specifies if single digit numbers must have leading zero or not. Optional. (default is false)
        @param defaultValue - The default value. If entered value is not a number, default value will also be used. Optional. (default is the minValue)
        @param decimalPlaces - The number of decimal places if interval is less than 1 (i.e. 0.5). (default is 0)
**/
function NumberSpinner(targetField, btnUp, btnDn, minValue, maxValue, oneToOne, btnContainerId, interval, hasLeadingZero, defaultValue, decimalPlaces)
{
 // document.getElementById(targetField).focus();
  var me = this;
  this.targetField = targetField;
  this.minValue = minValue;
  this.maxValue = maxValue;
  this.oneToOne = oneToOne;
  this.btnId = btnContainerId;
  this.interval = (typeof interval!='undefined' && interval!=null && interval>0) ? interval:1; //default is 1
  this.hasLeadingZero = (typeof hasLeadingZero!='undefined' && hasLeadingZero!=null) ? hasLeadingZero:false;	//default is false
  this.defaultValue = (typeof defaultValue=='number') ? defaultValue:minValue;	//default is minValue
  this.decimalPlaces = (this.interval<1 && decimalPlaces>0) ? decimalPlaces:0;	//default is 0
  //set default value
  targetField.value = Number(this.defaultValue).toFixed(this.decimalPlaces);
  //attach event handlers automatically
  //targetField.onclick = function(){setTarget(me.targetField,me)};
  targetField.onfocus = function(){setTarget(me.targetField,me)};

  /*targetField.onblur = function()
  {
    if (isNaN(parseInt(this.value,10))) this.value=me.defaultValue;
    else if (parseFloat(this.value)>me.maxValue) this.value=me.maxValue;
    else if (parseFloat(this.value)<me.minValue) this.value=me.minValue;
    this.value=((me.hasLeadingZero && this.value<10)?"0":"") + Number(this.value).toFixed(me.decimalPlaces);
  }*/

  if(!btnUp.onmousedown)
btnUp.onmousedown = function()
{
    btnUp.parentNode.className="spinImgClick";
     if (me.oneToOne)
//   	   if (!currentTarget.field)
         setTarget(me.targetField,me);
     startSpin(1,me.btnId);
}
  if(!btnUp.onmouseup)
  {
      btnUp.onmouseup = function()
      {
          btnUp.parentNode.className="spinImg";
          stopSpin();
      };
  }

  if(!btnDn.onmousedown)
btnDn.onmousedown = function()
{
    btnDn.parentNode.className="spinImgClick";
     if (me.oneToOne)
//         if (!currentTarget.field)
         setTarget(me.targetField,me);
     startSpin(0,me.btnId);
}

  if(!btnDn.onmouseup)
  {
  btnDn.onmouseup  = function()
  {
      btnDn.parentNode.className="spinImg";
      stopSpin();
  };
  }
}
   function setTime(mode, btnId){//mode:1=up, 0=down
   //stop spinning
   if (!continueSpin || !currentTarget.field || (currentTarget.spinner && currentTarget.spinner.btnId!=btnId)) return;
   //get current value
   var spinValue=parseFloat(currentTarget.field.value);

   //set default value if not numeric
   if(isNaN(spinValue)) spinValue=currentTarget.spinner.minValue-currentTarget.spinner.interval;
   //get next value
   spinValue = (mode==0) ? spinValue-currentTarget.spinner.interval:spinValue+currentTarget.spinner.interval;
   //out of range?
   if (currentTarget.spinner.maxValue > 0 && spinValue > currentTarget.spinner.maxValue)
       spinValue=currentTarget.spinner.minValue;
   else if (currentTarget.spinner.minValue > 0 && spinValue < currentTarget.spinner.minValue)
       spinValue=currentTarget.spinner.maxValue;

   //set decimal place
   spinValue = spinValue.toFixed(currentTarget.spinner.decimalPlaces);
   //set leading zero
////////////////////////   if (currentTarget.spinner.hasLeadingZero && spinValue<10) spinValue="0"+spinValue;
   //set value to target field
   currentTarget.field.value=spinValue;
   currentTarget.field.select();
   currentTarget.field.focus();
   //continue spinning
   setTimeout(function(){setTime(mode,btnId)},100);
}

/**
   starting spin
*/
function startSpin(mode, btnId)
{
  continueSpin = true;
  setTime(mode, btnId);
}

/**
   stop the spin
*/
function stopSpin()
{
  continueSpin = false;
  if (currentTarget.field) currentTarget.field.focus();
}

/**
   set the target
*/
function setTarget(focusedObj, spinnerObj)
{
  currentTarget.field = focusedObj;
  currentTarget.spinner = spinnerObj;
  if (focusedObj)
  {
   focusedObj.select();
  }
}

/**
   reset the target
*/
function resetTarget(e)
{
   var targ = (e)?e.target:event.srcElement;
   if (currentTarget.field!=null && targ && targ.type!='button' && (!targ.onmousedown || (targ.onmousedown && targ.onmousedown.toString().indexOf('setTarget')==-1)))
   {
 setTarget(null,null);
   }
}
document.onmousedown=resetTarget;
if(!Number.prototype.toFixed)

   Number.prototype.toFixed = function(decimals)
   {
       var decDigits = (isNaN(decimals)) ? 2 : decimals;
       var k = Math.pow(10, decDigits);
       var fixedNum = Math.round(parseFloat(this) * k) / k;
       var sFixedNum = new String(fixedNum);
       var aFixedNum = sFixedNum.split('.');
       var i = (aFixedNum[1]) ? aFixedNum[1].length : 0;
       if (i == 0 && decDigits)
                    sFixedNum += '.';
       while (i++ < decDigits)
                    sFixedNum += '0';
       return sFixedNum;
   }
//var spinnerHour;
//var spinnerMin;
//var spinnerDay;
   function initSpinner(target,btup,btdec,start,end,restrict,container,increment,decimals,defaultValue)
   {
   var  days =document.getElementById(target);
   var  btnUp2 =document.getElementById(btup);
   var  btnDn2 =document.getElementById(btdec);
   new NumberSpinner(days,btnUp2,btnDn2,start,end,restrict,container,increment,decimals,defaultValue);
   }
////////setter getter methods
   /**
   get the time spinner value
   */
   function getTimeSpinnerValue(idname)
   {
           var hours= document.getElementById(idname+'hhFrom').value;
           var miv= document.getElementById(idname+'mmFrom').value;

           var sec="";
           if(document.getElementById(idname+'seconds')!=null)
               sec= ":"+document.getElementById(idname+'seconds').value;

           var ampm="";
           if(document.getElementById(idname+'ampm')!=null)
              ampm= ":"+document.getElementById(idname+'ampm').value;
           var time =hours+":"+miv+":"+sec+ampm;
           alert(time);
           return time;
    }

   function setTimeSpinner(idname,ours,min,seconds,ampm)
   {
       document.getElementById(idname+'hhFrom').value=ours;
       document.getElementById(idname+'mmFrom').value=min;
       if(seconds!=null)
       document.getElementById(idname+'seconds').value=seconds;
       if(ampm!=null)
            document.getElementById(idname+'ampm').value=ampm;
   }

    function getNumSpinnerValue(idname)
    {
           var num= document.getElementById(idname+'days').value;
           return num;
    }

    function setNumSpinnerValue(idname,number)
    {
           var num= document.getElementById(idname+'days').value=number;
    }

    function changeampm(idname)
    {
               if(document.getElementById(idname).value=='PM')
                   document.getElementById(idname).value='AM';
               else
                   document.getElementById(idname).value='PM';
    }

    function onchangeampm(idname)
    {
       if(document.getElementById(idname).value!='PM')
           if(document.getElementById(idname).value!='AM')
               document.getElementById(idname).value='AM'
    }

   function setFocusIn(id)
   {
      document.getElementById(id).focus();
   }

function changeSpinFldVisibility(sSpinFldId,isEnable)
{

    if(!isEnable)
    {
        document.getElementById(sSpinFldId+"hhFrom").disabled=true;
        document.getElementById(sSpinFldId+"mmFrom").disabled=true;
        if(document.getElementById(sSpinFldId+"seconds"))
           document.getElementById(sSpinFldId+"seconds").disabled=true;
        if(document.getElementById(sSpinFldId+"ampm"))
           document.getElementById(sSpinFldId+"ampm").disabled=true;

       document.getElementById(sSpinFldId+"btnUp1").disabled=true;
       document.getElementById(sSpinFldId+"btnDn1").disabled=true;
    }
    else
    {
        document.getElementById(sSpinFldId+"hhFrom").removeAttribute("disabled");
        document.getElementById(sSpinFldId+"mmFrom").removeAttribute("disabled");
        if(document.getElementById(sSpinFldId+"seconds"))
           document.getElementById(sSpinFldId+"seconds").removeAttribute("disabled");
        if(document.getElementById(sSpinFldId+"ampm"))
           document.getElementById(sSpinFldId+"ampm").removeAttribute("disabled");

       document.getElementById(sSpinFldId+"btnUp1").removeAttribute("disabled");
       document.getElementById(sSpinFldId+"btnDn1").removeAttribute("disabled");
    }
}
function onClkStepHandler(sCallBackFn,isStepForward)
{
    var index=0;
    if(sCallBackFn)
        index = sCallBackFn.indexOf(".");
    var sObjectName = null;
    var sFuncName = null;
    if (index > 0)
    {
        sObjectName = sCallBackFn.substring(0, index);
        sFuncName = sCallBackFn.substring(index + 1);
    }
    else
    {
        sFuncName = sCallBackFn;
    }

    if ((index > 0 && typeof window[sObjectName][sFuncName] == "function"))
        window[sObjectName][sFuncName](isStepForward);
    else if ((window[sFuncName] == "function"))
        window[sFuncName](isStepForward);
    else if(typeof eval(sCallBackFn) == "function")
        eval(sCallBackFn)(isStepForward);

}
var clTime = new function()
{
    var me=this;
    var iMinInterval=15;

    this.onClkShow = function(sTimePickerId,is24Hr,isMultipleDays,isShowEmpty,event)
    {
        var dvTime=document.getElementById(sTimePickerId+"MainDv");
        if(!dvTime.getAttribute("disabled"))
        {
            cross.docOnClick(event);   //for closing the previous Time Popup 
//            var iOffsetLeft=parseInt(dvTime.offsetLeft);
//            var iWindowWidth=parseInt(document.body.offsetWidth);

            var objTime = document.getElementById(sTimePickerId+"tblDiv");
            if(!objTime)
            {
                objTime = this.createTimePickerDiv(sTimePickerId, is24Hr,isMultipleDays);
                document.body.appendChild(objTime);
            }

            var x=event.clientX-100;
            var y=event.clientY+10;
            var iScrollLeft=cross.getBodyScrollLeft();
            var iScrollTop=cross.getBodyScrollTop();

            if(iScrollLeft>0)
                x+=iScrollLeft;
            if(iScrollTop>0)
                y+=iScrollTop;

            objTime.style.left = x + "px";
            objTime.style.top = y + "px";

           /* if(iWindowWidth-iOffsetLeft<130)
            {
                //objTime.style.position="relative"
                objTime.style.left="-70px";

//                $(objTime).addClass('dropdown-menu').attr('left','90px');

                alert(window.getComputedStyle(objTime, ':before').getPropertyValue('left'));
                //window.getComputedStyle(objTime, ':before').setPropertyValue('left',"90px");
                //dvTime.style.left="90px";
            }
            else
            {
                //objTime.style.position="";
                objTime.style.left="";

                //dvTime.style.left="";
            }*/

            if(objTime.style.display=="none")
                objTime.style.display="block";
            else
                objTime.style.display="none";


            var iTabIndex = document.getElementById(sTimePickerId).getAttribute("tabindex");
            if(iTabIndex > 0) {
                var eleHr = document.getElementById(sTimePickerId + "hour");
                if(eleHr.getAttribute("tabindex") == null) {
                    eleHr.setAttribute("tabindex", iTabIndex);
                    document.getElementById(sTimePickerId + "minute").setAttribute("tabindex", iTabIndex);
                    if (!is24Hr)
                        document.getElementById(sTimePickerId + "ampm").setAttribute("tabindex", iTabIndex);

                }
            }

            //setting the value
            var iValue,sAMPM="",iHr=0,iMin=0;;
            iValue= document.getElementById(sTimePickerId).value;

            if(isShowEmpty && iValue==""){
                if(!is24Hr){
                    iHr = "12";
                    iMin = "00";
                    sAMPM = "AM";
                }else{
                    iHr = "00";
                    iMin = "00";
                }
            }else{
                if(!iValue)
                    iValue=document.getElementById(sTimePickerId).getAttribute("value");
                if(iValue.indexOf(':')==1)
                    iValue ='0'+iValue;
                if(isMultipleDays) {
                    var arrValues = iValue.split(":");
                    iHr = arrValues[0];
                    iMin = arrValues[1];
                    sAMPM = "";
                }
                else{
                    iHr = iValue.substring(0,2);
                    iMin = iValue.substring(3,5);
                    sAMPM = iValue.substring(6,8);
                }
            }
            if(!is24Hr &&(sAMPM.indexOf("PM")==-1) && (sAMPM.indexOf("AM")==-1))
                sAMPM="PM";

            if(iHr.indexOf(':')!=-1)
                iHr = '0'+iHr.substring(0,iHr.indexOf(':'));
            //                if(iMin.indexOf(':')!=-1)
            //                    iMin = '0'+iMin.substring(0,iMin.indexOf(':'));

            var objHr=document.getElementById(sTimePickerId+"hour");
            objHr.value = iHr;
            objHr.setAttribute("oldValue",iHr);

            var objMin=document.getElementById(sTimePickerId+"minute");
            objMin.value = iMin;
            objMin.setAttribute("oldValue",iMin);

            if(!is24Hr)
            {
                var objAMPM=document.getElementById(sTimePickerId+"ampm");
                objAMPM.value = sAMPM;
                objAMPM.setAttribute("oldValue",sAMPM);
            }

            var iMinValue=document.getElementById(sTimePickerId+"minute").value;
            if(!iMinValue)
                iMinValue=document.getElementById(sTimePickerId+"minute").getAttribute("value");

            if(!isShowEmpty)
                this.setTime(sTimePickerId,iHr,iMinValue,sAMPM);
            objHr.select();

            me.iListenerId = cross.registerEventListener(cross.EVENT_ONCLICK,clTime.hideTimePicker,[sTimePickerId]);
        }


        cross.cancelBubble(event);

        return false;
    };

    this.showOrHideTimePicker = function(sTimePickerId,isShow)
    {
        var objTime=document.getElementById(sTimePickerId);
        var dvTime=document.getElementById(sTimePickerId+"MainDv");
        if(isShow)
        {
            objTime.style.display = "";
            dvTime.style.display = "";
        }
        else
        {
            objTime.style.display = "none";
            dvTime.style.display = "none";
        }
    };

    this.hideTimePicker = function(sTimePickerId,event)
    {
        var objTime = document.getElementById(sTimePickerId+"tblDiv");
        if(objTime)
            objTime.style.display="none";

        var dvTime=document.getElementById(sTimePickerId+"MainDv");
        if(dvTime.getAttribute("fnOnSetTime"))
            eval(dvTime.getAttribute("fnOnSetTime"))(objTime);

        cross.unregisterEventListener(me.iListenerId);
        me.iListenerId=0;

        if(document.getElementById(sTimePickerId).onblur)
            document.getElementById(sTimePickerId).onblur();
    };
    this.getValue =function(sId)//hour/min
    {
        var elem =document.getElementById(sId);

        if(clAppBuffer.getFarsiCalendar() == "true")
        {
            var sVal = util.toEnglishNumber(elem.value);
            return parseInt(sVal);
        }
        return parseInt(elem.value);
    }
    /**/
    this.onChangeHour=function(sTimePickerId,isIncr,is24Hr,isMultipleDays,event)
    {
        //attribute 'is24Hr' at main DIV sTimePickerId
        //                var is24Hr=false;
        var iHr=0;
        //                var iMin=0;
        var sAMPM="";
        var objHr = document.getElementById(sTimePickerId+"hour");
        iHr = me.getValue(sTimePickerId+"hour");
        if(!is24Hr)
            sAMPM = document.getElementById(sTimePickerId+"ampm").value;
        if(isIncr)
            iHr++;
        else
            iHr--;

        if(is24Hr)
        {
            if(isMultipleDays) {
                if(iHr<0)
                    iHr=0;
            }
            else {
                if(iHr>23)
                    iHr=0;
                else if(iHr<0)
                    iHr=23;
            }


        }
        else
        {
//          if((iHr==12&& isIncr) ||(iHr==11 && !isIncr))
//                sAMPM = me.returnAMPM(sTimePickerId);
            if(iHr>12)
                iHr=1;
            else if(iHr<1)
                iHr=12;
        }

        if(iHr<10)
            iHr= '0'+iHr;
        var objMin = document.getElementById(sTimePickerId+"minute");
        if(clAppBuffer.getFarsiCalendar() == "true") {
            objHr.setAttribute("actualVal", iHr)
            iHr = (iHr + "").toShamshiDigits();
        }
        objHr.value=iHr;
        objHr.setAttribute("oldValue",iHr);
        objMin.setAttribute("oldValue",objMin.value);
        //                var arrValues=getHourValues(true,iCount);
        me.setTime(sTimePickerId,iHr,objMin.value,sAMPM);

        cross.cancelBubble(event);
        objHr.focus();
        return false;
    };


    this.onChangeMin=function(sTimePickerId,isIncr,is24Hr,event)
    {
        var iHr=0,iMin=0,sAMPM="",iModulus ;
        //                var is24Hr= false;
        var objHr = document.getElementById(sTimePickerId+"hour");
        var objMin = document.getElementById(sTimePickerId+"minute");
//        iHr = parseInt(objHr.value);
        iMin = me.getValue(sTimePickerId+"minute");
        if(!is24Hr)
            sAMPM = document.getElementById(sTimePickerId+"ampm").value;

        iModulus = (iMin % iMinInterval);
        if(iModulus>0)
            iMin = iMin-iModulus;

        if(isIncr)
            iMin+=iMinInterval;
        else
            iMin-=iMinInterval;

        if(iMin>=60)
        {
           /* if(is24Hr)
            {
                if(iHr==23)
                iHr=-1;

            }
            else
            {
                 if(iHr==12)
                    iHr=0;
                else if(iHr==11)
                    sAMPM = me.returnAMPM(sTimePickerId);
            }*/

            iMin=0;
//            iHr++;
        }
        if(iMin<0)
        {
            /*if(isIncr)
            {
                if(is24Hr && iHr==12)
                    iHr=0;
                else if(iHr == 23)
                    iHr = -1;
            }
            else //if(!isIncr)
            {
                if(is24Hr)
                {
                  if(iHr == 0)
                    iHr=24;
                }
                else
                {
                     if(iHr==1)
                        iHr=13;
                    else if(iHr == 12)
                        sAMPM = me.returnAMPM(sTimePickerId);
                }

            }*/
            iMin=60-iMinInterval;
//            iHr--;
        }
        if(iMin == 0)
            iMin = '0'+iMin;
        if(clAppBuffer.getFarsiCalendar() == "true")
        {
            objMin.setAttribute("actualVal",iMin)
            iMin = (iMin+"").toShamshiDigits();
        }
        objMin.value=iMin;
//        objHr.value=((iHr<10)?iHr= ('0'+iHr):iHr);
//        objHr.setAttribute("oldValue",iHr);
        objMin.setAttribute("oldValue",iMin);
        // var arrValues=getHourValues(is24Hr,iHr);
        me.setTime(sTimePickerId,objHr.value,iMin,sAMPM);


        cross.cancelBubble(event);
        objMin.focus();
        return false;
    };

    this.returnAMPM = function(sTimePickerId)
    {
        var sAMPM="";
        sAMPM=document.getElementById(sTimePickerId+"ampm").value;
        if(sAMPM.indexOf('AM')>=0)
            sAMPM= "PM";
        else
            sAMPM  ="AM";
        document.getElementById(sTimePickerId+"ampm").value=sAMPM;
        return sAMPM;
    };

    this.onChangeAMPM=function(sTimePickerId,isIncr,event)
    {
        var sAMPM="";
        sAMPM = me.returnAMPM(sTimePickerId);
        me.setTime(sTimePickerId,document.getElementById(sTimePickerId+"hour").value,document.getElementById(sTimePickerId+"minute").value,sAMPM);
        //sAMPM.focus();
        cross.cancelBubble(event);
        return false;
    };


    this.setTime=function(sTimePickerId,iHr,iMin,sAMPM)
    {
        var sValue=util.trim(iHr+':'+iMin+' '+sAMPM);
        if(clAppBuffer.getFarsiCalendar()=="true")
            sValue = util.toPersianNumber(sValue);
        var objTime=document.getElementById(sTimePickerId);
        objTime.value= sValue;
    };

    this.onSelectInput = function(obj,event)
    {
        document.getElementById(obj.id).select();

        cross.cancelBubble(event);

        return false;

    };
    /*this method is used for onChange keys */
    /*this.onChangeValues = function(obj,sTimePickerId,is24Hr,event)
    {
        var iHr=0,iMin=0,sAMPM="";
//        iHr = parseInt(document.getElementById(sTimePickerId+"hour").value);
//        iMin = parseInt(document.getElementById(sTimePickerId+"minute").value);
        var objHr = document.getElementById(sTimePickerId+"hour");
        var objMin = document.getElementById(sTimePickerId+"minute");
        if(parseInt(objHr.value))
            iHr = parseInt(objHr.value);
        if(parseInt(objMin.value))
            iMin = parseInt(objMin.value);

        if(!is24Hr)
            sAMPM = document.getElementById(sTimePickerId+"ampm").value;

        if(iMin<10 && iMin>=0)
            iMin = '0'+iMin;
        if(iHr<10 && iHr>=0)
            iHr = '0'+iHr;

        if(is24Hr)
        {
            if(iHr>23 || iHr<0)
                   iHr=obj.getAttribute("oldValue");
        }
        else if(iHr>12 || iHr<1)
                iHr=obj.getAttribute("oldValue");

        if(iMin>=60 || iMin<=0)
            iMin=obj.getAttribute("oldValue");

        if(!is24Hr && (sAMPM.indexOf("PM")==-1) && (sAMPM.indexOf("AM")==-1))
        {
            sAMPM= obj.getAttribute("oldValue");
            document.getElementById(sTimePickerId+"ampm").value=sAMPM;
        }
//        document.getElementById(sTimePickerId+"minute").value=iMin;
//        document.getElementById(sTimePickerId+"hour").value=iHr;
        objHr.value=iHr;
        objMin.value=iMin;
        objHr.setAttribute("oldValue",iHr);
        objMin.setAttribute("oldValue",iMin);
        me.setTime(sTimePickerId,iHr,iMin,sAMPM);

        cross.cancelBubble(event);

        return false;
    };*/

    this.setCallbackFn=function(sTimePickerId,sFnCallback)
    {
        if(!document.getElementById(sTimePickerId))
            alert("SetTime Callback: Invalid fieldid"+sTimePickerId);
        else
        {
            document.getElementById(sTimePickerId+"MainDv").setAttribute("fnOnSetTime",sFnCallback);
        }
    };

    /**
     * this method is used to enable or disable the time field element
     * @param isEnable true/false
     * @param sFieldId timeField id
     */
    this.setEnable = function(isEnable,sFieldId)
    {
        var timeTxtObj = document.getElementById(sFieldId);
        //alert(isEnable)
        if(isEnable)
        {
            if(timeTxtObj.disabled || timeTxtObj.getAttribute("disabled"))
            {
                timeTxtObj.removeAttribute("disabled");
                document.getElementById(sFieldId+"MainDv").removeAttribute("disabled");
            }
        }
        else
        {
            timeTxtObj.disabled = true;
            document.getElementById(sFieldId+"MainDv").setAttribute("disabled",true);
        }
    };

    /*this  method is used to handle the Key down events up and down Arrow Keys*/
    this.onKeyDownHrs = function(sTimePickerId,is24Hr,isMultipleDays,evnt)
    {
        if(cross.getKeyCode(evnt)==40)//down arrow
            me.onChangeHour(sTimePickerId,false,is24Hr,isMultipleDays);
        else if(cross.getKeyCode(evnt)== 38) //up arrow
            me.onChangeHour(sTimePickerId,true,is24Hr,isMultipleDays);
        return false;
    };
    this.onKeyDownMin= function(sTimePickerId,is24Hr,evnt)
    {
        if(cross.getKeyCode(evnt)==40)//down arrow
            me.onChangeMin(sTimePickerId,false,is24Hr);
        else if(cross.getKeyCode(evnt)== 38) //up arrow
            me.onChangeMin(sTimePickerId,true,is24Hr);
        else if((cross.getKeyCode(evnt)==9 )&& is24Hr)
            {
                me.onChangeKeyMin(sTimePickerId+"minute",sTimePickerId,is24Hr,evnt);
                me.hideTimePicker(sTimePickerId);
            }
        return false;
    };
    this.onKeyDownAMPM = function(sTimePickerId,evnt)
    {
//        evnt = evnt ? evnt : window.event;
        if(cross.getKeyCode(evnt)==40)//down arrow
            me.onChangeAMPM(sTimePickerId,false);
        else if(cross.getKeyCode(evnt)== 38) //up arrow
            me.onChangeAMPM(sTimePickerId,true);
        else if(cross.getKeyCode(evnt)==9)
            {
                me.onChangeKeyAMPM(sTimePickerId+"ampm",sTimePickerId,evnt);
                me.onChangeKeyAMPM(sTimePickerId+"ampm",sTimePickerId,evnt);
                me.hideTimePicker(sTimePickerId);
            }

        return false;
    };

     this.onChangeKeyHr= function(obj,sTimePickerId,is24Hr,isMultipleDays,event)
     {
        var iHr=0,sAMPM ="";
        var objHr = document.getElementById(sTimePickerId+"hour");
        if(!is24Hr)
            sAMPM = document.getElementById(sTimePickerId+"ampm").value;
        if(parseInt(objHr.value))
            iHr = parseInt(objHr.value);

        if(iHr<10 && iHr>=0)
            iHr = '0'+iHr;
        if(is24Hr)
        {
            if(!isMultipleDays) {
                if(iHr>23 || iHr<0)
                    iHr=obj.getAttribute("oldValue");
            }
        }
        else if(iHr>12 || iHr<1)
            iHr=obj.getAttribute("oldValue");

        objHr.value=iHr;
        objHr.setAttribute("oldValue",iHr);

        me.setTime(sTimePickerId,document.getElementById(sTimePickerId+"hour").value,document.getElementById(sTimePickerId+"minute").value,sAMPM);
    };
    this.onChangeKeyMin= function(objId,sTimePickerId,is24Hr,event)
    {
        var iMin=0,sAMPM="";
        var objMin = document.getElementById(sTimePickerId+"minute");
        if(!is24Hr)
            sAMPM = document.getElementById(sTimePickerId+"ampm").value;
        if(parseInt(objMin.value))
            iMin = parseInt(objMin.value);

        if(iMin<10 && iMin>=0)
            iMin = '0'+iMin;

        if(iMin>=60 || iMin<=0)
            iMin=document.getElementById(objId).getAttribute("oldValue");

        objMin.value=iMin;
        objMin.setAttribute("oldValue",iMin);

        me.setTime(sTimePickerId,document.getElementById(sTimePickerId+"hour").value,document.getElementById(sTimePickerId+"minute").value,sAMPM );
    };
    this.onChangeKeyAMPM= function(objId,sTimePickerId,is24Hr,event)
    {
        var sAMPM="";
        sAMPM = document.getElementById(sTimePickerId+"ampm").value;

        if((sAMPM.indexOf("PM")==-1) && (sAMPM.indexOf("AM")==-1))
        {
            sAMPM = document.getElementById(objId).getAttribute("oldValue");
            document.getElementById(sTimePickerId+"ampm").value=sAMPM;
        }
        me.setTime(sTimePickerId,document.getElementById(sTimePickerId+"hour").value,document.getElementById(sTimePickerId+"minute").value,sAMPM);
        document.getElementById(sTimePickerId+"ampm").setAttribute("oldValue",sAMPM);
    };

    /*To show and hide the Time Popup when press the Dowm Arrow key*/
    this.onKeyDownTime = function(sTimePickerId,is24Hr,isShowEmpty,evnt)
    {
        if(cross.getKeyCode(evnt) == 40)//Down Arrow
            me.onClkShow(sTimePickerId,is24Hr,isShowEmpty);
        else if(cross.getKeyCode(evnt) == 38 || cross.getKeyCode(evnt)== 27)//Up Arrow & Esc Key
            me.hideTimePicker(sTimePickerId);

    };

    /*To Hide the Time Popup when press the esc Key*/
    this.onKeyDownDiv = function(sTimePickerId,evnt)
    {
        if(cross.getKeyCode(evnt) == 27)//Esc Key
            me.hideTimePicker(sTimePickerId);
    };

    this.createTimePickerDiv = function(sId,is24HoursFormat,isMultipleDays)
    {
        var dvTimePicker=document.createElement("DIV");
        dvTimePicker.id=sId+"tblDiv";
        dvTimePicker.style.display="none";
        dvTimePicker.setAttribute("class","timepickerDiv");
        dvTimePicker.setAttribute("onkeydown","clTime.onKeyDownDiv(\""+sId+"\",event)");
        var sInnerHTML = "";

        sInnerHTML += "<table id='tbl"+sId+"' class='tblContent'  width='25%'><tr>" ;
        sInnerHTML += "<td class='tdPicker' onclick='clTime.onChangeHour(\""+sId+"\",true,"+is24HoursFormat+","+isMultipleDays+",event);'>";
        sInnerHTML += "<a href='javascript:void(0)' ><i class='icon-chevron-up imageClass'></i></a>";
        sInnerHTML += "</td><td class='separator'>&nbsp;</td>";
        sInnerHTML += "<td class='tdPicker' onclick='clTime.onChangeMin(\""+sId+"\",true,"+is24HoursFormat+",event);'>" ;
        sInnerHTML += ("<a href='javascript:void(0)'><i class='icon-chevron-up imageClass'></i></a></td>");
        sInnerHTML += "<td class='separator'>&nbsp;</td>";
        if(!is24HoursFormat)
        {
            sInnerHTML += "<td class='tdPicker' onclick='clTime.onChangeAMPM(\""+sId+"\",true,"+is24HoursFormat+",event);'>";
            sInnerHTML += "<a href='javascript:void(0)'><i class='icon-chevron-up imageClass'></i></a></td>";
        }
        sInnerHTML += "</tr>";
        sInnerHTML += "<tr><td><input type='text' maxlength='3' class='inputContent' name='hour' id='"+sId+"hour'  oldValue='' ";
        sInnerHTML += "onclick='clTime.onSelectInput(this,event);' onchange='clTime.onChangeKeyHr(this,\""+sId+"\","+is24HoursFormat+","+isMultipleDays+",event);' onkeydown='clTime.onKeyDownHrs(\""+sId+"\","+is24HoursFormat+","+isMultipleDays+",event)'>";
        sInnerHTML += "</td><td class='separator'>:</td>";
        sInnerHTML += "<td><input type='text' maxlength='2' class='inputContent' name='minute' id='"+sId+"minute' oldValue = '' ";
        sInnerHTML += "onclick='clTime.onSelectInput(this,event);' onchange='clTime.onChangeKeyMin(this.id,\""+sId+"\","+is24HoursFormat+",event);' onkeydown='clTime.onKeyDownMin(\""+sId+"\","+is24HoursFormat+",event)'></td>";
        if(!is24HoursFormat)
        {
            sInnerHTML += "<td class='separator'>&nbsp;</td>";
            sInnerHTML += "<td ><input type='text' maxlength='2' class='inputContent' name='meridian' id='"+sId+"ampm' oldValue ='' ";
            sInnerHTML += "onclick='clTime.onSelectInput(this,event);' onchange='clTime.onChangeKeyAMPM(this.id,\""+sId+"\","+is24HoursFormat+",event);' onkeydown='clTime.onKeyDownAMPM(\""+sId+"\",event);' ";
            sInnerHTML += "></td>" ;
        }
        sInnerHTML += "</tr>";
        sInnerHTML += "<tr><td class='tdPicker' onclick='clTime.onChangeHour(\""+sId+"\",false,"+is24HoursFormat+","+isMultipleDays+",event);'>";
        sInnerHTML += "<a href='javascript:void(0)'><i class='icon-chevron-down imageClass'></i></a></td>" ;
        sInnerHTML += "<td class='separator'></td>" ;
        sInnerHTML += "<td class='tdPicker' onclick='clTime.onChangeMin(\""+sId+"\",false,"+is24HoursFormat+",event);'>";
        sInnerHTML += "<a href='javascript:void(0)'><i class='icon-chevron-down imageClass'></i></a></td>" ;
        if(!is24HoursFormat)
        {
            sInnerHTML += "<td class='separator'>&nbsp;</td>" ;
            sInnerHTML += "<td class='tdPicker' onclick='clTime.onChangeAMPM(\""+sId+"\",false,"+is24HoursFormat+",event);'>";
            sInnerHTML += "<a href='javascript:void(0)'><i class='icon-chevron-down imageClass'></i></a></td>";
        }
        sInnerHTML += "</tr></table>";

        dvTimePicker.innerHTML = sInnerHTML;
        return dvTimePicker;
    }
    String.prototype.toShamshiDigits= function()
    {
        var id= ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];
        return this.replace(/[0-9]/g, function(w){
            return id[+w]
        });
    }
};

//var clTimePicker=clTime;
//alert("included")
var tabbedPane=new function()
{
    this.getTabId=function(sTabpaneId)
    {
        return sTabpaneId+"tab";
    };

    this.getTabContentId=function(sTabpaneId)
    {
        return sTabpaneId+"content";
    };

    //returns selected tabindex based on the tab display order
    this.getSelectedIndex=function(sTabpaneId)
    {
        var objTabbedpane=document.getElementById(sTabpaneId);
        var ulTabs=objTabbedpane.getElementsByTagName("UL")[0];
        var dvScrollTabInner = cross.getChildren(ulTabs)[1];
        var liTabs=dvScrollTabInner.getElementsByTagName("LI");
        for(var i=0; i < liTabs.length; i++)
        {
            if(liTabs[i].className.indexOf("Active")!=-1)
            {
                return i;
            }
        }
        return 0;
//        return parseInt(document.getElementById(this.getTabId(sTabpaneId)+"0").parentNode.getAttribute("SelTabIndex"));
    };

    /*//returns selected tabid based on the order in which it is created
    this.getSelectedTabId=function(sTabpaneId)
    {
        var objTabbedpane=document.getElementById(sTabpaneId);
        var ulTab=objTabbedpane.getElementsByTagName("UL")[0];
          return parseInt(ulTab.getAttribute("SelTabIndex"));
    };*/


    //tab onclick event handler
    this.selectTab=function(sTabpaneId,iTabIndex)
    {
        //alert(sTabpaneId+","+iTabIndex)
        //tabpaneType
        if(this.isDisabledTab(sTabpaneId,iTabIndex))
            return;

        var objTabbedpane=document.getElementById(sTabpaneId);
        var isTabsAtBottom=objTabbedpane.getAttribute("TabsAtBottom")==1;
        var iTabbedpaneType=objTabbedpane.getAttribute("TabpaneType"); //1 for simple type, 0 for img type
        var sTabId = this.getTabId(sTabpaneId);
        var sTabContentId = this.getTabContentId(sTabpaneId);
        var ulTabParent=document.getElementById(sTabId+iTabIndex).parentNode.parentNode;
        //var ulTabParent=document.getElementById(sTabId+iTabIndex).parentNode;
        var objElement=document.getElementById(sTabId+ulTabParent.getAttribute("SelTabIndex"));

        if(ulTabParent.getAttribute("SelTabIndex")>=0 && objElement)
        {
            this.updateSelTab(iTabbedpaneType,sTabId+ulTabParent.getAttribute("SelTabIndex"),false,isTabsAtBottom,false);
            this.setClass(sTabContentId+ulTabParent.getAttribute("SelTabIndex"),"TabberTabHide",isTabsAtBottom,false);

            //objElement.className="TabberTabInactive";
//            document.getElementById(sTabContentId+ulTabParent.getAttribute("SelTabIndex")).className="TabberTabHide";
//            objElement=document.getElementById(sTabContentId+ulTabParent.getAttribute("selTabIndex"));
            //alert(document.getElementById(sTabId+ulTabParent.getAttribute("selTabIndex")).className)
        }


//        this.updateSelTab(iTabbedpaneType,sTabId+iTabIndex,"TabberActive",isTabsAtBottom,false);
        this.updateSelTab(iTabbedpaneType,sTabId+iTabIndex,true,isTabsAtBottom,true);
        if(objTabbedpane.getAttribute("CreateContentBorder")==1)
            this.setClass(sTabContentId+iTabIndex,"TabberTab",isTabsAtBottom,true);
        else
            this.setClass(sTabContentId+iTabIndex,"noBorderTabberTab",isTabsAtBottom,false);

        ulTabParent.setAttribute("SelTabIndex",iTabIndex);
    };

    this.getSelectedTabIndex=function(sTabpaneId)
    {
        var objTabpane=document.getElementById(sTabpaneId);
        var ulTabParent=cross.getFirstElement(objTabpane.childNodes);
        return ulTabParent.getAttribute("SelTabIndex");
    };

    this.isTabDisabled=function(sTabpaneId,iTabIndex)
    {
        var sTabId = this.getTabId(sTabpaneId);
        var objTab=document.getElementById(sTabId+iTabIndex);
        return objTab.getAttribute("isDisabled")=="true";
    }

    //local function for updating tab styles
    this.updateSelTab=function(iTabbedpaneType,sElementId,isActive,isTabsAtBottom,isAddTabBottomCSS)
    {
        if(iTabbedpaneType==1) //simple tab
        {
            var objTab=document.getElementById(sElementId);
            var sClassName;
            if(objTab.getAttribute("isDisabled")=="true")
                sClassName="TabberTabDisabled";
            else if(isActive)
                sClassName="TabberActive"
            else
                sClassName="TabberTabInactive"
            
            this.setClass(sElementId,sClassName,isTabsAtBottom,isAddTabBottomCSS);
            ///this.setClass(sElementId,(isActive?"TabberActive":"TabberTabInactive"),isTabsAtBottom,isAddTabBottomCSS);
        }
        else
        {
            var objCells=document.getElementById(sElementId).rows[0].cells;
            var sTheme;
            if(typeof parent.window["getFromBuffer"]=="function")
                sTheme=parent.getFromBuffer("theme");
            else
                sTheme="default/";

            if(isActive)
            {
                //alert(top.getFromBuffer("theme"))
                objCells[0].getElementsByTagName("IMG")[0].src=sTheme+"res/images/tab_left_active.gif";
                objCells[1].style.backgroundImage="url("+sTheme+"res/images/tab_bg_active.gif)";
                objCells[2].getElementsByTagName("IMG")[0].src=sTheme+"res/images/tab_right_active.gif";
            }
            else
            {
                objCells[0].getElementsByTagName("IMG")[0].src=sTheme+"res/images/tab_left_inactive.gif";
                objCells[1].style.backgroundImage="url("+sTheme+"res/images/tab_bg_inactive.gif)";
                objCells[2].getElementsByTagName("IMG")[0].src=sTheme+"res/images/tab_right_inactive.gif";
            }
        }
    };

    //sets class for tabs that are different for top and bottom tabs. For bottom tabs, prefix 'b' will be added before classnames
    this.setClass=function(sElementId,sClassName,isTabsAtBottom,isAddTabBottomCSS) //local function
    {
        if(isTabsAtBottom && isAddTabBottomCSS)
            document.getElementById(sElementId).className="b"+sClassName;
        else
            document.getElementById(sElementId).className=sClassName;
    };

    this.addTab=function(sTabbedPaneId,sTitle,sContent,sUrl,iInsertAt,iRefTabIndex,isCreateCheckbox,fnOnSelect,isChecked)
    {
        //alert(sTabbedPaneId+"::"+sTitle)
        var objTabbedpane=document.getElementById(sTabbedPaneId);
        var ulTabsContainer=objTabbedpane.childNodes[0];
        while(ulTabsContainer.nodeName!="UL")
            ulTabsContainer=ulTabsContainer.nextSibling;
        if(!ulTabsContainer)
            return;

        if(!iRefTabIndex)
            iRefTabIndex=0;

        var iTabbedpaneType=objTabbedpane.getAttribute("TabpaneType"); //1 for simple type, 0 for img type
        var iNewTabIndex;
        if(objTabbedpane.getAttribute("actualTabIndex"))
            iNewTabIndex=parseInt(objTabbedpane.getAttribute("actualTabIndex"))+1;
        var objNewTab;
        var objPrevTab=null;
        if(iTabbedpaneType==1)
        {
            var liTabs=ulTabsContainer.getElementsByTagName("LI");
            if(!iNewTabIndex)
                iNewTabIndex=liTabs.length;
            if(iInsertAt>=0 && iInsertAt < liTabs.length)
            {
                objPrevTab=liTabs[iInsertAt];
                //alert(iInsertAt+","+objPrevTab.id)
            }

            objNewTab=liTabs[iRefTabIndex].cloneNode(true);
            var objAnchor=objNewTab.getElementsByTagName("A")[0];

            cross.getFirstElement(objAnchor.childNodes).innerHTML=((isCreateCheckbox)?tabbedPane.addCheckBox(iNewTabIndex,sTabbedPaneId,fnOnSelect,isChecked):"")+sTitle;//sTitle;
            objAnchor.onclick=function()
            {
                tabbedPane.selectTab(sTabbedPaneId,iNewTabIndex);
            };
        }
        else
        {
            if(!iNewTabIndex)
                iNewTabIndex=ulTabsContainer.childNodes.length;
            if(iInsertAt>=0 && iInsertAt < ulTabsContainer.childNodes.length)
                objPrevTab=ulTabsContainer.childNodes[iInsertAt];
            objNewTab=ulTabsContainer.childNodes[iRefTabIndex].cloneNode(true);


            objNewTab.tBodies[0].rows[0].cells[1].innerHTML=((isCreateCheckbox)?tabbedPane.addCheckBox(iNewTabIndex,sTabbedPaneId,fnOnSelect,isChecked):"")+sTitle;
            objNewTab.onclick=function()
            {
                tabbedPane.selectTab(sTabbedPaneId,iNewTabIndex);
            };
        }

        objNewTab.id=sTabbedPaneId+"tab"+iNewTabIndex;
        objNewTab.setAttribute("tabIndex",iNewTabIndex);
        objNewTab.setAttribute("liTabIndex",iNewTabIndex);
        var dvScrollTabInner = cross.getChildren(ulTabsContainer)[1];
        if(objPrevTab)
            dvScrollTabInner.insertBefore(objNewTab,objPrevTab);
        else
            dvScrollTabInner.appendChild(objNewTab);

        var objDiv=ulTabsContainer.nextSibling.childNodes[iRefTabIndex];//document.getElementById(sTabbedPaneId+"content"+(iNewTabIndex-1));
        var objNewContentDiv=objDiv.cloneNode(true);
        objNewContentDiv.id=sTabbedPaneId+"content"+iNewTabIndex;

        var clFragment = document.createDocumentFragment();
        clFragment.appendChild(objNewContentDiv);
        objTabbedpane.setAttribute("actualTabIndex",iNewTabIndex);
        var objDivParent=objDiv.parentNode;
        if(sContent)
        {
            objNewContentDiv.innerHTML=sContent;
            objDivParent.appendChild(clFragment);
            initAllCombos=null;
            loadResources(objNewContentDiv,util.onScriptsLoad);
        }
        else
        {
            objNewContentDiv.innerHTML="New Tab Content";
            objDivParent.appendChild(clFragment);
        }

        tabbedPane.selectTab(sTabbedPaneId,iNewTabIndex);


        /*var dvContents=ulTabsContainer.nextSibling;
        while(dvContents.nodeName!="DIV")
            dvContents=dvContents.nextSibling;
        if(!dvContents)
            return;*/
    };

    /*
    *  callback function from Dynamicresources.js
    * */
    /*this.initCombo = function()
    {
        initAllCombos();
    };*/

    this.setTabTitle=function(sTabbedPaneId,iTabIndex,sTitle)
    {
        var liTab=document.getElementById(this.getTabId(sTabbedPaneId)+iTabIndex);
//        liTab.getElementsByTagName("A")[0].innerHTML=sTitle;
        var span=liTab.getElementsByTagName("A")[0].childNodes[0];
        span.innerHTML=sTitle;
    };

    this.getTab=function(sTabbedPaneId,iTabIndex)
    {
        return document.getElementById(this.getTabId(sTabbedPaneId)+iTabIndex);
    };

    this.getSelectedTab=function(sTabbedPaneId)
    {
        var sTabId = this.getTabId(sTabbedPaneId);;
        var objTab=document.getElementById(sTabId+"0");
        return this.getTab(sTabbedPaneId,objTab.parentNode.childNodes.length-1);        
    };

    this.getTabTitle=function(sTabbedPaneId,iTabIndex)
    {
        var liTab=document.getElementById(this.getTabId(sTabbedPaneId)+iTabIndex);
        return cross.getFirstElement(cross.getFirstElement(liTab.childNodes).childNodes).innerHTML;
    };


    this.getActualTabIndex=function(sTabbedPaneId,iTabIndex)
    {

        //var objTabbedPane=document.getElementById(sTabbedPaneId);
//        alert(this.getTabId(sTabbedPaneId)+iTabIndex)
        var objTabpane=document.getElementById(sTabbedPaneId);
        var ulTabParent=cross.getFirstElement(objTabpane.childNodes);//document.getElementById(this.getTabId(sTabbedPaneId)+iTabIndex).parentNode;
        var dvScrollTabInner = cross.getChildren(ulTabParent)[1];
        //alert("getActualTabIndex "+getElementAt(ulTabParent.childNodes,iTabIndex).getAttribute("tabIndex"));
        // return cross.getElementAt(ulTabParent.childNodes,iTabIndex).getAttribute("liTabIndex");
        return cross.getElementAt(dvScrollTabInner.childNodes,(iTabIndex+1)).getAttribute("liTabIndex");//ulTabParent.childNodes[iTabIndex].getAttribute("tabIndex");
    };

    this.removeTabByIndex = function(thisObj,sTabbedPaneId)
    {
        //iTabId=thisObj.parentNode.parentNode.getAttribute("tabIndex");
        var iTabIndex=tabbedPane.getChildrenIndex(thisObj.parentNode.parentNode);
        var iTabId=tabbedPane.getActualTabIndex(sTabbedPaneId,iTabIndex);
        var objTabbedpane=document.getElementById(sTabbedPaneId);
        if(this.beforeRemove(sTabbedPaneId,iTabId,objTabbedpane.getAttribute("beforeCloseHandler"),iTabIndex))
            this.removeTab(sTabbedPaneId,iTabId);
    };

    this.beforeRemove=function(sTabpaneId,iTabId,sBeforeCloseHandler,iTabIndex)
    {
        if(sBeforeCloseHandler != null)
            return eval(sBeforeCloseHandler).apply(this,[sTabpaneId,iTabId,iTabIndex]);
        return true;
    };

    //function used for for deleting tab. Tab and tab-content related html will be deleted from DOM tree.
    //getActualTabIndex(getSelectedIndex()) function value should be passed as iTabid parameter value
    this.removeTab=function(sTabpaneId,iTabId)
    {
        var objTabbedpane=document.getElementById(sTabpaneId);
        
        //if(this.beforeRemove(sTabpaneId,iTabId,objTabbedpane.getAttribute("beforeCloseHandler")))
        {
            var sTabId = this.getTabId(sTabpaneId);
            var sTabContentId = this.getTabContentId(sTabpaneId);

            if(!objTabbedpane.getAttribute("actualTabIndex"))
            {
                var liTabs=objTabbedpane.getElementsByTagName("UL")[0].childNodes;
                objTabbedpane.setAttribute("actualTabIndex",liTabs.length-1);
            }

            if(document.getElementById(sTabId+iTabId))
            {
                var objNextTab=document.getElementById(sTabId+iTabId).nextSibling;
                if(!objNextTab)
                    objNextTab=document.getElementById(sTabId+iTabId).previousSibling;
                if(objNextTab)
                    this.selectTab(sTabpaneId,objNextTab.getAttribute("liTabIndex"));
                else
                {
                    alert("Default tab cannot be deleted");
                    return;
                }
                //removing tab and tab contents
                this.removeNode(document.getElementById(sTabId+iTabId));
                var objContentDiv=document.getElementById(sTabContentId+iTabId);
                unloadResources(objContentDiv);
                this.removeNode(objContentDiv);

            }


             var sHandlerFn  = objTabbedpane.getAttribute("onCloseHandler");
            if(sHandlerFn != null)
                eval(sHandlerFn).apply(this,[sTabpaneId,iTabId]);
        }
    };

    this.removeNode=function(objElement)
    {
        var objParentNode=objElement.parentNode;
        objParentNode.removeChild(objElement);
    };

    this.getTabIndex=function(objTab,iTabIndex)
    {
        return objTab.getAttribute("liTabIndex");
    };
    //function used for enabling and disabling tabs
    this.enableOrDisable=function(isEnable,sTabpaneId,iTabIndex)
    {
//        alert("enableOrDisable")
        var sTabId = this.getTabId(sTabpaneId);
        var objTab=document.getElementById(sTabId+iTabIndex);
        if(objTab)
        {
            var objTabContent = document.getElementById(this.getTabContentId(sTabpaneId)+iTabIndex);
            var elemInput=objTabContent.getElementsByTagName("INPUT");
            var elemSelect=objTabContent.getElementsByTagName("SELECT"),i;
//             alert(elemSelect+"=="+elemSelect.length)
            if(isEnable)
            {
                for(i=0; i < elemInput.length; i++)
                {
                    if(elemInput[i].getAttribute("isIgnore"))
                    {
                        elemInput[i].disabled = false;
                        elemInput[i].removeAttribute("isIgnore");
                    }
                }
                for(i=0; i < elemSelect.length; i++)
                {
                    if(elemSelect[i].getAttribute("isIgnore"))
                    {
                        elemSelect[i].disabled = false;
                        elemSelect[i].removeAttribute("isIgnore");
                    }
                }

                if(objTab.getAttribute("isDisabled"))
                    objTab.removeAttribute("isDisabled");
                objTab.getElementsByTagName("A")[0].style.color="";


                var iActiveTabIndex=tabbedPane.getSelectedIndex(sTabpaneId);
                if(iActiveTabIndex==iTabIndex)
                    objTab.className="TabberActive";
                else
                    objTab.className="TabberTabInactive";

//                if(util.hasClass(objTab,"disabledTab"))
//                    util.removeClass(objTab,"disabledTab");
            }
            else
            {
                objTab.setAttribute("isDisabled",true);
                objTab.getElementsByTagName("A")[0].style.color="#AAA";
                objTab.className="TabberTabDisabled";


                //util.addClass(objTab,"disabledTab");


                for( i=0; i < elemInput.length; i++)
                {
                    if(!elemInput[i].disabled)
                    {
                        elemInput[i].disabled=true;
                        elemInput[i].setAttribute("isIgnore",true);
                    }
                }
                 for( i=0; i < elemSelect.length; i++)
                {
                    if(!elemSelect[i].disabled)
                    {
                        elemSelect[i].disabled = true;
                        elemSelect[i].setAttribute("isIgnore",true);
                    }
                }
            }
        }
    };

    this.isDisabledTab=function(sTabpaneId,iTabIndex)
    {
        var isDisabled=false,objAnchor;
        var objTab=document.getElementById(this.getTabId(sTabpaneId)+iTabIndex);
        if(objTab!=null)
        {
            objAnchor=cross.getChildren(objTab)[0];
            isDisabled=(objAnchor!=null && objAnchor.hasAttribute("disabled"));
        }
        return isDisabled;
    };

    this.showHide=function(isShow,sTabpaneId,iTabIndex)
    {
        var sTabId = this.getTabId(sTabpaneId);;
        var objTab=document.getElementById(sTabId+iTabIndex);
        if(objTab)
        {
            if(isShow)
                objTab.style.display="inline";
            else
                objTab.style.display="none";
        }
    };

    this.getTabCount=function(sTabpaneId)
    {
        var sTabId = this.getTabId(sTabpaneId);;
        var objTab=document.getElementById(sTabId+"0");
        //alert(objTab.parentNode.childNodes.length);
        //return objTab.parentNode.childNodes.length;
        return objTab.parentNode.getElementsByTagName("LI").length;
    };

    this.onTabMouseover = function(objLi,sTabpaneId,iTabIndex)
    {
        iTabIndex=tabbedPane.getChildrenIndex(objLi);
        var iTabCount=tabbedPane.getTabCount(sTabpaneId);
        var objTabbedpane=document.getElementById(sTabpaneId);
        var sIgnoreCloseIndexes=objTabbedpane.getAttribute("IgnoreCloseIndexes");
        if(sIgnoreCloseIndexes!=null)
        {
            var arrIgnoreCloseIndexes=sIgnoreCloseIndexes.split(",");
            for(var i=0; i < arrIgnoreCloseIndexes.length; i++)
            {
                if(arrIgnoreCloseIndexes[i]==iTabIndex)
                    return;
                else if(arrIgnoreCloseIndexes[i]==999 && (iTabIndex==iTabCount-1)) //'IgnoreCloseIndexes' will contain '999' to ignore last tab
                    return;
            }
        }
        
//        var imgId = objLi.childNodes[1];
        var arrChilds = cross.getChildren(objLi);
        arrChilds = cross.getChildren(arrChilds[1]);
        arrChilds[0].style.display = 'inline-block';
    };

    this.onTabMouseout = function(objLi,sTabpaneId,iTabIndex)
    {
        var arrChilds = cross.getChildren(objLi);
        arrChilds = cross.getChildren(arrChilds[1]);
        arrChilds[0].style.display = ' none';
    };

    this.checkTab = function(elmChk,iTabIndex,sTabpaneId)//,fnOnClick
    {
        var isChecked = elmChk.checked;
        tabbedPane.enableOrDisable(isChecked,sTabpaneId,iTabIndex);

         /*if(fnOnClick)
            fnOnClick(isChecked,iTabIndex,sTabpaneId);*/
    };

    this.addCheckBox = function(iTabIndex,sTabpaneId,fnOnSelect,isChecked)
    {
        var sText = "<input type='checkbox' class='chkBox' id='chk["+iTabIndex+"]_"+sTabpaneId+ "' onclick='tabbedPane.checkTab(this,"+iTabIndex+","+sTabpaneId+","+fnOnSelect+")' "+(isChecked?"checked":"")+" >";
        return sText;
    };

    this.getChildrenIndex=function(ele)
    {
        //IE is simplest and fastest
        if(ele.sourceIndex)
        {
            return ele.sourceIndex - ele.parentNode.sourceIndex - 1;
        }
        //other browsers
        var i=0;
        while(ele = ele.previousElementSibling){
            i++;
        }
        return i;
    }

};


function enableTab(objChkbox,sTabpaneId,iTabIndex)
{       
    tabbedPane.enableOrDisable(!objChkbox.checked,sTabpaneId,iTabIndex)
}


var clViewMap = new function()
{
    app.registerInstance("clViewMap",clViewMap);

    var me = this;

    this.iLatitude = 0; //holds the location used when opening the map, used while reset or saving without search
    this.iLongitude = 0;

    this.iClientLatitude = 0; //holds coordinates of client location, used to show user's current location and to calculate the distance
    this.iClientLongitude = 0;

    this.iSearchLatitude = 0; //holds search location, used when saving after search and location selection
    this.iSearchLongitude = 0;

    this.sCallbackFn = null;
    this.sAddressText = null;
    this.isDialogView=true;

    this.sGoogle_maps_api_key = null;


    var map=null;
    var infoWindow=null;
    var marker=null;
    var clSearchBox=null;

    this.onWloadInit = function(iLatitude, iLongitude, sCallbackFn, sAddressText,isShowCurrentLocation)
    {
        this.sCallbackFn = sCallbackFn;
        this.sAddressText=sAddressText;

        /*if (iLatitude == 0 && iLongitude == 0 && sAddressText == null)
        {
            iLatitude = 17.3667;
            iLongitude = 78.4667;
        }*/

        if(iLatitude && iLongitude)
        {
            this.iLatitude = iLatitude;
            this.iLongitude = iLongitude;
        }

        var elemSearchBox=document.getElementById("searchBox");
        if(elemSearchBox)
        {
            clSearchBox = new google.maps.places.SearchBox(elemSearchBox);
            clSearchBox.addListener('places_changed', function() {
                me.onChangeAddressInMap()
            })
        }

        var isLocationEmpty=iLatitude==0 && iLongitude==0;

        //alert(iLatitude+","+ iLongitude)
        if(isLocationEmpty)
        {
            if(elemSearchBox && util.trim(elemSearchBox.value).length>0)
            {
                findClientLocation(false,true,this.sGoogle_maps_api_key);
                //me.onClkSearch();
            }
            else
            {
                //alert(2)
                if(isShowCurrentLocation=='')
                    isShowCurrentLocation=true;

                //if(isShowCurrentLocation)
                //    findClientLocation(false);
                //else
                  findClientLocation(isShowCurrentLocation,false,this.sGoogle_maps_api_key);

            }
        }
        else
        {
            //alert(3)
            findClientLocation(false,false,this.sGoogle_maps_api_key);
             if(me.iClientLatitude==0 && clAppBuffer.getClientLatitude()!=0)
             me.iClientLatitude =clAppBuffer.getClientLatitude();
            if(me.iClientLongitude==0 && clAppBuffer.getClientLongitude()!=0)
            me.iClientLongitude = clAppBuffer.getClientLongitude();
            me.setMapLocation(iLatitude,iLongitude,true);
        }
    };

    this.setGoogleMapsApiKey = function(sKey)
    {
        this.sGoogle_maps_api_key = sKey;
    };

    this.onChangeAddressInMap = function()
    {
            me.onClkSearch();
            var clLatLng  = new google.maps.LatLng( me.iSearchLatitude,me.iSearchLongitude);
            infoWindow.set("pixelOffset", new google.maps.Size(0,-30));
            getAddressFromGeocoder(showInfoWindow,clLatLng);
    }


    this.createInfoWindow=function()
    {
        infoWindow = new google.maps.InfoWindow();
        /*infoWindow = new google.maps.InfoWindow({
            pixelOffset: new google.maps.Size(0, -30),
        })*/
        google.maps.event.addListener(map, 'click', findAddress);
    };

    this.onClkSearch=function()
    {
//        google.maps.event.addListener(searchBox, 'places_changed', function() {

        var places = clSearchBox.getPlaces();

        if(places && places.length>0)
        {
            var bounds = new google.maps.LatLngBounds();
            var place = places[0];
            me.iSearchLatitude=place.geometry.location.lat();
            me.iSearchLongitude=place.geometry.location.lng();

            me.setMapLocation(me.iSearchLatitude,me.iSearchLongitude);
            setDistance(me.iClientLatitude,me.iClientLongitude,me.iSearchLatitude,me.iSearchLongitude);
            bounds.extend(place.geometry.location);

           /* var elemReset=document.getElementById("spReset");
            elemReset.style.display="";*/
        }
        else
        {
            var elemSearchBox=document.getElementById("searchBox");
            me.getMapLocationByAddress([elemSearchBox.value], me.callbkSetLocationForAddress);
        }
        //});
    };

    this.onChangeSearchDirectAddress = function(objThis,sTableId)
    {
        me.sCallbackFn="moduleView.setAddressDetails";
        moduleView.sTableId = sTableId;
        me.isDialogView = false;
        me.iLatitude = 0;
        me.iLongitude = 0;
        me.iSearchLongitude =0;
        me.iSearchLatitude = 0;
        me.marker = null;
        me.sAddressText = null;
        me.map = null;
            var places = clSearchBox.getPlaces();
             if(places && places.length>0) {
                var bounds = new google.maps.LatLngBounds();
                var place = places[0];
                me.iSearchLatitude = place.geometry.location.lat();
                me.iSearchLongitude = place.geometry.location.lng();
                me.callbkSetLocationForAddressDirect();
                 objThis.value='';
            }
    };
    this.onFocusAddGoogleSearch = function(objThis,sId)
    {
        //var elemSearchBox=document.getElementById("tfDirectSearch_"+sId);
            clSearchBox = new google.maps.places.SearchBox(objThis);
          clSearchBox.addListener('places_changed', function() {
            me.onChangeSearchDirectAddress(objThis,sId)
        });

            //clSearchBox = new google.maps.places.SearchBox(objThis);
    };



    this.getMapLocationByAddress = function(arrAddresses, fnCallback)
    {
        var arrLatLngs=[];
        var geocoder = new google.maps.Geocoder();

        for(var i=0; i < arrAddresses.length; i++)
        {
            //geocoder.geocode({ 'address': arrAddresses[i]}, function(results, status)

            function fnAddress(i)
            {
                this.iIndex=i;

                return function(results, status)
                {
                    if (status == google.maps.GeocoderStatus.OK)
                    {
                        /*alert("Latitude: "+results[0].geometry.location.lat());
                         alert("Longitude: "+results[0].geometry.location.lng());*/
                        arrLatLngs[this.iIndex]=[results[0].geometry.location.lat(), results[0].geometry.location.lng()];

                        //alert(this.iIndex+","+arrLatLngs.length+","+arrAddresses.length)
                        if(arrLatLngs.length==arrAddresses.length)
                            fnCallback(arrLatLngs);
                    }
                    else
                    {
                        if(document.getElementById("addr2"))
                        {
                            var sAddr2=document.getElementById("addr2").value;
                            if(sAddr2)
                                me.getMapLocationByAddress([sAddr2],fnCallback);
                        }

                    }
                };
            }

            var fn=fnAddress(i);
            geocoder.geocode({ 'address': arrAddresses[i]},fn);

        }

    };
    this.callbkSetLocationForAddressDirect = function()
    {
        var clLatLng  = new google.maps.LatLng( me.iSearchLatitude,me.iSearchLongitude);
        getAddressFromGeocoder(getAddressAndSave,clLatLng);

        //alert("address")
        //me.setMapLocation(latLng[0], latLng[1]);
        //setDistance(me.iClientLatitude,me.iClientLongitude,latLng[0], latLng[1]);


    };


    this.callbkSetLocationForAddress = function(arrLatLng)
    {
        var latLng=arrLatLng[0];

        me.iLatitude=latLng[0];
        me.iLongitude=latLng[1];

        //alert("address")
        me.setMapLocation(latLng[0], latLng[1]);
        setDistance(me.iClientLatitude,me.iClientLongitude,latLng[0], latLng[1]);

    };

    this.onClkReset=function()
    {
        me.setMapLocation(me.iLatitude, me.iLongitude);
        me.iSearchLatitude=0;
        me.iSearchLongitude=0;
        setDistance(me.iClientLatitude,me.iClientLongitude,me.iLatitude, me.iLongitude);
    };

    this.showMyLocation=function()
    {
        me.setMapLocation(me.iClientLatitude, me.iClientLongitude,true);
    };

    this.setSelectedAddress=function(iLatitude,iLongitude)
    {
        /*me.iLatitude=iLatitude;
        me.iLongitude=iLongitude;*/
        me.iSearchLatitude=iLatitude;
        me.iSearchLongitude=iLongitude;

        var elemSearchBox=document.getElementById("searchBox");
        elemSearchBox.value=me.sAddressText;

        me.setMapLocation(iLatitude, iLongitude);
        setDistance(me.iClientLatitude,me.iClientLongitude,iLatitude,iLongitude);
        infoWindow.close();

       /* var elemReset=document.getElementById("spReset");
        elemReset.style.display="";*/
    };

    this.setMapLocation = function(iLatitude, iLongitude,isShowWindow,isChangeZoom)
    {
        var clLatLng = new google.maps.LatLng(iLatitude,iLongitude);
        if(map==null)
        {
            map = new google.maps.Map(document.getElementById('map_canvas'), {
                zoom: 14
                ,center: clLatLng
                ,mapTypeId: google.maps.MapTypeId.ROADMAP
    //            ,disableDefaultUI: true
            });

            me.createInfoWindow();


        }
        else
        {
            if(!isChangeZoom) {
                map.setCenter(clLatLng);
                map.setZoom(14);
            }
        }

        if(marker!=null)
            marker.setPosition(clLatLng);
        else
        {

            marker = new google.maps.Marker({
                position: clLatLng,
                map: map
            });
        }

        var elemSearchBox=document.getElementById("searchBox");
        if(elemSearchBox && elemSearchBox.value)
            marker.setTitle(elemSearchBox.value);
        if(isShowWindow)
        {
            infoWindow.set("pixelOffset", new google.maps.Size(0,-30));
            showInfoWindow(iLatitude,iLongitude,elemSearchBox.value);
            setDistance(me.iClientLatitude,me.iClientLongitude,iLatitude,iLongitude);
        }
    };


    this.onClkSave = function()
    {
        var clLatLng;
        if(me.iSearchLatitude!=0 && me.iSearchLongitude!=0)
        {
            clLatLng = new google.maps.LatLng(me.iSearchLatitude,me.iSearchLongitude);
            getAddressFromGeocoder(getAddressAndSave,clLatLng);
        }
        else if(me.iLatitude!=0 && me.iLongitude!=0)
        {
            clLatLng = new google.maps.LatLng(me.iLatitude,me.iLongitude);
            getAddressFromGeocoder(getAddressAndSave,clLatLng);
        }
        else
        {
            var arrAddrComponents = {"address":"","street":"","city":"","state":"","country":"","pincode":""};
            var sAddressText=me.sAddressText;
            if(sAddressText.indexOf("$$")!=-1)
            {
                sAddressText=sAddressText.split("$$");
                arrAddrComponents["address"] = sAddressText[0];
                arrAddrComponents["city"] =  sAddressText[1];
                arrAddrComponents["state"] =  sAddressText[2];
                arrAddrComponents["country"] =  sAddressText[3];
                arrAddrComponents["pincode"] =  sAddressText[4];
            }
            else
                arrAddrComponents["address"] = me.sAddressText;

            arrAddrComponents["lat"] = me.iLatitudeAddrText;
            arrAddrComponents["lng"] = me.iLongitudeAddrText;

            saveLocation(arrAddrComponents);

        }
    };


    function saveLocation(arrAddrComponents)
    {
        parent.clAppBuffer.setClientLatitude(clAppBuffer.getClientLatitude());
        parent.clAppBuffer.setClientLongitude(clAppBuffer.getClientLongitude())
        if(document.getElementById("hftagId")==null && me.isDialogView)// used to ignore
            parent.app.hidePopUp();

        eval(me.sCallbackFn)(arrAddrComponents);

    };

    function getAddressAndSave(iLatitude,iLongitude,sAddressText,arrAddressComponents)
    {
        //alert(iLatitude+"=="+iLongitude)
        var arrAddrComponents = {"address":"","street":"","city":"","state":"","country":"","pincode":""};

        var sLocationName,sLocationType,sAddress = "";

        for (var i = 0; i < arrAddressComponents.length; i++)
        {
            sLocationType = arrAddressComponents[i].types[0];
            sLocationName = arrAddressComponents[i].long_name;
            if(!sLocationType)
                sAddress += ","+sLocationName;
           /* else if (sLocationType == "street_number" || sLocationType.indexOf('sublocality')!=-1)
                arrAddrComponents["street"] = arrAddrComponents["street"]+sLocationName+" ";//street*/
            else if (sLocationType == "street_number" || sLocationType.indexOf('sublocality')!=-1 || sLocationType=="political")
            {
                if(arrAddrComponents["street"]!="" && arrAddrComponents["street"]!=null)
                sLocationName=","+sLocationName;
                arrAddrComponents["street"] = arrAddrComponents["street"]+sLocationName+" ";//street
            }
            else if (sLocationType == "locality")
                arrAddrComponents["city"] = sLocationName;//city
            else if (sLocationType == "administrative_area_level_1")
                arrAddrComponents["state"] = sLocationName;
            else if (sLocationType == "country")
                arrAddrComponents["country"] = sLocationName;
            else if (sLocationType == 'postal_code')
                arrAddrComponents["pincode"] = sLocationName;
            else
            {
                /*if (sLocationType == "street_number")
                    sAddress = sLocationName + ",";  //street
                else if (sLocationType == "route")
                    sAddress += sLocationName + ",";  //1 Road name
                else if (sLocationType == 'neighborhood')
                    sAddress += sLocationName + ","; //2 near by
                else if (sLocationType == 'sublocality')
                    sAddress += sLocationName; //3 area*/

                //|| sLocationType=="administrative_area_level_2"
                if (sLocationType == "premise" || sLocationType == "route" || sLocationType == 'neighborhood'
                                 || sLocationType=="train_station" || sLocationType=="establishment") //sublocality_level_1,sublocality_level_2
                    sAddress += ","+sLocationName;  //street


                /*else if(sLocationType== 'administrative_area_level_2')
                 sAddress+=","+sLocationName;//Political*/
            }
        }
        if(sAddress.length>1)
            arrAddrComponents["address"] = sAddress.substring(1);
        arrAddrComponents["lat"] = iLatitude;
        arrAddrComponents["lng"] = iLongitude;

        //this.arrAddrComponents = {"country":sCountry,"postalCode":iPostalCode,"state":sStateName,"destrict":sDestrict,"locality":sLocality,"route":sRoute,}
       //alert(arrAddrComponents)

         saveLocation(arrAddrComponents);
    }


    function setDistance(lat1,lon1,lat2,lon2)
    {
        if(me.iClientLatitude!=0 && me.iClientLongitude!=0) {
            document.getElementById("spDistance").style.display = "";
            var iDistance = me.calculateDistance(lat1, lon1, lat2, lon2);
            document.getElementById("spDistanceValue").innerHTML = iDistance;
        }
        else{
            document.getElementById("spDistance").style.display="none";
        }
    };


    function findClientLocation(isShowCurrentLocation,isSearchByText,sMapsApiKey)
    {
       //var loc = {};
       // alert(clAppBuffer.getClientLatitude())

        jQuery.post( "https://www.googleapis.com/geolocation/v1/geolocate?key="+sMapsApiKey,
                function(position)
                {
        		    //apiGeolocationSuccess({coords: {latitude: success.location.lat, longitude: success.location.lng}});

                   /* me.iClientLatitude=position.location.lat;
                    me.iClientLongitude=position.location.lng;*/


                    if(isShowCurrentLocation)
                         me.setMapLocation(me.iClientLatitude,me.iClientLongitude);
                    else if(isSearchByText)
                        me.onClkSearch();
                })
            .fail(function(err) {
                var objRepsonseError = JSON.parse(err.responseText);
                 var objError =objRepsonseError.error;
                 var objErrors =objError.errors;
                 msg.showMessage(0,objError.message,objErrors[0].reason,null,null);/*,"me.removeShowMessage"*/
                 /* .fail(function(err) {
                    alert("API Geolocation error! \n\n"+err.responseText)*/;
                  });
        if(clAppBuffer.getClientLatitude()==0)
            me.getCurrentLocation();

    };
    this.removeShowMessage= function()
    {
        document.getElementById("dvMessage").parentNode.removeChild(document.getElementById("dvMessage"))
    }

    me.distance = 0;
    this.calculateDistance=function(lat1,lon1,lat2,lon2)
    {
        var start = new window.google.maps.LatLng(lat1, lon1);
        var end = new window.google.maps.LatLng(lat2,lon2);
        var directionsService = new google.maps.DirectionsService();
        var request = {
            origin: start,
            destination: end,
            travelMode: window.google.maps.TravelMode.DRIVING,//BICYCLING //WALKING
            unitSystem: window.google.maps.UnitSystem.METRIC,//IMPERIAL
            provideRouteAlternatives: true,
            avoidFerries: true,
            avoidHighways: false,
            avoidTolls: true
        };
        directionsService.route(request, function (result, status)
        {
            if (status == window.google.maps.DirectionsStatus.OK)
            {
                me.distance =  result.routes[0].legs[0].distance.value;
            }

        });

        return (parseInt(me.distance)/1000).toFixed(1);


       /* var R = 6371; // Radius of the earth in km
        var dLat = deg2rad(lat2-lat1);  // deg2rad below
        var dLon = deg2rad(lon2-lon1);
        var a =
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
        Math.sin(dLon/2) * Math.sin(dLon/2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        var d = R * c; // Distance in km
        return d.toFixed(1);*/
    };

    function deg2rad(deg)
    {
        return deg * (Math.PI/180);
    };


    function findAddress(event)
    {
        infoWindow.set("pixelOffset", new google.maps.Size(0,-30));
        getAddressFromGeocoder(showInfoWindow,event.latLng);
        var myLatLng = event.latLng;
        var lat = myLatLng.lat();
        var lng = myLatLng.lng();
        me.setMapLocation(lat,lng,false,true);
        me.iSearchLatitude=lat;
        me.iSearchLongitude=lng;
        setDistance(me.iClientLatitude,me.iClientLongitude,me.iSearchLatitude,me.iSearchLongitude);
        var elemSearchBox=document.getElementById("searchBox");
        elemSearchBox.value=me.sAddressText;
    }

    function getAddressFromGeocoder(fnCallback,clLatLng)
    {
        var geocoder = new google.maps.Geocoder();
        var place;
        geocoder.geocode({latLng: clLatLng}, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK)
            {
                for(var i=0;i<results.length;i++)
                {
                    var objResults=results[i];
                    var objGeometry = objResults.geometry;
                    var locationType=objGeometry.location_type;
                    if(locationType=="ROOFTOP")
                    {
                         place = results[i];
                        break;
                    }
                    else
                         place = results[0]
                }
                //alert(place.address_components)
                if (place)
                    fnCallback(clLatLng.lat(),clLatLng.lng(),place.formatted_address,place.address_components);
            }
        });
        return null;
    }


    function showInfoWindow(iLatitude,iLongitude,sAddressText,arrAddrComponents)
    {
        me.sAddressText=sAddressText;
        me.iLatitudeAddrText=iLatitude;
        me.iLongitudeAddrText=iLongitude;

        var clLatLng = new google.maps.LatLng(iLatitude,iLongitude);
        var sAddress="<div style='width:260px'>"+sAddressText+"</div>";
        //sAddress+="<div align='right' style='padding-top:5px;padding-bottom:5px;margin-right:10px'><a href='javascript:void(0)' onclick='clViewMap.setSelectedAddress("+iLatitude+","+iLongitude+")'>Pick Address</a></div>";
        infoWindow.setContent(sAddress);
        infoWindow.setPosition(clLatLng);
        infoWindow.open(map);
    }
   this.getCurrentLocation = function() {
       if (navigator.geolocation)
            navigator.geolocation.getCurrentPosition(me.callbackLocation);
    };
    this.callbackLocation = function(position)
    {
        me.iClientLatitude = position.coords.latitude;
        me.iClientLongitude = position.coords.longitude;
        clAppBuffer.setClientLatitude(me.iClientLatitude);
        clAppBuffer.setClientLongitude(me.iClientLongitude);
    }

    this.setMapData = function(arrLocationDTOs)
    {
        var clPosition;
        var clMarker;
        var sMarkerColor;
        arrLocationDTOs = eval(arrLocationDTOs);


        var clLatLng, map,arrData,arrUserLocationDTOs, i,iMarkerType;
        arrUserLocationDTOs = new Array();
        for (i = 0; i < arrLocationDTOs.length; i++)
        {
            arrData =arrLocationDTOs[i];
            arrUserLocationDTOs[i] = new CLUserLocationMarkerDTO(arrData[0],arrData[1],arrData[2],arrData[3], arrData[4],arrData[5],arrData[6],arrData[7],arrData[8],
                arrData[9],arrData[10],arrData[11],arrData[12],arrData[13],arrData[14],arrData[15],arrData[16],arrData[17],arrData[18],arrData[19]);
        }
        for (i = 0; i < arrUserLocationDTOs.length; i++)
        {
            clLatLng = new google.maps.LatLng(arrUserLocationDTOs[i].dLatitude, arrUserLocationDTOs[i].dLongitude);
            if(i==0)
            map = clGeoMapUtils.createMap('map_canvas', clLatLng, 2);
            clPosition = clGeoMapUtils.getLatLng(arrUserLocationDTOs[i].dLatitude, arrUserLocationDTOs[i].dLongitude);

            if(arrUserLocationDTOs[i].trackingStatus==Constants.ILocationTracker.USER_TRACKING_STATUS_INACTIVE)
                sMarkerColor="FF4444";
            else if(arrUserLocationDTOs[i].trackingStatus==Constants.ILocationTracker.USER_TRACKING_STATUS_MOVING)
                sMarkerColor="38B1EA";
            else if(arrUserLocationDTOs[i].trackingStatus==Constants.ILocationTracker.USER_TRACKING_STATUS_STOPPED ||
                arrUserLocationDTOs[i].trackingStatus==Constants.ILocationTracker.USER_TRACKING_STATUS_TRACKED)
                sMarkerColor="808080";
            else if(arrUserLocationDTOs[i].iStatus==Constants.ILocationTracker.USER_STATUS_IDLE)
                sMarkerColor="FF4444";
            else
                sMarkerColor="00AA00";
            if(arrUserLocationDTOs[i].sMarkerColor!=null)
                sMarkerColor = arrUserLocationDTOs[i].sMarkerColor;
            iMarkerType = clGeoMapUtils.MARKER_TYPE_SQUARE;
            if(arrUserLocationDTOs[i].iMarkerType>0)
                iMarkerType = arrUserLocationDTOs[i].iMarkerType;
            var sMarkerTitle = "";
            if(arrUserLocationDTOs[i].sTitle != null)
                sMarkerTitle = util.trim(arrUserLocationDTOs[i].sTitle).substring(0,3).toUpperCase();

            clMarker = clGeoMapUtils.createMarker(map, clPosition,iMarkerType , arrUserLocationDTOs[i].sTagName, sMarkerColor, arrUserLocationDTOs[i].iUserId); //F57701

            if (i == 0)
                map.setCenter(clPosition);

            //var sAddress = this.createInfoMessage(arrUserLocationDTOs[i]);
            //clGeoMapUtils.attachInfoMessage(clMarker, sAddress, false);

        }
    };

    function CLUserLocationMarkerDTO(userId, dateTime, distance, latitude, longitude, sTitle, sDescription, iStatus, sDateTimeString, tagName, tagId, modTransId,eventType,batteryPercentage,
                                     lastSync,trackingStatus,moduleName,addressId,iMarkerType,sMarkerColor)
    {

        this.iUserId = userId;
        this.lDateTime = dateTime;
        this.dDistance = distance;
        this.dLatitude = latitude;
        this.dLongitude = longitude;
        this.sTitle = sTitle;
        this.sDescription = sDescription;
        this.iStatus = iStatus;
        this.sDateTimeString = sDateTimeString;
        this.sTagName = tagName;
        this.iTagId = tagId;
        this.iModTransId = modTransId;
        this.eventType = eventType;
        this.batteryPercentage = batteryPercentage;
        this.lastSync = lastSync;
        this.trackingStatus = trackingStatus;
        this.moduleName = moduleName;
        this.addressId = addressId;
        //this.savedLocation = savedLocation;
        this.sMarkerColor = sMarkerColor;
        this.iMarkerType = iMarkerType;
    }

};






var Reusables = Reusables || {};
Reusables.Breakpoints = (function ($) {

  var generateKey = (function () {
    var nextKey = 1;
    return function () {
      var key = 'breakpoint-' + nextKey;
      nextKey++;
      return key;
    };
  })();

  var Queue = function () {
    var callbacks = [];

    this.push = function (callback) {
      callbacks.push(callback);
    };

    this.process = function () {
      while (callbacks.length !== 0) {
        (callbacks.pop())();
      }
    };
  };

  var enterQueue = new Queue();

  var Breakpoint = function ($elements, range, options) {
    this.$elements = $elements;
    this.range = range;
    this.options = options;
    this.key = generateKey();

    // set elements
    this.elements = (function () {
      var isFunction = typeof $elements === 'function';
      var isString = typeof $elements === 'string';
      var isJQuery = $elements instanceof jQuery;
      var hasSelector = isJQuery && !!$elements.selector;
      var elements;

      if (isFunction) {
        elements = $elements;
      } else if (isString) {
        elements = function () { return $($elements); };
      } else if (isJQuery && hasSelector) {
        elements = function () { return $($elements.selector); };
      } else if (isJQuery) {
        elements = function () { return $elements; };
      } else {
        // ...
      }

      return elements;
    })();

    // set range
    this.min = range[0] || 0;
    this.max = range[1] || Infinity;

    // set name
    this.name = (function (name, min, max) {
      if (name) {
        return name;
      }

      // default to breakpoint-{min}-{max}
      max = max === Infinity ? 'up' : max;
      return ['breakpoint', min, max].join('-');
    })(options.name, this.min, this.max);

    // set enter
    if (typeof options.enter === 'function') {
      this.enter = options.enter;
    } else {
      this.enter = function () {};
    }

    // set exit
    if (typeof options.exit === 'function') {
      this.exit = options.exit;
    } else {
      this.exit = function () {};
    }

    return this;
  };

  Breakpoint.prototype.evaluate = function () {
    var breakpoint = this;
    breakpoint.elements().each(function (index, element) {
      var $element = $(element);
      var width = $element.outerWidth();
      var matchNow = breakpoint.min <= width && width < breakpoint.max;
      var matchBefore = $element.data(breakpoint.key) || false;
      var change = matchNow !== matchBefore;
      if (!change) { return; }
      $element.data(breakpoint.key, matchNow);
      var entering = change && matchNow;
      var exiting = change && !matchNow;
      if (entering) {
        enterQueue.push(function () {
          $element.addClass(breakpoint.name);
          breakpoint.enter($element);
        });
      } else if (exiting) {
        $element.removeClass(breakpoint.name);
        breakpoint.exit($element);
      }
    });
  };



  /* PUBLIC */

  var Breakpoints = {};

  var Builder = function ($elements) {
    this.$elements = $elements;
  };

  Breakpoints.on = function ($elements) {
    return new Builder($elements);
  };

  /* functions that rely on private breakpoints array - want to keep that isolated */
  (function () {
    var breakpoints = [];
    Builder.prototype.define = function (range, options) {
      breakpoints.push(new Breakpoint(this.$elements, range, options));
      return this;
    };

    Breakpoints.evaluate = function () {
      var length = breakpoints.length;
      for (var i = 0; i < length; i++) {
        breakpoints[i].evaluate();
      }
      enterQueue.process();
    };

  })();

  /* bind events */
  $(document).on('ready.reusables.breakpoints', Breakpoints.evaluate);
  $(window).on('resize.reusables.breakpoints', Breakpoints.evaluate);

  return Breakpoints;

})(jQuery);
