
var clCrmApiHandler=new function()
{
    var me=this;
    app.registerInstance("CrmApiHandler", this);

    me.VIEW_TYPE_CURRENT_VIEW=0;
    me.VIEW_TYPE_LIST=1;
    me.VIEW_TYPE_EDIT=2;
    me.VIEW_TYPE_DETAILED=3;
    me.VIEW_TYPE_EVENT_REGISTRY=4;
    me.VIEW_TYPE_EVENT_REGISTRY_HANDLER=5;
    me.VIEW_TYPE_EXTERNAL=6;
    me.VIEW_TYPE_SCHEDULER=7;

    me.MSG_TYPE_REQUEST=1;
    me.MSG_TYPE_RESPONSE=2;


    me.EVT_TYPE_FIELD_ONCLICK = 1;
    me.EVT_TYPE_FIELD_ONBLUR = 9;
    me.EVT_TYPE_FIELD_ONFOCUS = 10;


    me.EVT_TYPE_TABLE_ON_ADD_ROW = 1;
    me.EVT_TYPE_TABLE_ON_DELETE_ROW = 2;
    me.EVT_TYPE_TABLE_ON_ENTER = 3;
    me.EVT_TYPE_TABLE_BEFORE_DELETE_ROW = 4;

    me.STATUS_SUCCESS=1;
    me.STATUS_ERROR=2;
    me.STATUS_VALIDATION_ERROR=3;

    var arrReqHandlers={};
    //arrReqHandlers[me.VIEW_TYPE_CURRENT_VIEW]="Focus.crm.extmodule";
    arrReqHandlers[me.VIEW_TYPE_CURRENT_VIEW]="clExternalAPI";
    arrReqHandlers[me.VIEW_TYPE_LIST]="clListAPI";
    arrReqHandlers[me.VIEW_TYPE_DETAILED]="clDetailAPI";
    arrReqHandlers[me.VIEW_TYPE_EDIT]="clModuleAPI";
    arrReqHandlers[me.VIEW_TYPE_EXTERNAL]="clExternalAPI";
    arrReqHandlers[me.VIEW_TYPE_SCHEDULER]="clSchedulerAPI";

    clEventBuffer={};

    /**
     * This function is used to receive message from other window.
     * @param evt
     */
    this.receiveMessage = function(evt)
    {
        var arrData=evt.data;//eval("var reqArr="+evt.data+";reqArr;");
        console.log('Handler received response:  ',arrData);
        if(arrData["msgType"]==me.MSG_TYPE_REQUEST)
        {
            var fnCallback = null;
            var iViewType = arrData['viewType'];
            var sTargetFn = arrData['target'];
            var args = arrData['params'];

            if(sTargetFn=='geoFindDistance') // for finding distance by google api, passing view type and targetfn as args
            {
                if (args != null)
                {
                    args[args.length] = iViewType;
                    args[args.length] = sTargetFn;
                }
            }

            var sFnViewType = arrReqHandlers[iViewType];

            if (iViewType == me.VIEW_TYPE_EVENT_REGISTRY)
            {
                fnCallback = "me." + sTargetFn;
                args[args.length]=evt.source;
            }
            else
            {
                fnCallback = sFnViewType + "." + sTargetFn;
            }

            if (!args)
                args = null;
            else
                var iFieldId = args[0];


            var objReturn = null;
            if (typeof[fnCallback] == "object")
            {
                var objFn;
                if(typeof window[fnCallback] == "object")
                    objFn = fnCallback;
                else
                    objFn = eval(fnCallback);
                try
                {
                    objReturn = objFn.apply(this, args);
                }
                catch(error)
                {
                    console.error('API Error:  '+error.stack);
                    objReturn = clCrmApiHandler.buildApiResponse(me.STATUS_ERROR,error.message);
                }
            }
            else
                objReturn = {"status": me.STATUS_ERROR, "response": "Function Not Found: " + fnCallback};

            if(objReturn)
            {
                objReturn["msgType"] = me.MSG_TYPE_RESPONSE;
                objReturn["viewType"] = iViewType;
                objReturn["target"] = sTargetFn;

                evt.source.postMessage(objReturn, evt.origin);
            }
        }
    };

    /**
     * This function is used to send message to other window.
     * @param iStatus
     * @param iViewType
     * @param sTargetFn
     * @param objData
     */
    this.sendMessage=function(iStatus,iViewType,sTargetFn,objData)
    {
        var objReturn={};
       objReturn["status"]=iStatus;
       objReturn["msgType"]=me.MSG_TYPE_RESPONSE;
       objReturn["viewType"]=iViewType;
       objReturn["target"]=sTargetFn;
       objReturn["data"]=objData;
        window.postMessage(objReturn, "*")
    };
    function getKeyName(sEventName,sModule)
    {
        return (parent.cross.isDefined(sModule)?(sModule+"_"+sEventName):sEventName);
    }

    this.subscribe=function(sEventName,sModule,srcWindow)
    {
        if((cross.isDefined(sEventName))	)
            clEventBuffer[getKeyName(sEventName,sModule)]=srcWindow;
        window.setTimeout( (function(){me.handleEventCallback(sEventName,sModule,'hello');}),100);
    };

    this.unsubscribe=function(sEventName,sModule)
    {
        if(cross.isDefined(sEventName))
            delete clEventBuffer[getKeyName(sEventName,sModule)];

    };
    this.handleEventCallback=function(sEventName,sModule,sData)
    {
        var srcWindow=getEventHandler(sEventName,sModule);
        if(cross.isDefined(srcWindow))
        {
            //var objReturn={"msgType":me.MSG_TYPE_RESPONSE,"status":me.Status_Success,"response":sData,"viewType":me.VIEW_TYPE_EVENT_REGISTRY_HANDLER,"fncallback":sFunc};
            var objReturn={"msgType":me.MSG_TYPE_RESPONSE,"status":me.Status_Success,"response":sData,"viewType":me.VIEW_TYPE_EVENT_REGISTRY_HANDLER,"target":getKeyName(sEventName,sModule)};

            //alert(objReturn['msgType'])
            // alert(objReturn['target'])
            if(srcWindow)
                srcWindow.postMessage(objReturn,"*");
        }
    }

    function getEventHandler(sEventName,sModule)
    {
        if(cross.isDefined(sEventName))
            return  clEventBuffer[getKeyName(sEventName,sModule)];
    };

    this.clearBuffer=function()
    {
        if(cross.isDefined(clEventBuffer))
            clEventBuffer={};
    };

    /**
     * This function is used to form the response in particular format.
     * @param iStatus
     * @param sResponse
     * @param sArrParamNames
     * @param sArrParamValues
     */
    this.buildApiResponse=function(iStatus,sResponse,sArrParamNames,sArrParamValues)
     {
         var arrApiResponse={};
         arrApiResponse["status"]=iStatus;
         arrApiResponse["data"]=sResponse;
         if(sArrParamNames)
         {
             for(var i=0; i < sArrParamNames.length;i++)
                 arrApiResponse[sArrParamNames[i]]=sArrParamValues[i];
         }
         return arrApiResponse;
     };
};

window.addEventListener('message', clCrmApiHandler.receiveMessage, false);
