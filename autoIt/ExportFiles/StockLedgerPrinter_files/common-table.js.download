/**
 setTableId(sTableId)
 getTableId() -- returns table id
 insertColumn(iColIndex,ColName) -- inserts a new column at given column index
 insertRow(iRowPos) -- insert a new row at given row index
 setRowHeight(iHeight) -- sets row height
 getRowCount() -- returns row count
 getColCount() -- returns col count
 setColCount(iColCount) -
 setRowCount(iRowCount)
 setTableHeight(iHeight)
 setTableWidth(iWidth)
 getValueAt(iRowId,iColIndex)
 setValueAt(iRowId,iColIndex,Value)
 hideColumn(iColIndex)
 showColumn(iColIndex)
 deleteRow(iRowPos)
 deleteColumn(iColIndex)
 addRow()

 **/


function sTable(sTableId)
{
    /*var TYPE_DISPLAY = 0;
     var TYPE_STRING = 1;
     var TYPE_NUMERIC = 2;
     var TYPE_FLOAT = 3;
     var TYPE_DATE = 4;
     var TYPE_COMBOBOX = 5;//TYPE_COMBOBOX
     var TYPE_CHECKBOX = 6;
     var TYPE_RADIO = 7;
     var TYPE_IMAGE = 8;
     var TYPE_HIDDEN = 9;
     var TYPE_SIMPLECOMBO = 10;
     var TYPE_SPINFIELD = 11;
     var TYPE_BUTTON = 12;
     var TYPE_COMBOBOX2 = 13;
     var TYPE_ACTIONS = 14;*/

    var me = this;
    this.objTable = null;
    this.isTBodyExists = true;

    this.setTableId = function(sTableId)
    {
        this.sTableId = sTableId;
        //this.objDiv = document.createElement("DIV");
        this.objTable = document.getElementById(sTableId);
        this.objTBody=null;
        this.objTBody = this.objTable.tBodies[0];
        if (!this.objTBody)
        {
            this.objTBody = this.objTable;
            this.isTBodyExists = false;
        }

        //if(this.objTable.parentNode.nodeName=='DIV')
        //this.objDiv = this.objTable.parentNode;
        //this.objDiv.id = "div"+this.sTableId;
    };

    this.getTableId = function()
    {
        return this.sTableId;
    };

    this.hideFirstRow=function()
    {
        var objRow=me.objTBody.rows[0];
        sTable.setFirstRow(me,me.sTableId,objRow);
        me.objTBody.deleteRow(0);
    };

    this.setTableHeight = function(iHeight)
    {
        this.objTable.style.height = iHeight;
    };

    this.setTableWidth = function(iWidth)
    {
        this.objTable.style.width = iWidth;
    };

    this.getTableWidth = function()
    {
        var iWidth=0;
        if(this.objTable.width>0)
            iWidth=this.objTable.width;
        else
        {
            iWidth=this.objTable.style.width;
            iWidth=parseInt(iWidth.substring(0,iWidth.indexOf("px")));
        }
        return iWidth;
    };

    this.setRowHandler = function(sRowHandler)
    {
        me.sRowHandler = sRowHandler;
        //alert(me.sRowHandler+","+me.sTableId)
    };

    this.getRowHandler = function()
    {
        return me.sRowHandler;
    };

    this.setCurrentRow = function(iCurrentRow)
    {
        if (iCurrentRow >= 0)
        {
            // alert(iCurrentRow+"===="+me.objTBody.);
            me.objTable.setAttribute("currentrow", iCurrentRow);
            //            alert(me.objTable.getAttribute("prevrow"))
            //if (me.objTable.getAttribute("prevrow") != null)
            /*var objPrevRow=me.objTBody.rows[me.objTable.getAttribute("prevrow")];
            var iColType = null;
            if(objPrevRow){
                var objPrevTd = objPrevRow.cells[0];
                iColType = objPrevTd.getAttribute("coltype");
                if(iColType != TYPE_CHECKBOX || !objPrevTd.children[0].checked)
                    util.removeClass(me.getHighlightNode(objPrevRow), "sSelectedRow");
                /!*if(iColType == TYPE_CHECKBOX)
                    util.removeClass(objPrevTd.children[0], "sSelectedChkBox");*!/
            }
            util.addClass(me.getHighlightNode(me.objTBody.rows[iCurrentRow]), "sSelectedRow");
            var objCurrTd = me.objTBody.rows[iCurrentRow].cells[0];*/
            //iColType = objCurrTd.getAttribute("coltype");
            /*if(iColType == TYPE_CHECKBOX)
                util.addClass(objCurrTd.children[0], "sSelectedChkBox");*/
            me.objTable.setAttribute("prevrow", iCurrentRow);
            //alert((typeof me.sRowHandler)+","+me.sTableId)
        }
    };

    this.getCurrentRow = function()
    {
        var sCurrentRow = this.objTable.getAttribute("currentrow");
        if (sCurrentRow != null && sCurrentRow >= 0)
            return parseInt(sCurrentRow);
        return -1;
    };

    this.setSelectedCell=function(iRowIndex,iColIndex)
    {
        if(me.objTable.getAttribute("prevcol"))
        {
            var objPrevCell=me.objTBody.rows[me.objTable.getAttribute("prevrow")].cells[me.objTable.getAttribute("prevcol")];
            util.removeClass(objPrevCell,"sSelectedCell");
        }
        me.setCurrentRow(iRowIndex);
        me.objTable.setAttribute("prevcol",iColIndex);
        util.addClass(me.objTBody.rows[iRowIndex].cells[iColIndex],"sSelectedCell");
    };

    this.getHighlightNode=function(objRow,isNewRow)
    {
        if(me.objTable.getAttribute("isEditable"))
        {
            var iCellIndex=0;

            if(isNewRow)
            {
                if((iCellIndex+1) < objRow.childNodes.length && objRow.childNodes[iCellIndex].style.display=="none")
                    iCellIndex++;
                return objRow.childNodes[iCellIndex];
            }
            else
            {
                if((iCellIndex+1) < objRow.cells.length && objRow.cells[iCellIndex].style.display=="none")
                    iCellIndex++;
                return objRow.cells[iCellIndex];
            }
        }
        else
            return objRow;
    };

    this.setLastRow = function(iLastRow)
    {
        if (iLastRow >= 0)
            this.objTable.setAttribute("lastrow", iLastRow);
    };

    this.getLastRow = function()
    {
        var sLastRow = this.objTable.getAttribute("lastrow");
        if (sLastRow != null && sLastRow >= 0)
            return parseInt(sLastRow);
        return -1;
    };

    // inserts a new column
    this.insertColumn = function(iColIndex, sColName)
    {
        var objTR,objTD,objTextNode;
        var iRowCount = this.getRowCount();

        for (var i = 0; i < iRowCount; i++)
        {
            objTR = this.objTBody.rows[i];
            if (!iColIndex)
                objTD = objTR.insertCell(objTR.cells.length);
            else
                objTD = objTR.insertCell(iColIndex - 1);

            objTextNode = document.createTextNode('Col' + i)
            objTD.appendChild(objTextNode);
        }
    };

    this.createDisplayRow = function(iRowPos,iNoOfCells,arrCellValues)
    {
        var iInsertIndex;
        if (iRowPos >= 0)
            iInsertIndex = iRowPos;

        var objTr=me.objTBody.insertRow(iRowPos);
        for(var i=0; i < iNoOfCells; i++)
        {
            var objTd=objTr.insertCell(i);
            if(arrCellValues && arrCellValues[i])
                objTd.appendChild(document.createTextNode(arrCellValues[i]));
            else
                objTd.appendChild(document.createTextNode("&nbsp;"));
        }
        me.updateRowSequence();
    };

    this.insertRow = function(iRowPos)
    {
        var iInsertIndex;
        if (iRowPos >= 0)
            iInsertIndex = iRowPos;
        else
            iInsertIndex = this.getCurrentRow() + 1;
        this.ensureCapacity(this.getRowCount(true) + 1, iInsertIndex);
        //this.updateRowSequence();
    };

    this.setRowHeight = function(iHeight)
    {
        for (var i = 0; i <= this.getRowCount(); i++)
            this.objTBody.rows[i].style.height = iHeight + "px";
    };

    this.getRow = function(iIndex)
    {
        return this.objTBody.rows[iIndex];
    };

    /**
     * Returns table row count
     *
     */
    this.getRowCount = function(isIgnoreExtraRow)
    {
        if(isIgnoreExtraRow && me.objTable.getAttribute("extrarow"))
        {
            return this.objTBody.rows.length-1;
        }
        return this.objTBody.rows.length;
    };

    /*this.getActualRowIndex=function(iRowIndex)
     {
     if(this.isTBodyExists)
     return iRowIndex;
     else
     return iRowIndex-1;
     };*/
    this.getColCount = function(iColCountRow)
    {

        /*if (me.objTable.tHead && me.objTable.tHead.length > 0)
         return me.objTable.tHead.rows[0].cells.length;
         else*/
        var iIndex=0;
        if(iColCountRow!=null)
            iIndex=iColCountRow;

        if (me.objTable.tBodies[0].rows.length > 0)
            return me.objTable.tBodies[0].rows[iIndex].cells.length;

        return 0;
    };


    this.hideColumn = function(iColIndex)
    {
        if (iColIndex >= 0)
        {
            var iRowCount = this.getRowCount();
            // alert(this.objTable.tHead.innerHTML)
            this.objTable.tHead.rows[0].cells[iColIndex].style.display = "none";
            for (var i = 0; i < iRowCount; i++)
                this.objTBody.rows[i].cells[iColIndex].style.display = "none";
        }
    };

    this.showColumn = function(iColIndex)
    {
        if (iColIndex >= 0)
        {
            var iRowCount = this.getRowCount();
            if (this.objTable.tHead)
                this.objTable.tHead.rows[0].cells[iColIndex].style.display = "table-cell";
            for (var i = 0; i < iRowCount; i++)
            {
                this.objTBody.rows[i].cells[iColIndex].style.display = "table-cell";
            }
        }
    };

    this.enableColumn=function(iColIndex)
    {
        if (iColIndex >= 0)
        {
            var iRowCount = this.getRowCount();
            for (var i = 0; i < iRowCount; i++)
            {
                if(this.getElementAt(i, iColIndex).getAttribute("disabled")!=null)
                    this.getElementAt(i, iColIndex).removeAttribute("disabled");
            }
        }
    };

    this.disableColumn=function(iColIndex)
    {
        if (iColIndex >= 0)
        {
            var iRowCount = this.getRowCount();
            for (var i = 0; i < iRowCount; i++)
                this.getElementAt(i, iColIndex).disabled=true;
        }
    };

    this.getTableHeader = function()
    {
        if (this.isTBodyExists) /*&& this.objTable.tHead.length > 0)*/
            return this.objTable.tHead.rows[0];
        return null;
    };

    this.getHeaderElementAt = function(iColIndex)
    {
        if (iColIndex >= 0)
        {
            var objTD;
            if (this.isTBodyExists) /*&& this.objTable.tHead.length > 0)*/
                objTD = this.objTable.tHead.rows[0].cells[iColIndex];

            if(objTD.childNodes.length > 1){
                if(objTD.childNodes[1].className=="thCompChkBox"
                    || objTD.childNodes[1].className=="lblColumnCustomChkbox")
                    return objTD.childNodes[1].getElementsByTagName("INPUT")[0];
            }

            for (var i = 0; i < objTD.childNodes.length; i++)
            {
                if (objTD.childNodes[i].nodeType == 1)
                {
                    if(objTD.childNodes[i].className=="thCompChkBox" || objTD.childNodes[i].className=="lblColumnCustomChkbox")
                        return objTD.childNodes[i].getElementsByTagName("INPUT")[0];
                    else
                        return objTD.childNodes[i];
                }
            }

            return objTD;
        }
    };

    this.getElementAt = function(iRowIndex, iColIndex,iColTypeRow)
    {
        // alert("getElementAt "+iRowIndex+"-"+iColIndex)
        // alert(isNaN(iRowIndex)+"-----"+isNaN(iColIndex)+"  "+(iRowIndex && iColIndex && !isNaN(iRowIndex) && !isNaN(iColIndex)));

        if (iRowIndex >= 0 && iColIndex >= 0)
        {
             if(iColTypeRow==null)
                iColTypeRow=0;

            var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];
            var iColType = this.objTBody.rows[iColTypeRow].cells[iColIndex].getAttribute("coltype");

             if(iColType==TYPE_DISPLAY)
            {
                for (var i = 0; i < objTD.childNodes.length; i++)
                {
                    if(objTD.childNodes[i].nodeType==1)
                        return objTD.childNodes[i];
                }
            }
             else if(iColType == TYPE_UPLOAD_FILE)
             {
                 var objElements=objTD.getElementsByTagName("INPUT");
                 if(objElements.length>0)
                     return objElements[objElements.length-1];
             }
            else
             {
                 var objElements=objTD.getElementsByTagName("INPUT");
                 if(objElements.length>0)
                     return objElements[0];
                 objElements=objTD.getElementsByTagName("A");
                 if(objElements.length>0)
                     return objElements[0];
                 objElements=objTD.getElementsByTagName("TEXTAREA");
                 if(objElements.length>0)
                     return objElements[0];
             }
        }
        return objTD;
    };

    /*this.getValueAt = function(iRowIndex,iColIndex,sNodeName,isGetHTMLContent)
     {
     if( iRowIndex>=0  && iColIndex>=0)
     {
     var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];
     for(var i=0;i < objTD.childNodes.length;i++)
     {
     if(sNodeName && objTD.childNodes[i].nodeName==sNodeName.toUpperCase())
     return objTD.childNodes[i].innerHTML;
     else if( objTD.childNodes[i].nodeType==1 )
     return objTD.childNodes[i].value;
     }
     if(isGetHTMLContent)
     return objTD.innerHTML;
     else
     return  objTD.innerText;
     }
     };*/

    this.getColType=function(iColIndex,iColTypeRow)
    {
        var iRowIndex=0;
        if(iColTypeRow!=null)
            iRowIndex=iColTypeRow;
        //alert(iColIndex+"--------"+me.objTBody.rows[iRowIndex].cells[iColIndex].getAttribute("coltype"))
        return parseInt(me.objTBody.rows[iRowIndex].cells[iColIndex].getAttribute("coltype"),10);
    };

    this.getValueAt = function(iRowIndex, iColIndex, isGetHTMLContent,iColTypeRow,iColType,isGetSelectedId,isGetAttachmentUrl, isGetMultiComboValues)
    {
        if (iRowIndex >= 0 && iColIndex >= 0)
        {
            if (isGetHTMLContent == null)
                isGetHTMLContent = true;

             if(iColTypeRow==null)
                iColTypeRow=0;
            if(iColType==null)
                iColType = me.getColType(iColIndex,iColTypeRow);

            var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];
            var i = 0;
            var sValue;

            while (i < objTD.childNodes.length)
            {
                if(iColType==TYPE_DISPLAY)
                {
                    if(objTD.childNodes[i].nodeType==1)
                    {
                        if (isGetHTMLContent)
                            return objTD.childNodes[i].innerHTML;
                        else
                            return objTD.childNodes[i].innerText;
                    }
                }
                else if(iColType == TYPE_UPLOAD_FILE)
                {
                    var sFileName=null;
                    var objElements=objTD.getElementsByTagName("INPUT");
                    if(objElements.length>0)
                        sFileName = objElements[0].value;

                    if(isGetAttachmentUrl)
                    {
                        if(!sFileName)
                            return "";
                        if(objElements.length>0)
                            var sUploadId = objElements[0].id;
                        var arrValues=sUploadId.split("_F");
                        arrValues = arrValues[1].split("[");
                        var iFieldId= arrValues[0];

                        var sUrl = "downloadFile.do?uploadFileName="+iFieldId+"["+iRowIndex+"]_"+sFileName+"&tempPath=1&moduleId=0&transId=0&fieldId="+iFieldId+"&bodyRowIndex="+iRowIndex;
                        var sFileData= "module:0|0|"+iFieldId+"|"+sFileName+"|"+iRowIndex;
                        var sColValue= sUrl+"|"+sFileData;
                        return sColValue;

                    }
                    else
                        return sFileName;

                }
                else if(iColType == TYPE_SIMPLECOMBO)
                {
                    var objElements=objTD.getElementsByTagName("SELECT")[0];
                    return objElements.options[objElements.selectedIndex].value;
                }
                else if (objTD.childNodes[i].nodeName== "INPUT")
                {
                    if (iColType >= 0)
                    {
                        switch (iColType)
                        {

                            case  TYPE_STRING:
                            case  TYPE_DATE:
                            //case  TYPE_SIMPLECOMBO:
                            case  TYPE_HIDDEN:
                            case  TYPE_BUTTON:
                            case  TYPE_DATE_PICKER:
//                            case  TYPE_TIME_PICKER:
                                return objTD.childNodes[i].value;
                            case  TYPE_NUMERIC:
                            case  TYPE_FLOAT:
                            case  TYPE_LONG:
                            {
                                sValue = util.parseNumberValue(objTD.childNodes[i].value);
                                return sValue;
                            }
                            case  TYPE_COMBOBOX2:
                            {
                                if(isGetSelectedId)
                                    return getComboInstance(objTD.childNodes[i].id).getSelectedId();
                                else
                                    return getComboInstance(objTD.childNodes[i].id).getSelectedItem();
                            }
                            case  TYPE_CHECKBOX:
                                return objTD.getElementsByTagName("INPUT").checked;
                            case  TYPE_RADIO:
                                return objTD.childNodes[i].checked;
                        }
                    }
                    //if(sNodeName && objTD.childNodes[i].nodeName==sNodeName.toUpperCase())
                    //  return objTD.childNodes[i].innerHTML;
                    return objTD.childNodes[i].value;
                }
                else if (objTD.childNodes[i].nodeName== "TEXTAREA")
                {
                    return objTD.childNodes[i].value;
                }
                else if(iColType == TYPE_TIME_PICKER)
                {
                    var elemTable = cross.getFirstElement((objTD.childNodes[i]).childNodes);
                    objTD = elemTable.tBodies[0].rows[0].cells[0];
                    return objTD.childNodes[0].value;
                    /*var elemTable = cross.getElementAt(objTD.childNodes,i),elemTd;
                    elemTd = elemTable.tBodies[0].rows[0].cells[0];
                    return cross.getFirstElement(elemTd.childNodes).value;*/
                }
                else if (iColType == TYPE_COMBOBOX2)//multi selection
                {
                    var objCombo=objTD.getElementsByTagName("INPUT")[0];
                    if(objCombo.getAttribute("isAllowMultiSelect")=='true')
                    {
                        if(isGetMultiComboValues) {
                            var arrMultiValue = [];
                            var arrSelectedIds = clMultiCombo.getSelectedIds(objCombo.id);
                            var arrSelectedValues = clMultiCombo.getSelectedItems(objCombo.id);

                            for(var k=0;k < arrSelectedIds.length;k++) {
                                arrMultiValue.push(arrSelectedValues[k]+"|"+arrSelectedIds[k]);
                            }

                            return arrMultiValue;
                        }
                        else {
                            //return clMultiCombo.getSelectedIds(objCombo.id);
                            return clMultiCombo.getSelectedItems(objCombo.id)[0];
                        }
                    }
                }else if(iColType == TYPE_CHECKBOX)
                {
                    return objTD.getElementsByTagName("INPUT")[0].checked;
                }
                i++;
            }
            if (isGetHTMLContent)
            {
                if(util.trim(objTD.innerHTML) == "&nbsp;")
                    return "";
                else
                    return util.trim(objTD.innerHTML);
            }
            else
                return cross.getInnerText(objTD);
        }
    };


    this.searchAndSetValueAt = function(iRowIndex, iColIndex, sValue,iColTypeRow)
    {

        this.setValueAt(iRowIndex, iColIndex, sValue,iColTypeRow,true);

    };

    this.setValueAt = function(iRowIndex, iColIndex, sValue,iColTypeRow,iSearch,isSetInnerHTML,iColType,isRefreshCascadeVals,sDocumentURL,sFileDisplayName, isCopyDocument)
    {
        //TYPE_DISPLAY=0;TYPE_STRING=1;TYPE_NUMERIC=2; TYPE_FLOAT=3; TYPE_DATE=4;TYPE_COMBOBOX =5;//TYPE_COMBOBOX
        //TYPE_CHECKBOX=6;TYPE_RADIO=7;TYPE_IMAGE=8;TYPE_HIDDEN=9;TYPE_SIMPLECOMBO=10;TYPE_SPINFIELD=11;
        //TYPE_BUTTON=12;TYPE_COMBOBOX2 =13;TYPE_ACTIONS =14;
         var isSetComboField;
        if (iRowIndex >= 0 && iColIndex >= 0) // && (sValue>=0 || sValue!="")
        {

            var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];

            if(isSetInnerHTML)
                objTD.innerHTML=sValue;
            else
            {
                if(iColTypeRow==null)
                    iColTypeRow=0;
                if(iColType==null)
                    iColType = me.getColType(iColIndex,iColTypeRow);

                var i = 0;
                var objElement;
                while (i < objTD.childNodes.length)
                {
                    objElement = objTD.childNodes[i];

                    if (objElement.nodeType == 1)
                    {
                        if (iColType >= 0)
                        {
                            switch (iColType)
                            {
                                case  TYPE_DISPLAY:
                                {
                                    objElement.innerHTML = sValue;
                                    return;
                                }
                                case  TYPE_STRING:
                                case  TYPE_NUMERIC:
                                case  TYPE_LONG:
                                case  TYPE_FLOAT:
                                case  TYPE_DATE:
                                case  TYPE_SIMPLECOMBO:
                                case  TYPE_HIDDEN:
                                case  TYPE_BUTTON:
                                case  TYPE_DATE_PICKER:
//                                case  TYPE_TIME_PICKER:
                                {

                                    if(isNaN(sValue) && (iColType==TYPE_NUMERIC || iColType==TYPE_FLOAT || iColType==TYPE_LONG))
                                        sValue="0";

                                    objElement.value = sValue;
                                    if(iColType==TYPE_FLOAT)
                                    {
                                        var iNoOfDec = parseInt(this.objTBody.rows[iColTypeRow].cells[iColIndex].getAttribute("noOfDec"));
                                        checkNoOfDecimals(objElement,iNoOfDec);
                                    }
                                    else if(iColType==TYPE_NUMERIC || iColType==TYPE_LONG)
                                    {
                                        var isFormatNumber = objElement.getAttribute("isFormatNumber") == 1;
                                        if(isFormatNumber)
                                            formatNumber(objElement);
                                    }

                                    return;
                                }
                                case  TYPE_COMBOBOX2:
                                {

                                    objElement = objTD.getElementsByTagName("INPUT")[0];
                                    if (objElement.getAttribute("isAllowMultiSelect") == 'true')
                                    {
                                        if (sValue) {
                                            clMultiCombo.setComboValuesArray(sValue, objElement.id, objElement.getAttribute("hiddenName"))
                                        }
                                    }
                                    else
                                    {
                                        var objComboInstance = getComboInstance(objElement.id);
                                        if (sValue && sValue!=0)
                                        {
                                            var iMasterType = objElement.getAttribute("mastertype");
                                            if (iMasterType > 0 && iMasterType != 56 && iMasterType != 58)
                                            {

                                                /*if(iSearch)
                                                    objComboInstance.searchAndAddItem(sValue, true, objElement.id, true, sValue, true, isRefreshCascadeVals);
                                                else
                                                {
                                                    if(isNaN(sValue) &&  sValue.indexOf("|")!=-1)
                                                        objComboInstance.checkAndAddItem(sValue, true);
                                                    else
                                                        objComboInstance.setSelectedMasterId(sValue);
                                                }*/

                                                if(isNaN(sValue) &&  sValue.indexOf("|")!=-1)
                                                {
                                                    if (iSearch)
                                                        objComboInstance.searchAndAddItem(sValue, true, objElement.id, true, 0, true, isRefreshCascadeVals);
                                                    else
                                                        objComboInstance.checkAndAddItem(sValue, true);
                                                }
                                                else
                                                {
                                                    if (iSearch)
                                                        objComboInstance.searchAndAddItem(null, true, objElement.id, true, sValue, true, isRefreshCascadeVals);
                                                    else
                                                        objComboInstance.setSelectedMasterId(sValue);
                                                }

                                                var index = objComboInstance.getSelectedId();
                                                if (index <= 0)
                                                    return false;
                                                else
                                                    return true;
                                            }
                                            else
                                            {
                                                if (objElement.getAttribute("mastertype") == 0)
                                                {
                                                    //util.writeToLog(iRowIndex+"--"+iColIndex+"--"+sValue)
                                                    if (sValue > 0)
                                                    {
                                                        isSetComboField = objComboInstance.setSelectedMasterId(sValue);
                                                        return isSetComboField;
                                                    }
                                                    else if (isNaN(sValue))
                                                    {
                                                        if (sValue.indexOf("|") == -1)
                                                        {
                                                            isSetComboField = objComboInstance.setSelectedKey(sValue);
                                                            return isSetComboField;
                                                        }

                                                        else
                                                            objComboInstance.checkAndAddItem(sValue, true);
                                                    }
                                                    else
                                                        objComboInstance.setSelectedIndex(-1);
                                                }
                                                else
                                                {
                                                    isSetComboField = objComboInstance.checkAndAddItem(sValue, true);
                                                    return isSetComboField;
                                                }

                                                /*if(sValue.indexOf("|")==-1)
                                                 {
                                                 objComboInstance.setSelectedMasterId(sValue);
                                                 if(objComboInstance.getSelectedId()<=0)
                                                 objComboInstance.checkAndAddItem(sValue, true);
                                                 }
                                                 else
                                                 objComboInstance.checkAndAddItem(sValue, true);*/
                                            }
                                        }
                                        else
                                            objComboInstance.setSelectedIndex(-1);
                                    }
                                    return true;
                                }
                                case  TYPE_CHECKBOX:
                                {
                                    if(!sValue || sValue==0)
                                        objElement.childNodes[0].checked = false;
                                    else
                                        objElement.childNodes[0].checked = true;
                                    return;
                                }
                                case  TYPE_RADIO:
                                {
                                    objElement.checked = sValue;
                                    return;
                                }
                                case  TYPE_TIME_PICKER:
                                {
                                      var elemTable = cross.getFirstElement(objElement.childNodes);
                                      objTD = elemTable.tBodies[0].rows[0].cells[0];
                                      objTD.childNodes[0].value = sValue;
                                     /*var elemTable  = objTD.childNodes[i],elemTd;
                                     elemTd = elemTable.tBodies[0].rows[0].cells[0];
                                    cross.getFirstElement(elemTd.childNodes).value = sValue;*/
                                    return true;
                                }
                                case TYPE_UPLOAD_FILE:
                                {
                                    var sFieldId=objElement.id.substring(3);
                                    clHTML5Upload.setAttachment(sFieldId,sDocumentURL,sValue,sFileDisplayName,isCopyDocument);
                                    return true;
                                }
                            }
                        }
                    }
                    i++;
                }
                // if no element nodes are present inside TD then setting the value to TD
                objTD.innerHTML = sValue;
            }
        }
        return true;
    };


    this.deleteCurrentRow = function()
    {
        this.deleteRow(this.getCurrentRow());
    };

    this.deleteRow = function(iRowPos, bIgnoreFirstRow,isClearFirstRow)
    {
        if (iRowPos >= 0)
        {
            var arrInput;

            // alert(me.objTable.getAttribute("displayTable"))
            if(me.objTable.getAttribute("displayTable"))
            {
                displayTable.stopEditing(me.sTableId);
            }
            else if (iRowPos == 0 && !bIgnoreFirstRow )
            {
                // alert("Cannot delete first row of the table");
                if(isClearFirstRow)
                {
                    var cbCombo=null;
                    arrInput = me.objTBody.rows[iRowPos].getElementsByTagName("INPUT");
                    for (var i = 0; i < arrInput.length; i++)
                    {
                        if(arrInput[i].getAttribute("cdatatype")== TYPE_TIME_PICKER)
                            arrInput[i].value="";
                        else if(arrInput[i].getAttribute("default"))
                            arrInput[i].value=arrInput[i].getAttribute("default");
                        else if(arrInput[i].type=="checkbox")
                            arrInput[i].checked = false;
                        else
                        {
                            arrInput[i].value="";
                            cbCombo = getComboInstance(arrInput[i].id);
                            if(cbCombo)
                                cbCombo.setSelectedIndex(-1);
                            if(arrInput[i].getAttribute("isallowmultiselect")=="true")
                            {
                                clMultiCombo.removeAllItems(arrInput[i].id);
                            }
                            if(arrInput[i].type == "file")
                               clHTML5Upload.clearLink(arrInput[i].id);
                        }
                    }

                    arrInput = me.objTBody.rows[iRowPos].getElementsByTagName("TEXTAREA");
                    for (var i = 0; i < arrInput.length; i++)
                    {
                        if (arrInput[i].getAttribute("default"))
                            arrInput[i].value = arrInput[i].getAttribute("default");
                        else
                            arrInput[i].value="";
                    }

                    arrInput = me.objTBody.rows[iRowPos].getElementsByTagName("a");
                    for (var i = 0; i < arrInput.length; i++)
                    {
                        if (arrInput[i].getAttribute("islinkcolumn") == "true") {
                            arrInput[i].innerText = ". . .";
                            arrInput[i].removeAttribute("oldvalue");
                            if(arrInput[i].getAttribute("ctrltype")== Constants.CONTROLTYPE_LINK_START+1)
                                arrInput[i].setAttribute("sourcemoduleid",0);
                        }
                    }
                }
                else
                {
                    if(sTable.getFirstRow(me,me.sTableId)==null)
                        sTable.setFirstRow(me,me.sTableId,me.objTBody.rows[iRowPos]);
                    me.objTBody.deleteRow(iRowPos);
                    me.updateRowSequence();
                }
                return;
            }

            // alert("deleting "+this.objTBody+","+this.objTable)
            if (typeof window["getComboInstance"] == "function")
            {
                if (me.objTable.getAttribute("extrarow") && iRowPos == me.getRowCount() - 1)
                    return;

                arrInput = me.objTBody.rows[iRowPos].getElementsByTagName("INPUT");
                var objComboHiddenFld;

                for (var i = 0; i < arrInput.length; i++)
                {
                    if (arrInput[i].getAttribute("hiddenName")) //searching for combo column in current row and removing combo related hidden fields.
                    {
                        //alert(arrInput[i].getAttribute("hiddenName") +","+document.getElementById(arrInput[i].getAttribute("hiddenName")))
                        objComboHiddenFld=getComboHiddenFld(arrInput[i]);
                        if (objComboHiddenFld) //document.getElementById(arrInput[i].getAttribute("hiddenName")))
                        {
                            var td = objComboHiddenFld.parentNode;
                            td .parentNode.removeChild(td);
                        }
                    }
                }
            }
            //alert(this.objTBody.rows[iRowPos].outerHTML)
            var iLastRowIndex=me.objTBody.parentNode.getAttribute("lastRowIndex");
            //alert(iLastRowIndex+"---------"+me.getRowCount())
            if(!iLastRowIndex)
                me.objTBody.parentNode.setAttribute("lastRowIndex",me.getRowCount());

            me.objTBody.deleteRow(iRowPos);

            me.updateRowSequence();
            // alert(iRowPos+","+this.getRowCount());
            if (iRowPos < me.getRowCount())
            {
                var objInputFld = me.objTBody.rows[iRowPos].getElementsByTagName("INPUT");
                var iLen = objInputFld.length;
                for(var l=0; l < iLen; l++)
                {
                    //if (objInputFld.length > 0 && objInputFld[0].type.toLowerCase() == "text")
                    if (objInputFld[l].type.toLowerCase() == "text")
                    {
                        objInputFld[l].focus();
                        break;
                    }
                }
                tablerow.setCurrent(me.objTBody.rows[iRowPos], me.sTableId);
            }
        }
    };


    this.deleteColumn = function(iColIndex)
    {
        if (iColIndex >= 0)
        {
            var iRowCount = this.getRowCount();
            for (var i = 0; i < iRowCount; i++)
                this.objTBody.rows[i].deleteCell(iColIndex);
        }
    };

    this.selectRow=function(iRowIndex,isSelect)
    {
        var objRow=this.objTBody.rows[iRowIndex];
        if(isSelect)
            util.addClass(objRow, "sSelectedRow");
        else if(util.hasClass(objRow,"sSelectedRow"))
            util.removeClass(objRow,"sSelectedRow");
    };

    this.selectRowColumn = function(iRowIndex, iColIndex)
    {
        if (iRowIndex >= 0 && iColIndex >= 0)
        {
            var objTD = this.objTBody.rows[iRowIndex].cells[iColIndex];
            var iIndex = 0;
            while (iIndex < objTD.childNodes.length)
            {
                if (objTD.childNodes[iIndex].nodeType == 1)
                {
                    //objTD.className='Border';
                    objTD.childNodes[iIndex].focus();
                    return;
                }
                iIndex++;
            }
        }
    };


    this.addRow = function(iInsertRowIndex, iCloneIndex,iNewRowIndex, isFromClone)//,objOldRow)
    {
        return this.ensureCapacity(this.getRowCount(true) + 1, iInsertRowIndex, iCloneIndex,iNewRowIndex, isFromClone);
    };

    this.ensureCapacity = function (iNoOfRows, iInsertRowIndex, iCloneIndex,iNewRowIndex, isFromClone)//,objOldRow)
    {
        var iRowCount = this.getRowCount();
        if (this.objTable.getAttribute("extrarow"))
            iRowCount--;
        var iNewRowId;
        if(iNewRowIndex!=null && iNewRowIndex>=0)
            iNewRowId = iNewRowIndex;
        else
            iNewRowId = this.objTBody.parentNode.getAttribute("lastRowIndex");
        if (!iNewRowId)
            iNewRowId = iRowCount;
        else
            iNewRowId = parseInt(iNewRowId);
        //alert(iNewRowId)

        var objNewRow;
        var isFirstRow=false;


        if(me.objTBody.rows.length==0)
        {
            if(sTable.getFirstRow(me,me.sTableId)!=null)
            {
                objNewRow=sTable.getFirstRow(me,me.sTableId);
                isFirstRow=true;
            }
            else
                return -1;
//            alert(objNewRow)
//            alert(objNewRow.innerHTML)
        }
        else
        {
            var objPrevRowRef ;
            if (iCloneIndex >= 0)
                objPrevRowRef = this.objTBody.rows[iCloneIndex];
            else
                objPrevRowRef = this.objTBody.rows[iRowCount - 1];
            objNewRow = objPrevRowRef.cloneNode(true);
        }

        var objHighlightNode=me.getHighlightNode(objNewRow,true);
        if(util.hasClass(objHighlightNode,"sSelectedRow"))
            util.removeClass(objHighlightNode,"sSelectedRow");
        if(util.hasClass(objHighlightNode,"sHighlightedRow"))
            util.removeClass(objHighlightNode,"sHighlightedRow");

        if(isFirstRow)
        {
            me.objTBody.appendChild(objNewRow);
            //this.updateRowSequence();
        }

            var iColLength = objNewRow.childNodes.length;
            var arrFldProperties = new Array();
            var objFldProperties;
            var isAppendRow = false;

            for (; iRowCount < iNoOfRows; iRowCount++,iNewRowId++)
            {
                isAppendRow = false;
                if (iInsertRowIndex >= 0)
                {
                    //alert("iInsertRowIndex="+iInsertRowIndex)
                    if (iInsertRowIndex < this.objTBody.rows.length)
                        this.objTBody.insertBefore(objNewRow, this.objTBody.rows[iInsertRowIndex]);
                    else
                        isAppendRow = true;
                }
                else
                {
                    if (this.objTable.getAttribute("extrarow"))
                        this.objTBody.insertBefore(objNewRow, this.objTBody.rows[this.objTBody.rows.length - 1]);
                    else
                        isAppendRow = true;
                }

                if (isAppendRow)
                    this.objTBody.appendChild(objNewRow, this.objTBody.rows[this.objTBody.rows.length - 1]);


                for (var i = 0; i < iColLength; i++)
                {
                    if(objNewRow.childNodes[i].nodeName=="TD")
                    {
                        objFldProperties = this.updateProperties(objNewRow.childNodes[i],iCloneIndex, iNewRowId, true, isFromClone);
                        if (objFldProperties)
                            arrFldProperties[arrFldProperties.length] = objFldProperties;
                    }
                }

                //this.updateSeqId(objNewRow, iInsertRowIndex>=0?iInsertRowIndex:iNewRowId);
                if(objPrevRowRef != null)
                {
                    this.copyEvents(objPrevRowRef,objNewRow);
                    if(iRowCount != iNoOfRows-1)
                        objNewRow = objPrevRowRef.cloneNode(true);
                }

                if (arrFldProperties)/*change:for combobo box need to stop calling InstallTableAc*/
                {
                    //                alert(arrFldProperties[arrFldProperties.length-1].id
                    //                        +","+arrFldProperties[arrFldProperties.length-1].hiddenName+","+arrFldProperties[arrFldProperties.length-1].instanceid)
                    for (var iRowCnt = 0,iColType; iRowCnt < arrFldProperties.length; iRowCnt++)
                    {
                        iColType = arrFldProperties[iRowCnt][0];
                        objFldProperties = arrFldProperties[iRowCnt][1];
                        if(iColType==TYPE_COMBOBOX2)
                        {
                            InstallTableAc(objFldProperties.id, objFldProperties.instanceid, objFldProperties.hiddenName,null,0,objFldProperties.parentSeqId,objFldProperties.defaultValue);
                            if(!objFldProperties.defaultValue) {
                                var objCombo=document.getElementById(objFldProperties.instanceid);

                                if(objCombo!=null && objCombo.getAttribute("isAllowMultiSelect")=='true') {
                                    var sId = objFldProperties.id.split("[")[1];
                                    sId = "["+sId.split("]")[0]+"]";
                                    var sCurrentFldId = objFldProperties.instanceid.replace(/\[(.+?)\]/g, sId);
                                    objFldProperties.id= "div_"+sCurrentFldId;
                                    clMultiCombo.removeAllItems(sCurrentFldId);
                                }
                                else {
                                    getComboInstance(objFldProperties.id).clearSelection();
                                }
                            }
                        }
                        else if(iColType==TYPE_DATE_PICKER){
                            if(objFldProperties.datatype == Constants.DATATYPE_DATETIME)
                            {
                                var sTargetId;
                                if(clAppBuffer.getFarsiCalendar()=="true")
                                {
                                    sTargetId = objFldProperties.id;
                                    sTargetId = sTargetId.replace( /(:|\.|\[|\]|,|=|@)/g, "\\$1" );
                                    $('#'+sTargetId).MdPersianDateTimePicker({    targetTextSelector: '#'+sTargetId,
                                        targetDateSelector: '#'+sTargetId+'TargetDate'});;
                                }
                                else {
                                    Calendar.setup({
                                        inputField: objFldProperties.id,
                                        isTableColumn: true,
                                        align: 'Tr',
                                        ifFormat: objFldProperties.format,
                                        showsTime: true
                                    });
                                }
                            }
                            else {
                                if(clAppBuffer.getFarsiCalendar()=="true")
                                {
                                    sTargetId = objFldProperties.id;
                                    sTargetId = sTargetId.replace( /(:|\.|\[|\]|,|=|@)/g, "\\$1" );
                                    $('#'+sTargetId).MdPersianDateTimePicker({    targetTextSelector: '#'+sTargetId,
                                        targetDateSelector: '#'+sTargetId+'TargetDate'});;
                                }
                                else {
                                    Calendar.setup({
                                        inputField: objFldProperties.id,
                                        isTableColumn: true,
                                        align: 'Tr',
                                        ifFormat: objFldProperties.format
                                    });
                                }
                            }

                        } else if(iColType == TYPE_UPLOAD_FILE){
                            //clHTML5Upload.getPropertiesArray(me.objTBody.rows[iCloneIndex])
                            /*clHTML5Upload.init(objFldProperties.id,objFldProperties.uploadUrl,objFldProperties.destination,objFldProperties.maxSize,
                                objFldProperties.fileTypes,objFldProperties.fileTypesDesc,objFldProperties.width,
                                objFldProperties.height,objFldProperties.uploadDoneFunc,null,"Attach another file",
                                null,objFldProperties.isBorder,null,null,objFldProperties.hiddenFileName,null,null,null,null,null,objFldProperties.isAllowMultiUploads);
                            clHTML5Upload.init(objFldProperties.id,"uploadfile.action","temp",1073741823,
                                "*.fcb",objFldProperties.fileTypesDesc,170,
                                18,"clRestoreBackup.uploadDone","Attach another file",
                                null,false,null,null,"application",null,null,null,null,null,false);*/
                            clHTML5Upload.cloneUpload(objFldProperties.parentId,objFldProperties.id);
                            clHTML5Upload.clearLink(objFldProperties.id,true);
                        }
                    }
                    //if (iInsertRowIndex && iInsertRowIndex > 0 && objFldProperties && objFldProperties.id) {

                        //document.getElementById(objFldProperties.id).focus();

                        for(var m=2;m<objNewRow.children.length;m++)
                        {
                            if(objNewRow.childNodes[m].style!=null && objNewRow.childNodes[m].style.display=="")
                            {
                                var objFld = objNewRow.childNodes[m].childNodes[0];
                                if(objFld.id!=null && objFld.id!="")
                                    document.getElementById(objFld.id).focus();
                                break;
                            }
                        }
                    //}

                    objFldProperties = null;
                }
                arrFldProperties = [];
                //alert(objNewRow.outerHTML)
            }


            this.objTBody.parentNode.setAttribute("lastRowIndex", iNewRowId);

            this.updateRowSequence();

         return iNewRowId;
    };


    ///////////////////////////////////////////////////////////////////////////////////////
    this.updateProperties = function(objTD, iOldRowIndex,iNewRowId, isSetDefaultValues, isFromClone)//,iSequence)
    {
        var iOldIndex = 0;
        var sId = null;
        var objChildNodes;
        var iColType=this.getColType(objTD.cellIndex,0);

        if(iColType==TYPE_DATE_PICKER || iColType==TYPE_DISPLAY ||iColType==TYPE_BUTTON || iColType==TYPE_TIME_PICKER ||iColType == TYPE_UPLOAD_FILE || iColType == TYPE_CHECKBOX)
          objChildNodes = objTD.getElementsByTagName("INPUT");

        if(objChildNodes==null || objChildNodes.length==0)
          objChildNodes = objTD.childNodes;

        var arrReturn = null;
        var isUpdatedDefaultValue = false;
        var iArr = new Array();
        var sNewInnerHTML = "";
        var sInstanceId;
        var isSetNewInnerHTML=true;


        if(iColType==TYPE_COMBOBOX2){

            objChildNodes = objTD.getElementsByTagName("INPUT");
            objChildNodes[objChildNodes.length] = objTD.getElementsByTagName("DIV");
            if(objChildNodes[0].getAttribute("isallowmultiselect")=='true')
                objChildNodes[objChildNodes.length] = objTD.getElementsByTagName("SPAN");
        }

        for (var i = 0; i < objChildNodes.length; i++)
        {
            //alert(objChildNodes[i].outerHTML)
            //window.status="objChildNodes.length: "+iNewRowId+","+objChildNodes.length
            if (objChildNodes[i].nodeType == 1)
            {
                sId = objChildNodes[i].id;
                if (sId && sId.indexOf("[") != -1 && sId.indexOf("]") != -1)
                {
                    if(objChildNodes[i].getAttribute("combohidden")) //need to delete the combobox hidden field since it will be created when InstallTableAC is called.
                    {
                        objChildNodes[i].parentNode.removeChild(objChildNodes[i]);
                        i--;
                        continue;
                    }
                    iOldIndex = parseInt(sId.substring(sId.lastIndexOf("[") + 1, sId.lastIndexOf("]")));

                    if(objChildNodes[i].getAttribute("mastertype"))
                        sInstanceId=objChildNodes[i].getAttribute("instanceid");

                    if(objChildNodes[i].getAttribute("islinkcolumn"))
                    {
                        objChildNodes[i].removeAttribute("oldvalue");
                        objChildNodes[i].innerHTML = ". . .";
                        if(objChildNodes[i].getAttribute("ctrltype")== Constants.CONTROLTYPE_LINK_START+1)
                            objChildNodes[i].setAttribute("sourcemoduleid",0);
                    }

                    if(isSetNewInnerHTML)
                    {
                        sNewInnerHTML = objTD.innerHTML;

//                        sNewInnerHTML=sNewInnerHTML.replace(new RegExp("\\["+iOldIndex+"\\]","g"),"["+iNewRowId+"]");

                        var sPrefix1=sId.substring(0,sId.lastIndexOf("["));
                        var sPrefix2=sPrefix1.replace(new RegExp("\\[","g"),"\\[");

                        //alert(sIdPrefix+"\\["+iOldIndex+"\\]"+"======"+sIdPrefix+"["+iNewRowId+"]")

                        sNewInnerHTML=sNewInnerHTML.replace(new RegExp(sPrefix2+"\\["+iOldIndex+"\\]","g"),sPrefix1+"["+iNewRowId+"]");

                        if(objChildNodes[i].name)
                        {
                            sPrefix1=objChildNodes[i].name.substring(0,objChildNodes[i].name.lastIndexOf("["));
                            sPrefix2=sPrefix1.replace(new RegExp("\\[","g"),"\\[");
                            //alert(objChildNodes[i].name+"----------"+sPrefix2+"\\["+iOldIndex+"\\]"+"--------"+sPrefix1+"["+iNewRowId+"]")
                            sNewInnerHTML=sNewInnerHTML.replace(new RegExp(sPrefix2+"\\["+iOldIndex+"\\]","g"),sPrefix1+"["+iNewRowId+"]");
                            //alert(sNewInnerHTML)
                        }
                        /*sNewInnerHTML = this.getNewInnerHTML(objTD.innerHTML, objChildNodes[i].id, this.getNewId(objChildNodes[i].id, iNewRowId));
                        sNewInnerHTML = this.getNewInnerHTML(sNewInnerHTML, objChildNodes[i].name, this.getNewId(objChildNodes[i].name, iNewRowId));*/

                        if (objChildNodes[i].getAttribute("mastertype"))
                        {
                            //sNewInnerHTML = this.getNewInnerHTML(sNewInnerHTML, objChildNodes[i].getAttribute("hiddenName"), this.getNewId(objChildNodes[i].getAttribute("hiddenName"), iNewRowId));
                            iArr[iArr.length] = i;
                        }

                         //alert("sNewInnerHTML  "+sNewInnerHTML)
                        objTD.innerHTML = sNewInnerHTML;

                        if(iColType==TYPE_COMBOBOX2 && objChildNodes[i].getAttribute("isallowmultiselect")=='true'){

                            var spObj = objTD.getElementsByClassName("mcValue");
                            for(var k = 0; k < spObj.length; k++){
                                spObj[k].parentNode.removeChild(spObj[k]);
                                k--;
                            }
                        }

                        isSetNewInnerHTML=false;
                    }

                    var bValid = false;
                    if(cross.isIE())
                        bValid = !(objChildNodes[i].id.lastIndexOf("]")==(objChildNodes[i].id).length-1);
                    else
                        bValid = !objChildNodes[i].id.endsWith("]");//not working for ie10

                    if(bValid) {
                        var objMulticombo = null;
                        if(isFromClone && sInstanceId != null) {
                            var sId = objChildNodes[i].id.split("[")[1];
                            sId = "["+sId.split("]")[0]+"]";
                            var sCurrentFldId = sInstanceId.replace(/\[(.+?)\]/g, sId);
                            var objMulticombo = document.getElementById(sCurrentFldId);
                            var objMultiComboTD = objTD.innerHTML;
                            var iFieldId=objChildNodes[i].id.split("[")[0];
                            var iRowIndex=objChildNodes[i].id.split("[")[1];
                            iRowIndex = iRowIndex.split("]")[0];
                            var sValue='instanceid=\"'+iFieldId+'['+iRowIndex+']\"';
                            var ReplacedValue='instanceId=\"'+iFieldId+'[0]\"';
                            objTD.innerHTML = objMultiComboTD.replace(sValue,ReplacedValue);
                        }
                        else if(sInstanceId != null) {
                            var sId = objChildNodes[i].id.split("[")[1];
                            sId = "["+sId.split("]")[0]+"]";
                            var sCurrentFldId = sInstanceId.replace(/\[(.+?)\]/g, sId);

                            if(objChildNodes[i].id == sCurrentFldId)
                                var objMulticombo = document.getElementById(sCurrentFldId);
                        }
                    }

                    if (objChildNodes[i].getAttribute("mastertype") || (objMulticombo!=null && objMulticombo.getAttribute("mastertype")))
                    {
                        //                            alert(objChildNodes[i].parentNode.innerHTML)
                        if(!arrReturn)
                            arrReturn=[];
                        arrReturn[0] = TYPE_COMBOBOX2;
                        arrReturn[1] = {"id":objChildNodes[i].id,"instanceid":sInstanceId,
                                        "hiddenName":objChildNodes[i].getAttribute("hiddenName"),"parentSeqId":objChildNodes[i].getAttribute("parentseqid")
                                        ,"defaultValue":objChildNodes[i].getAttribute("default")};
                        objMulticombo = null;
                    }
                    else if(util.hasClass(objChildNodes[i],"calField")) //date picker column
                    {
                        if(!arrReturn)
                            arrReturn=[];
                        arrReturn[0] = TYPE_DATE_PICKER;
                        arrReturn[1] = {"id":objChildNodes[i].id,"format":objChildNodes[i].getAttribute("format"),"datatype":objChildNodes[i].getAttribute("datatype")};
                        //Calendar.setup({inputField    : objChildNodes[i].id,isTableColumn:true,align         : 'Tr',ifFormat         : objChildNodes[i].getAttribute("format")});
                    }
                    else if(util.hasClass(objChildNodes[i],"bootstrap-timepicker")) //time picker column
                    {
                       isUpdatedDefaultValue = true;
                    } else if(util.hasClass(objChildNodes[i],"UploadFile")){

                        if(!arrReturn)
                            arrReturn=[];
                        arrReturn[0] = TYPE_UPLOAD_FILE;
                        arrReturn[1] = {"id":sId.substring(0,sId.lastIndexOf("["))+"["+iNewRowId+"]"+sId.substring(sId.lastIndexOf("]")+1,
                            sId.length),"parentId":sId.substring(0,sId.lastIndexOf("["))+"[0]"+sId.substring(sId.lastIndexOf("]")+1,sId.length)
                            /*"fileTypes":objChildNodes[i].getAttribute("fileTypes"),
                            "isAllowMultiUploads":objChildNodes[i].getAttribute("isAllowMultiUploads"),
                            "uploadUrl":objChildNodes[i].getAttribute("uploadUrl"),
                            "destination":objChildNodes[i].getAttribute("destination"),
                            "maxSize": objChildNodes[i].getAttribute("maxSize"),
                            "fileTypesDesc":objChildNodes[i].getAttribute("fileTypesDesc"),
                            "width":objChildNodes[i].getAttribute("width"),"height":objChildNodes[i].getAttribute("height"),
                            "uploadDoneFunc":objChildNodes[i].getAttribute("uploadDoneFunc"),
                            "isBorder":objChildNodes[i].getAttribute("isBorder"),
                            "hiddenFileName":objChildNodes[i].getAttribute("hiddenFileName")*/
                        };
                    }
                    else if(objChildNodes[i].getAttribute("cdatatype")== TYPE_LONG) {
                        objChildNodes[i].value = "";
                    }

                    //break; //added for breaking the nodes loop since ids and names are replaced with new values
                }

                //replacing old values with default values
                if (isSetDefaultValues)
                {
                    if(objChildNodes[i].getAttribute("actValue")) //clearing value set from rule
                        objChildNodes[i].removeAttribute("actValue");

                    if(objChildNodes[i].getAttribute("mastertype"))
                    {
                        isUpdatedDefaultValue = true;
                    }
                    else
                    {
                        if (objChildNodes[i].nodeName == "INPUT")
                        {
                            if(objChildNodes[i].getAttribute("editval")) //clearing this value for display table hidden field,this attribute it will set
                                objChildNodes[i].removeAttribute("editval");
                            else if(objChildNodes[i].getAttribute("actValue")) //clearing value set from rule
                                objChildNodes[i].removeAttribute("actValue");

                            if(objChildNodes[i].type == "checkbox")
                            {
                                objChildNodes[i].checked = false;
                                //alert(objChildNodes[i].outerHTML)
                            }
                            else if (objChildNodes[i].getAttribute("default"))
                            {
                                objChildNodes[i].value = objChildNodes[i].getAttribute("default");
                            }
                            else if(util.hasClass(objChildNodes[i],"color"))
                            {
                                var objColor = new jscolor.color(objChildNodes[i]);
                            }
                            else
                                objChildNodes[i].value = "";

                            isUpdatedDefaultValue = true;
                        }
                        else if (objChildNodes[i].nodeName == "SELECT" || objChildNodes[i].nodeName == "IMG"  || objChildNodes[i].nodeName == "A"
                                || objChildNodes[i].nodeName == "I")
                        {
                            isUpdatedDefaultValue = true;
                        }
                        else if (objChildNodes[i].nodeName == "TEXTAREA")
                        {
                            if (objChildNodes[i].getAttribute("default"))
                                objChildNodes[i].value = objChildNodes[i].getAttribute("default");
                            else
                                objChildNodes[i].value = "";
                            isUpdatedDefaultValue = true;
                        }
                    }
                }
            }
        }
        //        objTD.innerHTML = sNewInnerHTML;

        var objComboHiddenFld;

        for (var i = 0; i < iArr.length; i++)
        {
            objComboHiddenFld=getComboHiddenFld(objChildNodes[iArr[i]]);
            //alert("objComboHiddenFld--"+objComboHiddenFld+",isSetDefaultValues"+isSetDefaultValues)
            if (isSetDefaultValues && objComboHiddenFld) //document.getElementById(objChildNodes[i].getAttribute("hiddenName")))
            {
                objComboHiddenFld.value = "";
            }
        }

        if (isSetDefaultValues && !isUpdatedDefaultValue)
            objTD.innerHTML = "&nbsp;";
        //alert("objTD  "+objTD.innerHTML)
        return arrReturn;
    };

    this.getNewId = function(sId, iNewIndex)
    {
        if (sId)
        {
            var iIndex = sId.lastIndexOf("].") != -1 ? sId.lastIndexOf("].") : sId.lastIndexOf("]");
            if (sId.indexOf("[") != -1 && iIndex != -1)
                sId = sId.substring(0, sId.lastIndexOf("[") + 1) + iNewIndex + sId.substring(iIndex);
            //            else
            //                sId = sId + iNewIndex;
            //alert("after replace------"+sId);
        }
        return sId;
    };

    this.getNewInnerHTML = function(sInnerHTML, sName, sNewName)
    {
        if (sName == sNewName)
            return sInnerHTML;

        while (sInnerHTML.indexOf(sName) >= 0)
            sInnerHTML = sInnerHTML.replace(sName, sNewName);
        return sInnerHTML;
    };


    this.getRowFromSequence = function(iSeq)
    {
        var sSeqId=me.objTable.getAttribute('seq');
        if(!sSeqId)
            return;

        if (iSeq >= this.getRowCount())
        {
            alert("Invalid sequence: " + iSeq + ", rowcount: " + this.getRowCount());
            return;
        }

        var clElement = document.getElementById(this.getTableId() +sSeqId+ "[" + iSeq + "]");
        if (clElement)
            return clElement.value;
        else
            return iSeq;
    };


    this.getSequenceFromRow = function(iRowIndex)
    {
        var sSeqId=me.objTable.getAttribute('seq');
        if(!sSeqId)
            return;

        var iRowCount = this.getRowCount();
        var clElement = null;
        for (var iRow = 0; iRow < iRowCount; iRow++)
        {
            //alert(iRow+":"+document.getElementById(this.getTableId()+"Seq["+iRow+"]").value)
            clElement = document.getElementById(this.getTableId() +sSeqId+ "[" + iRow + "]");

            //    alert(iRowIndex+"===="+clElement.value)

            if (clElement && iRowIndex == parseInt(clElement.value))
                return iRow;
        }
        return -1;
    };

    this.copyEvents=function(objOldRow,objNewRow)
    {
        var objCell,objNode;
        for(var i=0; i < objOldRow.cells.length; i++)
        {
            objCell=objOldRow.cells[i];
            for(var j=0; j < objCell.childNodes.length; j++)
            {
                objNode=objCell.childNodes[j];

                if(objNode.nodeType==1)
                {
                    if(objNode.onblur)
                    {
                        objNewRow.cells[i].childNodes[j].onblur=objNode.onblur;
                        //alert("objNode.onblur "+objNewRow.cells[i].childNodes[j].onblur)
                    }

                    if(objNode.onfocus)
                    {
                        objNewRow.cells[i].childNodes[j].onfocus=objNode.onfocus;
                        //alert("objNode.onfocus "+objNewRow.cells[i].childNodes[j].onfocus)
                    }
                }

                if(util.hasClass(objNode,"bootstrap-timepicker") || util.hasClass(objNode,"lblColumnCustomChkbox")) //time picker or chkbox
                {
                    var objInput=objCell.getElementsByTagName("INPUT")[0];
                    var objNewRowInput=objNewRow.cells[i].getElementsByTagName("INPUT")[0];

                    if(objInput.onblur)
                        objNewRowInput.onblur=objInput.onblur;
                    if(objInput.onfocus)
                        objNewRowInput.onfocus=objInput.onfocus;
                    if(objInput.onclick)
                        objNewRowInput.onclick=objInput.onclick;

                }
            }
        }
    };


    this.updateRowSequence = function()
    {
        if (me.objTable.getAttribute('autoSnos') || me.objTable.getAttribute('seq'))
        {
            var iSNoColIndex=-1;
            var iSeqColIndex=-1;
            var objRow = me.objTBody.rows[0];
            if(!objRow)
                return;

            if(me.objTable.getAttribute('autoSnos'))
                iSNoColIndex=0;

            var sSeqColumn=me.objTable.getAttribute('seq');
            var objChildNodes;

            if(sSeqColumn)
            {
                objChildNodes = objRow.getElementsByTagName("INPUT");

                for (var i = 0; i < objChildNodes.length; i++)
                {
                    if (objChildNodes[i].nodeType == 1)
                    {
                        var sName = objChildNodes[i].name;
                        if (sName && sName.indexOf(sSeqColumn)!=-1)
                        {
                            iSeqColIndex=i;
                            break;
                        }
                    }
                }
            }

            var iRowCount = me.getRowCount(true);
            var iRow;

            if(me.getCurrentRow()-1 >=0)
                iRow=me.getCurrentRow()-1;
            else
                iRow=0;

            for ( ;iRow < iRowCount; iRow++)
            {
                objRow = me.objTBody.rows[iRow];
                if(iSNoColIndex!=-1)
                    objRow.cells[iSNoColIndex].innerHTML = (iRow + 1);

                if(iSeqColIndex!=-1)
                {
                    objChildNodes = objRow.getElementsByTagName("INPUT");
                    objChildNodes[iSeqColIndex].value = iRow;
                }
            }

            /*for ( ;iRow < iRowCount; iRow++)
            {
                objRow = me.objTBody.rows[iRow];
                if(me.objTable.getAttribute('autoSnos'))
                    objRow.cells[0].innerHTML = (iRow + 1);
                if(me.objTable.getAttribute('seq'))
                {
                    me.updateSeqId(objRow,iRow);
                }
            }*/

        }
    };


    if (sTableId)
        me.setTableId(sTableId);
}

var objTableIds = new Array();



sTable.getInstance = function(sTableId)
{
    // if (!objTableIds[sTableId])
    // objTableIds[sTableId] = new sTable(sTableId);
    //objTableIds[sTableId];

    if (objTableIds[sTableId])
        delete objTableIds[sTableId];

    objTableIds[sTableId] = {"instance":new sTable(sTableId)};

    return objTableIds[sTableId].instance;
};

sTable.setFirstRow = function(clTable,sTableId,objRow)
{
    if(!objTableIds[sTableId])
        objTableIds[sTableId]=clTable;
    objTableIds[sTableId].firstRow=objRow;
};

sTable.getFirstRow = function(clTable,sTableId)
{
    if(!objTableIds[sTableId])
        objTableIds[sTableId]=clTable;
    return objTableIds[sTableId].firstRow;
};

sTable.deleteInstance = function(sTableId)
{
    if (objTableIds[sTableId])
    {    delete objTableIds[sTableId]
        objTableIds[sTableId] = null;
    }
};

function removeAllTableInstances()
{
    var key;
    var value;
    for(key in objTableIds)
    {  //  alert(key)
        value=objTableIds[key];
        // if(value.isAppScope)// in case of not app scope
        delete objTableIds[key];
    }

    /*for(key in objComboInstances)
     {
     alert(key)
     }*/


}



//////////////////////////////////////////////////////////////////////////////

var tablerow = new function()
{
    this.setCurrent = function (objRow, sTableId, evt,isSelect,isIgnoreCancelBubble)
    {
        //alert("setting currentrow "+(objRow.rowIndex-1)+""+objRow)
        var clTable = sTable.getInstance(sTableId);
        var iCurrentRow=objRow.rowIndex-1;

        if (clTable && clTable.getCurrentRow() != iCurrentRow)
        {
            if (clTable.getCurrentRow() != -1)
                clTable.setLastRow(clTable.getCurrentRow());

            var tbl=document.getElementById(sTableId);
            if(tbl.getAttribute("hasSubHeader"))
                iCurrentRow--;

            clTable.setCurrentRow(iCurrentRow);

            if(isSelect)
            {
                clTable.selectRow(iCurrentRow,isSelect);
            }
        }

        var sRowHandler = clTable.getRowHandler();
        if (sRowHandler && typeof sRowHandler == "function")
        {
            //window.status="current row:"+clTable.getCurrentRow()+",last row:"+clTable.getLastRow();
            evt = evt ? evt : window.event;
            var objTD = evt.srcElement;
            var iCellIndex = -1;
            while (objTD && objTD.nodeName != "TD")
                objTD = objTD.parentNode;
            if (objTD)
                iCellIndex = objTD.cellIndex;
            //  alert(iCellIndex);
            sRowHandler(clTable.getCurrentRow(), clTable.getLastRow(), iCellIndex);
        }

        evt = evt ? evt : window.event;
        if (evt && !isIgnoreCancelBubble) //added for selectbox issue which is getting closed
            cross.cancelBubble(evt,true,true);

        return true;
    };

    this.highlight = function (objRow, sTableId, evt)
    {
        var objTable = sTable.getInstance(sTableId);
        objTable.getCurrentRow();
        if (objTable && objRow.rowIndex > 0) /*&& objTable.getCurrentRow() != objRow.rowIndex - 1*/
        {
            //            if(objTable.getAttribute("prevHtRow"))
            //                util.removeClass(objRow,"sHighlightRow");
            //            objTable.setAttribute("prevHtRow",objRow);
            util.addClass(objTable.getHighlightNode(objRow),"sHighlightRow");
        }
    };

    this.clearHighlight = function (objRow, sTableId, evt)
    {
        var objTable = sTable.getInstance(sTableId);
        util.removeClass(objTable.getHighlightNode(objRow),"sHighlightRow");
    };

    this.moveNext = function (objRow, sTableId, evt)
    {

    };

    this.selectCurrentRow= function (objRow, sTableId, evt)
    {
        var objPrevClass;
        var elemTable = objRow.parentNode;
        var objTable = sTable.getInstance(sTableId);

        for(var i=0;i < elemTable.childNodes.length;i++)
        {
            if(objTable.getHighlightNode(elemTable.childNodes[i]).className=="sSelectedRow")
            {
                objTable.getHighlightNode(elemTable.childNodes[i]).className = objPrevClass;
                break;
            }
        }

        objPrevClass = objTable.getHighlightNode(objRow).getAttribute("RowClassName");
        objTable.getHighlightNode(objRow).className = "sSelectedRow";
    };

    /**
     * this function is used to move rows up or down
     * bMoveUp - true:moveUp , false:moveUp
     * sTableId - tableId
     */
    this.onClkSwapRows = function(bMoveUp,sTableId)
    {
        var clTable,iCurRow;
        clTable = sTable.getInstance(sTableId);
        iCurRow = clTable.getCurrentRow();
        if(iCurRow >= 0)
        {
            var tbdTable,trTable,iInterChanged = -1,objTable;
            objTable = document.getElementById(sTableId);
            tbdTable = objTable.tBodies[0];
            trTable = clTable.getRow(iCurRow);
            if(bMoveUp && iCurRow > 0)
            {
                tbdTable.insertBefore(trTable, clTable.getRow(iCurRow-1));
                tablerow.setCurrent(trTable,sTableId);
                iInterChanged = iCurRow-1;
            }
            else if(!bMoveUp && iCurRow < clTable.getRowCount()-1)
            {
                tbdTable.insertBefore(clTable.getRow(iCurRow+1),trTable);
                tablerow.setCurrent(trTable,sTableId);
                iInterChanged = iCurRow+1;

            }

            if(objTable.getAttribute("autoSnos"))
            {
                if(iInterChanged >= 0)
                {
                    var iValue = clTable.getValueAt(iCurRow,0);
                    clTable.setValueAt(iCurRow,0,clTable.getValueAt(iInterChanged,0));
                    clTable.setValueAt(iInterChanged,0,iValue);
                }
            }

            /* if(iCurRow>=0 && iInterChanged>=0)
             {
             clTable.updateSeqId(trTable,iInterChanged);
             clTable.updateSeqId(clTable.getRow(iCurRow),iCurRow);
             }*/
        }
    };

    /////////////////////////////// Add or Remove table row ////////////////////////////
    this.add = function(sTableId, iRowIndex)
    {
        var objTable = sTable.getInstance(sTableId);
        if (objTable && iRowIndex >=0)
        {
            objTable.addRow(iRowIndex+1);
        }
    };
    this.remove = function(sTableId, iRowIndex,bIgnoreFirstRow)
    {
        var objTable = sTable.getInstance(sTableId);
        if (objTable && iRowIndex >=0)
        {
            objTable.deleteRow(iRowIndex,bIgnoreFirstRow);
        }
    };

    this.getCellIndexByFieldId=function(sFieldId)
    {
        var objField=document.getElementById(sFieldId);
        if(objField)
        {
            var objTd=objField;//.parentNode;
            while(objTd.getAttribute("coltype")==null)
                objTd=objTd.parentNode;

            if(cross.isIE())
            {
              var objTr = objTd.parentNode;
              for (var i = 0; i != objTr.cells.length; i++) {
                if (objTr.cells[i] == objTd)
                    return i;
              }
            }
            else
                return objTd.cellIndex;
        }
        return -1;

    };

};


var checkboxcol=new function()   //TODO:changes for select all
{
    this.iChkboxSelectCnt=0;
    this.gHeaderChkBox=false;
    this.isSelectAll=false;

    this.clearState=function()
    {
        this.iChkboxSelectCnt=0;
        this.gHeaderChkBox=false;
        this.isSelectAll=false;
    };

    this.isSelectedAll=function()
    {
        return this.isSelectAll;
    };

    app.registerInstance("checkboxcol",this,Constants.SCOPE_APP);

    this.selectAll=function(objHeaderChkBox,isSelect,sTableId,objHandlerFn,sParams,evt)
    {
        //alert("selectAll  "+evt)
        var objTable=null;
        if(!objHeaderChkBox)
        {
            objTable=sTable.getInstance(sTableId);
            var objHeader=objTable.getTableHeader();
            objHeaderChkBox=objHeader.cells[0].getElementsByTagName("INPUT")[0];
//            objHeaderChkBox=objHeaderChkBox.getElementsByTagName("INPUT")[0];
            if(!objHeaderChkBox)
               objHeaderChkBox = document.getElementById("chkSpanViewHeader");
            objHeaderChkBox.checked = isSelect;
        }
        else
        {
            isSelect=objHeaderChkBox.checked;
        }
//        alert("asasa    "+this.gHeaderChkBox.checked)
        var objTableInfo=this.getTableInfo(objHeaderChkBox);
        this.gHeaderChkBox = objHeaderChkBox;

        if(objTableInfo)
        {
            if(sTableId)
                objTable = document.getElementById(sTableId);
            else
                objTable=objTableInfo[1];
            var objChkBox;
            var iCellIndex=objTableInfo[0].cellIndex;
            var objChildNodes;
            var iSelectCount=0;

            for(var iRowIndex=1; iRowIndex < objTable.rows.length; iRowIndex++)
            {
                objChildNodes=objTable.rows[iRowIndex].cells[iCellIndex].children[0].childNodes;
                var iChildNodeIndex=0;
                for(;iChildNodeIndex < objChildNodes.length; iChildNodeIndex++)
                {
                    objChkBox=objChildNodes[iChildNodeIndex];
                    if(objChkBox.nodeName=="INPUT" && objChkBox.type=="checkbox")
                        break;
                }
                if(iChildNodeIndex < objChildNodes.length)
                    break;
            }

            if(iChildNodeIndex==objChildNodes.length)
            {
              //  alert("Select-all functionality can be applied only to checkbox column");
                return;
            }

            for(var iRowIndex=1; iRowIndex < objTable.rows.length; iRowIndex++)
            {
                var objLabel =objTable.rows[iRowIndex].cells[iCellIndex].children[0];
                if(objLabel != null)
                    objChildNodes=objLabel.childNodes;
                if(iChildNodeIndex < objChildNodes.length && objChildNodes)
                {
                    iSelectCount++;
                    objChkBox=objChildNodes[iChildNodeIndex];

                    if(objChkBox.type=="checkbox")
                    {
                        var isInvokeCallback=(isSelect!=objChkBox.checked);
//                        alert("aaaaa    "+objHandlerFn)
                        objChkBox.checked=isSelect;
                        if(isSelect)
                            util.addClass(objTable.rows[iRowIndex], "sSelectedRow");
                        else
                            util.removeClass(objTable.rows[iRowIndex], "sSelectedRow");
                        if(objHandlerFn && (isInvokeCallback))
                            objHandlerFn(objChkBox,isSelect,iRowIndex,sTableId);

                    }
                }
            }

            if(isSelect)
                this.iChkboxSelectCnt=iSelectCount;
            else
                this.iChkboxSelectCnt=0;

        }

        if (evt)
        {
            cross.cancelBubble(evt,true);
            //evt.cancelBubble = true;
//            evt.returnValue = false;
        }
//       return false;
    };

    this.onItemClick=function(objChkBox)
    {
//        alert("checkbox")
        var objSelectAllChkBox,objTable,iRowIndex;
        var objTableInfo=this.getTableInfo(objChkBox);
        objTable=objTableInfo[1];
        //iRowIndex = objChkBox.parentNode.parentNode.parentNode.rowIndex;
//        iTransId = objTable.rows[iRowIndex].cells[0].children[1].innerHTML;
        if(!objChkBox.checked)
        {
            if(this.iChkboxSelectCnt > 0)
               this.iChkboxSelectCnt--;
        }

        if(objChkBox.checked)
        {
            util.addClass(objChkBox.parentNode.parentNode.parentNode, "sSelectedRow");
        }else{
            util.removeClass(objChkBox.parentNode.parentNode.parentNode, "sSelectedRow");
        }

        if(objTableInfo)
        {
            var iCellIndex=objTableInfo[0].cellIndex;
            var objChildNodes=objTable.rows[0].cells[iCellIndex].getElementsByTagName("INPUT");
            if(objChildNodes.length > 0 && objChildNodes[0].type=="checkbox")
            {
                objSelectAllChkBox=objChildNodes[0];

                if(objChkBox.checked)
                {
                    this.iChkboxSelectCnt++;
                }
            }
        }

        if(objSelectAllChkBox)
        {
            if (this.iChkboxSelectCnt == objTableInfo[1].rows.length - 1)
            {
                objSelectAllChkBox.checked = true;
                this.isSelectAll = true;
            }
            else
            {
                objSelectAllChkBox.checked = false;
                this.isSelectAll = false;
            }
        }
    };

    this.getTableInfo=function(objChkbox)
    {
        var objTD=objChkbox.parentNode;
        while(objTD&& objTD.nodeName!="TD")
            objTD=objTD.parentNode;
        if(objTD)
        {
            //var iCellIndex=objTD.cellIndex;
            var objTable=objTD.parentNode;
            while(objTable.nodeName!="TABLE")
                objTable=objTable.parentNode;
            return new Array(objTD,objTable);
        }
        return null;
    };



    this. getSelectedRows=function(objTable,iChkboxCellIndex,iValueIndex,sHiddenFldName,isGetRowIndexes)
    {
        var objChildNodes=objTable.rows[0].cells[iChkboxCellIndex].getElementsByTagName("INPUT");
        /*if(objChildNodes.length > 0 && objChildNodes[0].type=="checkbox" && objChildNodes[0].checked)
            return -1;*/

        var objChkBox,iChildNodeIndex=0,sValues="",sValue;
        for(var iRowIndex=1; iRowIndex < objTable.rows.length; iRowIndex++)
        {
            objChildNodes=objTable.rows[iRowIndex].cells[iChkboxCellIndex].children[0].childNodes;
            if(iRowIndex==1)
            {
                for(;iChildNodeIndex < objChildNodes.length; iChildNodeIndex++)
                {
                    objChkBox=objChildNodes[iChildNodeIndex];
                    if(objChkBox.nodeName=="INPUT" && objChkBox.type=="checkbox")
                        break;
                }

                if(iChildNodeIndex==objChildNodes.length)
                {
                    alert("Select-all functionality can be applied only to checkbox column");
                    return 0;
                }

            }
            //alert(iChildNodeIndex +","+objChildNodes.length)
            if(iChildNodeIndex < objChildNodes.length)
            {
                objChkBox=objChildNodes[iChildNodeIndex];
                //alert(objChkBox.outerHTML)
                if(objChkBox.type=="checkbox" && objChkBox.checked)
                {
                    if(isGetRowIndexes)
                    {
                        if(iValueIndex>=0)
                        {
                            sValue=objTable.rows[iRowIndex].cells[iValueIndex].innerText;
                            if(sValue!="" && util.trim(sValue)!="")
                                sValues+=iRowIndex+",";
                        }
                        else
                            sValues+=iRowIndex+",";
                    }
                    else if(iValueIndex>=0)
                    {
                        sValue=objTable.rows[iRowIndex].cells[iValueIndex].innerText;
                        if(sValue!="" && util.trim(sValue)!="")
                            sValues+=sValue + ",";

                    }
                    else if(sHiddenFldName)
                        sValues+=document.getElementById(sHiddenFldName+"["+(iRowIndex-1)+"]").value+ ",";
                    else
                        sValues+=objChkBox.value+ ",";
                }
            }
        }
        //alert(sValues)

        return sValues;
    };

    this.getSelRowMultiValues=function(objTable,iChkboxCellIndex,arrValueIndexes,iSelRowIndex)
    {

        if(!arrValueIndexes || arrValueIndexes.length==0)
        {
            alert("Invalid value indexes: "+arrValueIndexes);
            return null;
        }

        var arrReturnValues=new Array();

        var objChildNodes;//objTable.rows[0].cells[iChkboxCellIndex].getElementsByTagName("INPUT");
        var objChkBox,iChildNodeIndex=0;
        var iTotalRows=objTable.rows.length;
        var iRowIndex=1;

        if(iSelRowIndex && iSelRowIndex!=-1)
        {
            iRowIndex=iSelRowIndex;
            iTotalRows=iSelRowIndex+1;
        }

        for(; iRowIndex < iTotalRows; iRowIndex++)
        {
            objChildNodes=objTable.rows[iRowIndex].cells[iChkboxCellIndex].childNodes;
            if(!objChkBox)
            {
                for(;iChildNodeIndex < objChildNodes.length; iChildNodeIndex++)
                {
                    objChkBox=objChildNodes[iChildNodeIndex];
                    if(objChkBox.nodeName=="INPUT" && objChkBox.type=="checkbox")
                        break;
                }

                if(iChildNodeIndex==objChildNodes.length)
                {
                    alert("Select-all functionality can be applied only to checkbox column");
                    return 0;
                }

            }
            if(iChildNodeIndex < objChildNodes.length)
            {
                objChkBox=objChildNodes[iChildNodeIndex];
                if(objChkBox.type=="checkbox" && objChkBox.checked)
                {
                    var arrValues;
                    arrValues=new Array();
                    for(var i=0; i < arrValueIndexes.length; i++)
                    {
                        if(objTable.rows[iRowIndex].cells[arrValueIndexes[i]]!=null)
                        arrValues[arrValues.length]=objTable.rows[iRowIndex].cells[arrValueIndexes[i]].children[0].innerText;
                    }
                    arrReturnValues[arrReturnValues.length]=arrValues;
                }
            }
        }
//        alert(arrReturnValues);

        return arrReturnValues;
    };


};

/**
 * Author     : uday
 * Description: this js is used to resize and swap columns of a table
 */
var clCustomTbl = new function()
{
    var me = this;
    this.bResizable = false;
    this.bMoving = false;
    this.iLastLeftPos = 0;
    this.iLastTopPos = 0;
    this.tdSrc = null;
    this.sScrollId = null;
    /*
    *  this function is used to create a new div for showing tooltip
    * */
    this.init = function(sTableId,sScrollId)
    {
        var iLength = 0,iDivWidth;
        var tbl = document.getElementById(sTableId);
        me.sScrollId = sScrollId;
        var arrCells = tbl.tHead.rows[0].cells;
        for(var i = 0;i < arrCells.length-1;i++)
        {
            if(arrCells[i].style.display != "none")
                iLength += parseInt(arrCells[i].width);
        }
        iDivWidth = tbl.parentNode.offsetWidth;
        if((iDivWidth-iLength) > 0)
        {
            //arrCells[arrCells.length-1].width = iDivWidth-iLength;
            //if(tbl.width>0)
            //    tbl.width=parseInt(tbl.width)+iDivWidth-iLength;
        }
        else
            arrCells[arrCells.length-1].width = 1;
        if(tbl.getAttribute("isMovableCols"))
        {
            var dvNew = document.createElement("DIV");
            dvNew.id = "currentDrag";
            dvNew.className = "tooltipdiv";
            document.body.appendChild(dvNew);
            dvNew.style.display = "none";
        }
    };

    /*
    * this function is used to show resize cursor
    * */
    this.onMMoveShowCursor = function(tdSrc,e)
    {
        var iCursorInTD,iResizeArea = 7,tblHead,iDivScrLeft,trSrc;
        e = e?e:window.event;
        trSrc = tdSrc.parentNode;
        tblHead = tdSrc.parentNode.parentNode.parentNode;
        iDivScrLeft = tblHead.parentNode.scrollLeft;
		iCursorInTD	= e.clientX-getOffsetLeft(tdSrc)+iDivScrLeft;
		if(iCursorInTD < iResizeArea || (iCursorInTD+iResizeArea) > tdSrc.offsetWidth)
        {
//            if(iCursorInTD > iResizeArea)
            {
//                if(tdSrc.cellIndex >= 0)
                    tdSrc.style.cursor = "e-resize";
               /* else
                    return false;*/
            }
            /* else
            {
               if(tdSrc.cellIndex == tdSrc.parentNode.cells.length-1)
                    return false;
                else
                    tdSrc.style.cursor = "e-resize";
            }       */
        }
        else
            tdSrc.style.cursor = "";
    };

  /*  this.enableSelection = function(target,bIsEnable)
    {
        if (typeof target.onselectstart != "undefined") //IE route
            target.onselectstart = function(){return bIsEnable;};
        else if (typeof target.style.MozUserSelect!="undefined") //Firefox route
        {
            if(bIsEnable)
                target.style.MozUserSelect = "";
            else
                target.style.MozUserSelect = "none";
        }
        else //All other route (ie: Opera)
        {
            if(bIsEnable)
                target.onmousedown = null;
            else
                target.onmousedown = function(){return bIsEnable;};
        }
    };*/

    /*
    * this function is used to find which coloum is dragging,its innerText and attach mousemove and mouseup events
    * */
    this.onMDnSwapCols = function(tdSrc,e)
    {
        e = e?e:window.event;
        cross.enableSelection(document.body,false);

        if(me.doResizing(tdSrc,e))
        {
            var trSrc,dvCurDrag,tblSrc,iBodyScrLeft,iBodyScrTop;
            iBodyScrLeft = (document.documentElement.scrollLeft || document.body.scrollLeft);
            iBodyScrTop = (document.documentElement.scrollTop || document.body.scrollTop);
            tblSrc = tdSrc.parentNode.parentNode.parentNode;
            me.tdSrc = tdSrc;
            if(tdSrc.getAttribute("emptytd") || !tblSrc.getAttribute("isMovableCols"))
            {
                me.bMoving = false;
                return false;
            }
            if(me.bResizable)
                return false;
            trSrc = tdSrc.parentNode;
            trSrc.style.cursor = "move";
            me.bMoving = true;

            dvCurDrag = document.getElementById("currentDrag");
            dvCurDrag.style.left = e.clientX+iBodyScrLeft+4;
            dvCurDrag.style.top = e.clientY+iBodyScrTop+9;
            dvCurDrag.style.display = '';
            dvCurDrag.innerHTML = cross.getInnerText(tdSrc);

            trSrc.onmousemove = function(e)
            {
                me.onMMoveTooltipDiv(dvCurDrag,trSrc,e);
            };
            document.onmouseup = function(e)
            {
                me.stopDragging(dvCurDrag,trSrc);
            };
            cross.cancelBubble(e);
            //e.cancelBubble = true;
           // if(e.stopPropagation)
             //   e.stopPropagation();
        }
        cross.enableSelection(document.body,true);
        cross.cancelBubble(e);
        return false;
    };

    /**
     *   resizing the source element. It returns true when source element not resized..
     */
    this.doResizing=function(tdSrc,e)
    {
        var iCursorInTD,iResizeArea = 7,dvReisizeFrm,dvResizeTo,tblHead,iDivScrLeft,objDiv;
        e = e?e:window.event;

        tblHead = tdSrc.parentNode.parentNode.parentNode;// th-tbody-table actual table height
        if(me.sScrollId != null)
        {
            objDiv = document.getElementById(me.sScrollId);
        }
        else
        {
            objDiv =  tblHead.parentNode;
            var sCssText = objDiv.style.cssText;
            /**As parentNode of table(tblHead) has no scroll so containerDiv scroll is considered*/
            if(sCssText.indexOf("overflow") == -1)
            {
                objDiv = document.getElementById("containerDiv");
            }
        }
        iDivScrLeft = objDiv.scrollLeft;

        iCursorInTD	= e.clientX-getOffsetLeft(tdSrc)+iDivScrLeft;
        if(iCursorInTD < iResizeArea || (iCursorInTD+iResizeArea) > tdSrc.offsetWidth)
        {
            var iStartPos,iTdWidth;
            if(iCursorInTD < iResizeArea)
            {
//                if(tdSrc.cellIndex > 0)
                {
                    tdSrc = cross.getPrevSibiling(tdSrc);
                    while(tdSrc && tdSrc.style.display == "none")
                        tdSrc = cross.getPrevSibiling(tdSrc);
                }
//                else
//                    return false;
            }
            /* else
            {
               if(tdSrc.cellIndex == tdSrc.parentNode.cells.length-1)
                    return false;
            }*/
            var iLeftPos = getOffsetLeft(tdSrc);
            dvReisizeFrm = document.getElementById("resizeFrom");
            dvReisizeFrm.style.display = "";
            dvReisizeFrm.style.left = iLeftPos-iDivScrLeft;
            dvReisizeFrm.style.top = getOffsetTop(tdSrc);
            dvReisizeFrm.style.height = tblHead.offsetHeight;

            dvResizeTo = document.getElementById("resizeTo");
            dvResizeTo.style.display = "";
            tblHead.style.cursor = "e-resize";
            dvResizeTo.style.cursor = "e-resize";
            dvResizeTo.style.left = iLeftPos+tdSrc.offsetWidth-iDivScrLeft;
            dvResizeTo.style.top = getOffsetTop(tdSrc);
            dvResizeTo.style.height = tblHead.offsetHeight;

            me.bResizable = true;
            iTdWidth = tdSrc.offsetWidth;
            iStartPos = iLeftPos+tdSrc.offsetWidth-iDivScrLeft;
//            tblHead.onmousemove = function(e)
            objDiv.onmousemove = function(e)
            {
                dvResizeTo.style.cursor = "e-resize";
                tblHead.style.cursor = "e-resize";
                me.onMMoveResizing(iStartPos,iTdWidth,dvResizeTo,e);
            };
            document.onmouseup = function(e)
            {
                dvResizeTo.style.cursor = "";
                tblHead.style.cursor = "";
                me.onMUpStopResizing(tdSrc,tblHead,iStartPos,e);
            };
        }
        else
            return true;
    };

    /*
    * this function is used to increasing or decreasing width of coloumn width depends upon cursor moving
    * */
    this.onMMoveResizing = function(iStartPos,iTdWidth,dvResizeTo,e)
    {
        if(me.bResizable)
        {
            e = e?e:window.event;
            if((e.clientX-iStartPos+iTdWidth) >= 20)
                dvResizeTo.style.left = e.clientX;
        }
        return false;
    };

    /*
    * this function is used to stop resizing
    * */
    this.onMUpStopResizing = function(tdSrc,tblHead,iStartPos,e)
    {
        var sHandlerFn,iTdNewWidth,iTblNewWidth,iTblWidth,iDivWidth,iResized,arrCells,tdLast,iLength = 0;
        e = cross.getEvent(e);
        iResized = e.clientX-iStartPos;
        iDivWidth = tblHead.parentNode.offsetWidth;
        
        document.getElementById("resizeFrom").style.display = "none";
        document.getElementById("resizeTo").style.display = "none";

        iTblWidth = parseInt(tblHead.width);//tblHead.offsetWidth;
        iTdNewWidth = iResized+parseInt(tdSrc.width);//tdSrc.offsetWidth;

        iTblNewWidth = iResized+iTblWidth;
        if(iTdNewWidth <= 20)
            iTdNewWidth = 20;

        //alert(tdSrc.innerHTML);
      //  alert(tdSrc.width+" --  "+iTdNewWidth)
        tdSrc.width = iTdNewWidth;
        tdSrc.style.minWidth = iTdNewWidth;

        arrCells = tdSrc.parentNode.cells;
        tdLast = arrCells[arrCells.length-1];
        for(var i = 0;i < arrCells.length-1;i++)
        {
            //alert(parseInt(arrCells[i].width)+"  "+arrCells[i].offsetWidth)
            if(arrCells[i].style.display != "none")
            {
                if(i==0)
                iLength += parseInt(arrCells[i].offsetWidth);// first column width mentinoed as 1%
                else
                iLength += parseInt(arrCells[i].width);
            }
        }

        //alert(iLength)
        if(tdLast.getAttribute("emptytd"))
        {

            if(iResized > 0)
            {
              
                if((tdLast.width-iResized) > 0)
                    tdLast.width = tdLast.width-iResized+7;
                else
                {
                    //need to apply display:none to last TD
                    //alert("before="+tblHead.width+" "+iResized+" "+iLength);
                    tdLast.width = 1;
                    tblHead.width = iLength;
                  //  alert("before="+tblHead.width);
                }
            }
            else
            {
                //alert("3");
                if(iLength > iDivWidth)
                {
                    tblHead.width = iLength+1;
                    tdLast.width = 1;
                }
                else if((tdLast.width == 1) && (iTblWidth > iDivWidth) && (iTblNewWidth < iDivWidth))
                {
                    tblHead.width = iDivWidth;
                    tdLast.width = iDivWidth-iLength;
                }
                else
                    tdLast.width = iTblWidth-iLength;
            }
        }
   //     alert("after="+tblHead.width+" "+iResized+" "+iLength+"  "+iDivWidth+"  "+tdLast.width+" "+iTblWidth);
        
        me.bResizable = false;
        document.onmouseup = null;
        tblHead.onmousemove = null;
        tblHead.parentNode.onmousemove = null;

        sHandlerFn = tblHead.getAttribute("resizeHandler");
        if(sHandlerFn != null)
            eval(sHandlerFn).apply(me,[tdSrc]);
//            eval(sHandlerFn).apply(me,[tdSrc.offsetWidth]);
        return false;
    };

    /*
    *  this function is used to change clientX,clientY of tooltip div
    * */
    this.onMMoveTooltipDiv = function(dvCurDrag,trSrc,e)
    {
        var iBodyScrLeft,iBodyScrTop;
        iBodyScrLeft = (document.documentElement.scrollLeft || document.body.scrollLeft);
        iBodyScrTop = (document.documentElement.scrollTop || document.body.scrollTop);
        trSrc.onmouseover = function(e)
        {
            dvCurDrag.style.display = '';
        };
        trSrc.onmouseout = function(e)
        {
            dvCurDrag.style.display = 'none';
        };
        e = e?e:window.event;
        dvCurDrag.style.left = e.clientX+iBodyScrLeft+4;
        dvCurDrag.style.top = e.clientY+iBodyScrTop+9;
    };

    /*
    *  this function is used to stop dragging and invisible the tooltip div
    * */
    this.stopDragging = function(dvCurDrag,trSrc)
    {
        dvCurDrag.style.display = 'none';
        trSrc.style.cursor = "";
        trSrc.onmousemove = null;
        trSrc.onmouseover = null;
        trSrc.onmouseout = null;
        document.onmouseup = null;
    };

    /*
    * this function is used to find on which coloum mouse up
    * */
    this.onMUpSwapCols = function(tdDest,e)
    {
        e = e?e:window.event;
        cross.enableSelection(document.body,true);
        if(me.bResizable)
            return false;
        if(me.bMoving)
        {
            var iSrcCol,iDestCol,tblHead,sHandlerFn;
            iDestCol = tdDest.cellIndex;
            tblHead = me.tdSrc.parentNode.parentNode.parentNode;
            iSrcCol = me.tdSrc.cellIndex;
            if(tblHead.tHead)
                me.swapCols(tblHead.tHead,iSrcCol,iDestCol);
            if(tblHead.tBodies[0])
                me.swapCols(tblHead.tBodies[0],iSrcCol,iDestCol);

            me.stopDragging(document.getElementById("currentDrag"),me.tdSrc.parentNode);
            me.bMoving = false;

            sHandlerFn = tblHead.getAttribute("moveHandler");
            if(sHandlerFn != null)
                eval(sHandlerFn).apply(me,[tdDest,me.tdSrc]);

            cross.cancelBubble(e);
            /*e.cancelBubble = true;
            if(e.stopPropagation)
                e.stopPropagation();*/
        }
        return false;
    };

    /*
    * this function is used to swap two coloumns
    * tbdChild - Either tbody or thead of table
    * iSrcCol  - Source coloum index
    * iDestCol  - Destination coloum index
    * */
    this.swapCols = function(tbdChild,iSrcCol,iDestCol)
    {
        var iRows,trCurrent,arrTds,iNoOfTDs,iColSpan,arrRows,tdDest,tdDestNext,tdSrc,tdSrcNext;
        if(iDestCol == iSrcCol)
            return false;

        arrRows = tbdChild.rows;
        iRows = arrRows.length;
        for (var iIndex = 0; iIndex < iRows; iIndex++)
        {
            iColSpan = 0;
            trCurrent = arrRows[iIndex];
            arrTds = trCurrent.cells;
            for(var j = 0;j < arrTds.length;j++)
            {
                iColSpan = arrTds[j].getAttribute("colspan");
                if(iColSpan && (iColSpan > 1))
                    break;
            }
            if(iColSpan <= 1)
            {
                iNoOfTDs  = arrTds.length;
                tdSrc = trCurrent.cells[iSrcCol];
                tdDest = trCurrent.cells[iDestCol];
                tdDestNext = trCurrent.cells[iDestCol+1];
                tdSrcNext = trCurrent.cells[iSrcCol+1];
                if(iDestCol < iNoOfTDs-1)
                    trCurrent.insertBefore(tdSrc, tdDestNext);
                else
                    trCurrent.appendChild(tdSrc);
                if(iSrcCol < iNoOfTDs-1)
                    trCurrent.insertBefore(tdDest, tdSrcNext);
                else
                    trCurrent.appendChild(tdDest);
            }
        }
        return false;
    };
};
/**
 * this function is used to find offsetTop of an element
 */
function getOffsetTop(elem)
{
    var iScrollTop,iCurrentTop;
    iCurrentTop = 0;
    if (elem && elem.offsetParent)
    {
//        iScrollTop = document.body.scrollTop;
//        window.status = "iScrollTop  "+iScrollTop+","+elem.offsetTop;
        iCurrentTop = elem.offsetTop ;
        while (elem = elem.offsetParent)
        {
            iCurrentTop += elem.offsetTop;
        }
    }
    return parseInt(iCurrentTop);
};

/**
 * this function is used to find offsetLeft of an element
 */
function getOffsetLeft(elem)
{
    var iCurrentLeft =0;
    if (elem && elem.offsetParent)
    {
        iCurrentLeft = elem.offsetLeft;
        while (elem = elem.offsetParent)
            iCurrentLeft += elem.offsetLeft;
    }
    if(iCurrentLeft<0)
        iCurrentLeft = 0;
    return parseInt(iCurrentLeft);
};
