
//namespace("crm");

//if(!moduleView)
//{
var moduleView=new function()
{
    app.registerInstance("moduleView",moduleView);

    var me=this;

    this.EVENT_BEFORE_SAVE=1;
    this.EVENT_AFTER_SAVE=2;
    this.EVENT_BEFORE_NEW=3;
    this.EVENT_AFTER_NEW=4;
    this.EVENT_BEFORE_CANCEL=5;
    this.EVENT_AFTER_CANCEL=6;
    this.EVENT_ON_SAVE_AND_NEW=7;
    this.EVENT_ONLINE_CREATION=8;
    this.EVENT_ON_DUPLICATE=9;

    this.STATUS_STOP_SUBMIT=Constants.IModule.STATUS_STOP_SUBMIT;
    this.STATUS_CONTINUE=Constants.IModule.STATUS_CONTINUE;
    this.STATUS_URL=Constants.IModule.STATUS_URL;
    this.STATUS_RETURN=Constants.IModule.STATUS_RETURN;

    this.CHECK_MANDATORY=0;
    this.CHECK_INVALID=1;
    this.CHECK_NO_OF_CHARS=2;
    this.CHECK_REG_EXPR=3;
    this.CHECK_MIN_MAX=4;


    this.TAG_INCREMENTAL=12;

    this.iViewId=0;
    this.arrVarFieldIds={}; //stores mapping between variable-name and fieldid, which are used for referring input element
    this.arrSQLParams=[];

    this.sArrUniqueConstraints=null;//unique constraints
    this.iArrDupFieldIds=null;
    this.iArrReadOnlyFields=null;

    this.onAddRowHandler=null;
    this.onAddRowHandlerArgs=null;

    this.onDeleteRowAfterHandler=null;
    this.onDeleteRowAfterHandlerArgs=null;

    this.isPendingLinksDefined = false;
    this.arrEzetapFields = null;

    this.sFieldStack=null;
    this.sStartingField=null;
    this.arrInvalidFldIds=null;

    this.isComboEditByKeyEvent = false;

    this.hasPendingLinksDefined= function (isPendingLinksDefined)
    {
        me.isPendingLinksDefined = isPendingLinksDefined;
    };

    this.setEzetapFields = function (iAmtFld,iMobileNoFld,iEmailFld,sEvaluateRule,iGatewayType,iReferenceFld,iPayStatusFieldId)
    {
        me.arrEzetapFields = [iAmtFld,iMobileNoFld,iEmailFld,sEvaluateRule,iGatewayType,iReferenceFld,iPayStatusFieldId];
    };

    this.setOnAddRowhandler =function(fnHandler, arrArgs)
    {
        me.onAddRowHandler=fnHandler;
        me.onAddRowHandlerArgs=arrArgs;
    };

    this.onDeleteRowHandler=null;
    this.onDeleteRowHandlerArgs=null;
    this.setOnDeleteRowhandler =function(fnHandler, arrArgs)
    {
        me.onDeleteRowHandler=fnHandler;
        me.onDeleteRowHandlerArgs=arrArgs;
    };

    this.setOnDeleteRowAfterHandler =function(fnHandler, arrArgs)
    {
        me.onDeleteRowAfterHandler=fnHandler;
        me.onDeleteRowAfterHandlerArgs=arrArgs;
    };

    this.onBeforeDeleteRowHandler=null;
    this.onBeforeDeleteRowHandlerArgs=null;
    this.setBeforeDeleteRowhandler = function(fnHandler, arrArgs)
    {
        me.onBeforeDeleteRowHandler=fnHandler;
        me.onBeforeDeleteRowHandlerArgs=arrArgs;
    };
    var arrMandatoryFields=[];//[sFieldName,sLabel,iControlType,iDataType,sFormName,byValidationType]
    var arrOtherValidations=[];//[sFieldName,sLabel,iControlType,iDataType,sFormName,iRuleId]
    var fnArrCallbacks=null;


    var sSaveUrl=null;
    var iArrElemIndexes=null;
    var objModuleForm=null;
    var iArrDelBodyIds=null;
    var isTabpaneView=false;
    var sCsvTimerIds=null;

    this.init=function(isTabbedpaneView,sArrUniqueConstraints)
    {
        isTabpaneView=isTabbedpaneView;

        app.attachCallbackFn(checkInput,moduleView.callbackCheckInput);

        if(sArrUniqueConstraints)
        {
            me.setUniqueConstraints(eval(sArrUniqueConstraints));
        }

        cross.registerEventListener(cross.EVENT_ONKEYUP,moduleView.onDocumentKeyUp,null,null,Constants.SCOPE_SCREEN);

        setComboCascadeIds();

        if(me.iArrReadOnlyFields!=null)
        {
            for(var i=0; i < me.iArrReadOnlyFields.length; i++)
            {
                var objField = document.getElementById(me.iArrReadOnlyFields[i]);
                if(objField)
                    me.setFieldValueAsAttr(objField,null,true);
                else if(document.getElementById(me.iArrReadOnlyFields[i]+"[0]"))
                    moduleBody.enableOrDisableColumn(null,me.iArrReadOnlyFields[i],true);
            }
            me.iArrReadOnlyFields=null;
        }


        cross.registerWindowEvent('onScroll',cross.EVENT_ON_WND_SCROLL,me.onWndscroll,null,Constants.SCOPE_SCREEN);


        var iModuleId=document.getElementById("moduleId").value;
        var objForm=document.forms["frmMaster"+iModuleId];
        if(objForm!=null)
        {
            try
            {
                var i=0;
                for(var elem=null;  i < objForm.elements.length; i++)
                {
                    elem=objForm.elements[i];
                    if(elem.name.indexOf("].value")!=-1 && !elem.disabled)
                        break;
                }

                setTimeout(function(){
                    objForm.elements[i].select();
                },500);

                //objForm.elements[i].select();
            }
            catch(e) {}
        }
    };

    this.onWndscroll=function(e)
    {
        var iPosition = cross.getBodyScrollTop();
        var objListHeader = document.getElementById("iListHeaderId");
        var objActionbarHeader = document.getElementById("tblActBarAct_abr");

        if(iPosition>30)
        {
            objListHeader.style.position="fixed";
            objListHeader.style.top="2px";
            objListHeader.style.width="85%";
            objListHeader.style.zIndex="2";
            objListHeader.style.backgroundColor="#FFFFFF";

            objActionbarHeader.style.position="fixed";
            objActionbarHeader.style.top="47px";
            objActionbarHeader.style.width="85%";
            objActionbarHeader.style.zIndex="2";
            objActionbarHeader.style.backgroundColor="#F5F5F5";
        }
        else
        {
            objListHeader.style.position="inherit";
            objListHeader.style.top="0";
            objListHeader.style.width="inherit";
            objListHeader.style.zIndex="1";

            objActionbarHeader.style.position="inherit";
            objActionbarHeader.style.top="0";
            objActionbarHeader.style.width="revert-layer";
            objActionbarHeader.style.zIndex="1";
        }

    };

    this.startTimers=function(sCsvIds)
    {
        if(sCsvIds)
        {
            sCsvTimerIds=sCsvIds;

            var sArrIds=sCsvIds.split(",");
            for(var i=0; i < sArrIds.length; i++)
            {
                clTimer.startTimer(sArrIds[i]);
            }
        }
    };

    this.stopTimers=function(sCsvIds)
    {
        var sArrIds=sCsvIds.split(",");
        for(var i=0; i < sArrIds.length; i++)
        {
            clTimer.stopTimer(sArrIds[i]);
        }
    };

    this.getMandatoryFields=function()
    {
        return arrMandatoryFields;
    };

    this.setUniqueConstraints=function(sArrUniqueConstraints)
    {
        this.sArrUniqueConstraints=sArrUniqueConstraints;
    };


    this.setViewId=function(viewId)
    {
//      if(!sSaveUrl)
        this.iViewId=viewId;
    };

    this.setSaveUrl=function(sUrl,isReplaceExisting)
    {
        if(!sSaveUrl || isReplaceExisting)
            sSaveUrl=sUrl;
    };

    this.getModuleId=function()
    {
        return document.getElementById("moduleId").value;
    };

    this.getTransId=function()
    {
        return document.getElementById("transId").value;
    };

    this.setDeleteBodyIds=function(iArrDelBodyIdsVa)
    {
        iArrDelBodyIds=iArrDelBodyIdsVa;
    };

    this.getAPITransId=function()
    {
        var iModuleId=me.getModuleId();
        var iTransId=me.getTransId();
        var iAPITransId=util.getAPITransId(iTransId, iModuleId, 0);
        return iAPITransId;
    };

    this.appendEditModuleParams=function(sURL,iTransId,isClone,iBaseModuleId,iBaseModuleTransId)
    {
        if(!iTransId)
            iTransId=0;
        sURL+="&transId="+iTransId;

        if(document.getElementById("extraIds[0]"))
            sURL+="&extraIds="+document.getElementById("extraIds[0]").value;
        if(isClone)
            sURL+="&clone=1";
        if(iBaseModuleId)
            sURL+="&baseModuleId="+iBaseModuleId;
        if(iBaseModuleTransId)
            sURL+="&baseTransId="+iBaseModuleTransId;
        if(document.getElementById("subTypeId"))
            sURL+="&subTypeId="+document.getElementById("subTypeId").value;

        return sURL;
    };

    this.editModule=function(sURL,iTransId,isClone,iBaseModuleId,iBaseModuleTransId)
    {
        sURL=moduleView.appendEditModuleParams(sURL,iTransId,isClone,iBaseModuleId,iBaseModuleTransId);
        home.setCenterUI(sURL);
    };

    this.editModuleInDlg=function(sURL,iTransId,isClone,iBaseModuleId,iBaseModuleTransId,sTitle)
    {
        sURL=moduleView.appendEditModuleParams(sURL,iTransId,isClone,iBaseModuleId,iBaseModuleTransId);
        sURL+="&viewMode="+Constants.VIEW_MODE_EDIT_TABPANE+"&viewIn="+Constants.MODULE_IN_WITHOUT_ACTIONS+"&sFnSaveCallback=parent.app.hidePopUp";
        var arrActions = new Array();
        arrActions[0] = MsgHandler.getMsg(MsgConstants.OK)+"|moduleView.saveModuleDetails";
        arrActions[1] = MsgHandler.getMsg(MsgConstants.CANCEL)+"|parent.app.hidePopUp";
//        alert("sURL=="+sURL)
        app.showPopUp(sURL, sTitle, 660, 315, arrActions);
    };

    this.getFieldGroup=function(objField)
    {
        var dvGrp=objField.parentNode;
        while(dvGrp  && dvGrp.getAttribute("isgroup")==null)
        {
            if(dvGrp.nodeName=="BODY")
            {
                dvGrp=null;
                break;
            }
            else if((util.hasClass(dvGrp,"TabberTabHide") || util.hasClass(dvGrp,"TabberTab"))) //tab content div
                break;

            dvGrp=dvGrp.parentNode;
        }
        return dvGrp;
    };

    this.enableOrDisableGroup = function(dvGrp,isEnable)
    {
        if(dvGrp)
        {
            var arrInputTags = dvGrp.getElementsByTagName("INPUT");
            var arrTextAreaTags = dvGrp.getElementsByTagName("TEXTAREA");

            //var  arrInputs= Array.from(arrInputTags);

            var arrInputs = Array.prototype.slice.call(arrInputTags);

            if(arrTextAreaTags.length > 0)
                arrInputs = arrInputs.concat(Array.prototype.slice.call(arrTextAreaTags));

            if(isEnable)
            {
                if(dvGrp.getAttribute("disabledGroup"))
                {
                    for (var i = 0; i < arrInputs.length; i++)
                    {
                        if(arrInputs[i].disabled)
                            arrInputs[i].removeAttribute("disabled");
                    }
                    dvGrp.removeAttribute("disabledGroup");
                }
            }
            else
            {

                for (var i = 0; i < arrInputs.length; i++)
                    arrInputs[i].disabled = true;

                dvGrp.setAttribute("disabledGroup", true);
            }
        }
    };

    this.validate=function(arrFields,isLastField)
    {
        var fldInfo;
        var isValid=(arrFields.length == 0);

        var INDEX_FIELD_ID=0;
        var INDEX_LABEL=1;
        var INDEX_FORM_NAME=2;
        var INDEX_VALIDATION_TYPE=3;
        var INDEX_IS_BODY_FIELD=4;
        var INDEX_RULE_ID=5;

        var objInput;
        var iDataType;
        var iCtrlType=null;
        var arrInvalidFlds=[];

        if(isLastField==null)
            isLastField=true;


        for(var i=0; i < arrFields.length; i++)
        {
            Validation.setFocusInvalidFld(false);

            fldInfo=arrFields[i];
            if(document.getElementById("spSalutation_"+fldInfo[INDEX_FIELD_ID])!=null)
            {
                var elem = document.getElementById("spSalutation_"+fldInfo[INDEX_FIELD_ID]);
                if(elem.children[0].getAttribute("selValue")==null)
                {
                    getComboInstance(fldInfo[INDEX_FIELD_ID]).setSelectedIndex(-1);
                }
            }
            if(fldInfo[INDEX_FORM_NAME] && document.forms[fldInfo[INDEX_FORM_NAME]].getAttribute("SkipSave"))// && document.forms[fldInfo[INDEX_FORM_NAME]].style.d)  //formname
                continue;

            objInput=document.getElementById(fldInfo[INDEX_FIELD_ID]);
            if(!objInput || objInput.style.display=="none")
                continue;

            var dvGrp=moduleView.getFieldGroup(objInput);
            if(dvGrp && dvGrp.style.display=="none")
                continue;

            //alert(objInput.id)
            iCtrlType=objInput.getAttribute("ctrltype");
            iDataType=objInput.getAttribute("datatype");

            //isLastField=(i==arrFields.length-1);

            if(fldInfo[INDEX_VALIDATION_TYPE]==me.CHECK_INVALID)
            {
                if(objInput.value)
                {
                    /*if(iCtrlType==Constants.CONTROLTYPE_PHONE)
                     isValid=(Validation.checkPhoneNo(objInput,fldInfo[INDEX_LABEL],isLastField,false,Validation.ERROR_INVALID));
                     else*/
                    if(iCtrlType==Constants.CONTROLTYPE_EMAIL)
                        isValid=(Validation.checkEMail(objInput,fldInfo[INDEX_LABEL],isLastField,iCtrlType,false,Validation.ERROR_INVALID));
                    /*else if(iCtrlType==Constants.CONTROLTYPE_WEBSITE)
                     isValid=(Validation.checkWebsite(objInput,fldInfo[INDEX_LABEL],isLastField,false,Validation.ERROR_INVALID));*/
                    /*else
                     isValid=(Validation.checkMandatory(document.getElementById(fldInfo[0]),fldInfo[1],fldInfo[3],isLastField,fldInfo[2]));*/
                    else
                        isValid=true;//TODO: mobile no ctrl type validation not handled

                }
                else
                {
                    isValid=Validation.setValidationStatus(true, objInput, null, isLastField,false,Validation.ERROR_MANDATORY,iCtrlType,isTabpaneView);
                }
            }
            else if(fldInfo[INDEX_VALIDATION_TYPE]==me.CHECK_NO_OF_CHARS)
            {
                var iNoOfChars=parseInt(objInput.getAttribute("noOfChars"),10);
                var sValue=util.trim(objInput.value);
                isValid=true;
                if(sValue.length < iNoOfChars)
                    isValid=false;

                var sMsg=MsgHandler.getMsg(MsgConstants.MIN_CHARS_ALLOWED)+":"+iNoOfChars;
                Validation.setValidationStatus(isValid,objInput, sMsg, isLastField,false,Validation.ERROR_CUSTOM,Constants.CONTROLTYPE_TXTBOX,isTabpaneView);
            }
            else if(fldInfo[INDEX_VALIDATION_TYPE]==me.CHECK_REG_EXPR)
            {
                if(objInput.value.length>0)
                {
                    var sRegExp = objInput.getAttribute("regexp");
                    sMsg = objInput.getAttribute("regexpMsg");
                    var objRegExp=new RegExp(sRegExp);
                    isValid = objRegExp.test(objInput.value);

                    objInput.setAttribute("regexInvalidVal",isValid);
                    //alert(isValid)
                    Validation.setValidationStatus(isValid,objInput, sMsg, isLastField,false,Validation.ERROR_CUSTOM,iCtrlType,isTabpaneView);
                }
            }
            else if(fldInfo[INDEX_VALIDATION_TYPE]==me.CHECK_MIN_MAX)
            {
                var arrValues=me.validateMinMax(objInput);
                isValid=arrValues[0];
                sMsg=arrValues[1];

                Validation.setValidationStatus(isValid,objInput, sMsg, isLastField,false,Validation.ERROR_CUSTOM,iCtrlType,isTabpaneView);
            }
            else if(iCtrlType==Constants.CONTROLTYPE_MULTI_SELECT)
            {
                isValid = clMultiCombo.isValueSelected(objInput.id);
                Validation.setValidationStatus(isValid,objInput, fldInfo[INDEX_LABEL], isLastField,false,Validation.ERROR_MANDATORY,iCtrlType,isTabpaneView);
            }
            else //if(fldInfo[INDEX_VALIDATION_TYPE]!=me.CHECK_INVALID)
            {
                var objUploadFld=document.getElementById("uploadFileName_"+objInput.id);

                if(objUploadFld)
                {
                    iCtrlType=Constants.CONTROLTYPE_DOCUMENTCTRL;
                    objInput=objUploadFld;
                }
                var isGlobal = false;
                if(fldInfo[INDEX_FIELD_ID] == "F35004" || fldInfo[INDEX_FIELD_ID] == "F37862")/*Lead and Suspect salutation fields*/
                {
                    isGlobal = true;
                }

                if(!objInput.getAttribute("regexInvalidVal")) //added condition since if reg. exp fails on mandatory field, its error msg is getting cleared when chking it for mandatory again
                    isValid=(Validation.checkMandatory(objInput,fldInfo[INDEX_LABEL],iDataType,isLastField,iCtrlType,isGlobal,Validation.ERROR_MANDATORY,isTabpaneView,null,0,false,true));
            }

            if(!isValid)
            {
                arrInvalidFlds[arrInvalidFlds.length]=fldInfo;
            }
        }

        return arrInvalidFlds;
    };

    /**
     * Used for validating form before submission.
     * Validation is done in 3 steps:
     *    1. Mandatory fields which does not include body fields
     *    2. Fields which are mandatory based on applying some rules
     *    3. Validating body rows
     */
    this.validateFields=function()
    {
        if(me.iArrDupFieldIds!=null)
        {
            for(var i=0; i < me.iArrDupFieldIds.length; i++)
                util.removeClass(document.getElementById("F"+me.iArrDupFieldIds[i]),"errorMsg");
            me.iArrDupFieldIds=null;
        }

        //var isLastField=false; //used to retrieve final validation status if unable to pass the value of 'isLastField' parameter to true. For multiple master forms this is possible as there might some forms which needs to skipped. At that time lastfield could not be known.
        me.arrInvalidFldIds = me.validate(arrMandatoryFields);
        var arrInvalidFldIds2 = me.validate(arrOtherValidations);

        if(arrInvalidFldIds2.length > 0)
            me.arrInvalidFldIds = me.arrInvalidFldIds.concat(arrInvalidFldIds2);

        var isValid=me.arrInvalidFldIds.length==0;//Validation.getValidationStatus(false,isTabpaneView);
        if(isValid)
        {
            isValid=moduleBody.validateBodyRows();
            if(isValid)
                isValid=document.getElementById("msgbox").style.display=="none";
        }
        else
        {
            var objInput;
            for(var i = 0; i < me.arrInvalidFldIds.length;i++)
            {
                var sFldId = me.arrInvalidFldIds[i][0];

                objInput = document.getElementById(sFldId);

                if(i == 0 && objInput)
                    objInput.focus();

                if(objInput && objInput.name.indexOf("B")==-1) //not attaching to body fields as of now
                {
                    var iCtrlType = objInput.getAttribute("ctrltype");

                    if (iCtrlType == Constants.CONTROLTYPE_COMBOBOX || iCtrlType == Constants.CONTROLTYPE_OPTIONCTRL)
                    {
                        var objCombo = getComboInstance(sFldId);
                        objCombo.setOnLostScript("moduleView.onBlurValidateInvalidField('" + sFldId + "',evt)"); //+",'"+sFieldId+"')");
                    }
                    else
                        cross.addListener(objInput, cross.EVENT_ONBLUR, moduleView.onBlurValidateInvalidField, false, [sFldId], Constants.SCOPE_SCREEN);//,sFieldId
                }
            }

        }

        return isValid;
    };


    this.onBlurValidateInvalidField=function(sFieldId)
    {
        var i=0;
        for(; i < me.arrInvalidFldIds.length;i++)
        {
            if(me.arrInvalidFldIds[i][0]==sFieldId)
            {
                break;
            }
        }

        Validation.setFocusInvalidFld(false);
        me.validate([me.arrInvalidFldIds[i]],true);
    };


    this.saveAndSendMail=function()
    {
        var sUrlParams="?isSaveAndSendMail=1";
        me.saveModuleDetails(null,false,false,true);
    };

    /**
     * On save handler which invokes before save callback functions and based on the status it will invokes save method
     * @param fnOnSave
     * @param iActionId
     */

    this.saveModuleDetails=function(fnOnSave,iActionId,sSendMailUrl)
    {
        me.sURL=sSaveUrl;

        document.getElementById("msgbox").style.display="none";

        /*if(fnOnSave)    //TODO: remove this parameter. modulecallback fn should be used instead of this param
         fnArrCallbacks=fnOnSave;*/

        util.toggleBackground(true);

        var iStatus=moduleRules.onSaveEvalRules();
        if(iStatus==moduleView.STATUS_STOP_SUBMIT)
        {
            me.validateFields();
            util.toggleBackground(false);
            return;
        }


//        alert("before callback");
        var sArrReturnValue=me.invokeModuleCallbackFn(me.EVENT_BEFORE_SAVE);

//        alert("before save response "+sArrReturnValue);

        if(sArrReturnValue && sArrReturnValue[0] > 0)
        {
            var sUrlParams=sArrReturnValue[1];
            if(!sUrlParams)
                sUrlParams="";

            if(iActionId>0 && iActionId!=33)
                sUrlParams+="&saveAction="+iActionId;

            /*else if(iActionId==Constants.IActions.SAVE_AND_PRINT)
                sUrlParams+="&isSaveAndPrint=1";
            else if(iActionId==Constants.IActions.SAVE_AS_DRAFT)
                sUrlParams+="&isSaveAsDraft=1";
            else if(iActionId==Constants.IActions.SAVE_AND_SEND)
                sUrlParams+="&isSaveAndSendMail=1";*/

            var isSaving = me.doSave(sUrlParams,iActionId,sSendMailUrl);
            if(!isSaving)
                util.toggleBackground(false);
            //else
            //    me.validateFields();
        }
        else
            util.toggleBackground(false);
    };


    /**
     *  Invokes validate method and submits the form
     * @param sUrlParams
     */
    this.doSave=function(sUrlParams,iActionId,sSendMailUrl,isPaymentCompleted)
    {
        util.toggleBackground(true);

        if (me.isPendingLinksDefined && clModuleLinks.hasLinkValueFieldFocus())
            return false;

        var isValidFields = me.validateFields();//moduleBody.validateBodyRows();
        var isValid;

        if (me.sArrUniqueConstraints)
        {
            var clConstraintEvalDTO = me.sArrUniqueConstraints[0];
            var iArrFieldIds = clConstraintEvalDTO.getFieldIds();
            var isBodyTable = clConstraintEvalDTO.isBodyTable();
            var isUniqueAcrossRecords = clConstraintEvalDTO.isUniqueAcrossRecords();

            if (isBodyTable && !isUniqueAcrossRecords)
            {
                var sArrFieldIds = [];
                var iColIndexes = [];
                for (var i = 0; i < iArrFieldIds.length; i++)
                {
                    var obj = iArrFieldIds[i];
                    sArrFieldIds[i] = "F" + iArrFieldIds[i] + "[0]";
                    iColIndexes[i] = tablerow.getCellIndexByFieldId(sArrFieldIds[i]);
                }

                var clTable = moduleBody.getTableObject(sArrFieldIds[0], false);
                Validation.clearMessage(null, false, "msg" + clTable.getTableId());

                var iRowCount = clTable.getRowCount(true);
                var sArrSrcValues = [];
                var sArrTargetValues = [];
                var iColCount;
                var isBlankLine;

                for (var i = 0; i < iRowCount; i++)
                {
                    for (iColCount = 0; iColCount < iColIndexes.length; iColCount++)
                    {
                        sArrSrcValues[iColCount] = clTable.getValueAt(i, iColIndexes[iColCount], false, null, null, true);
                    }

                    for (var j = i + 1; j < iRowCount; j++)  //target rows loop (in decremental way) comparing row:1 with  2 to 4, then 3 and 4 and finally with 4
                    {
                        for (iColCount = 0; iColCount < iColIndexes.length; iColCount++)
                        {
                            sArrTargetValues[iColCount] = clTable.getValueAt(j, iColIndexes[iColCount], false, null, null, true);
                        }

                        isBlankLine = true;
                        isValid = false;

                        for (var k = 0; k < sArrSrcValues.length; k++)
                        {
                            if (sArrSrcValues[k] != "" || sArrTargetValues[k] != "")
                                isBlankLine = false;

                            if (!isBlankLine && (sArrSrcValues[k] == 0 || sArrSrcValues[k] != sArrTargetValues[k]))
                            {
                                isValid = true;
                                break;
                            }
                        }

                        if (!isValid)
                            break;
                    }


                    if (!isBlankLine && !isValid)
                    {
                        Validation.showMessage(MsgHandler.getMsg(MsgConstants.MUST_BE_UNIQUE, null, null, clConstraintEvalDTO.getConstraintName()), Validation.ERROR_MSG, null, Validation.ERROR_CUSTOM, false, "msg" + clTable.getTableId());
                        //Validation.showMessage(clConstraintEvalDTO.getConstraintName()+" must be unique",Validation.ERROR_MSG,null,Validation.ERROR_CUSTOM,false,"msg"+clTable.getTableId());
                        return false;
                    }
                }
            }
        }

        if (!isValidFields)
            return false;

        me.arrInvalidFldIds = null;

        if (sCsvTimerIds)
        {
            me.stopTimers(sCsvTimerIds);
        }

        var objViewIn = document.getElementById("viewIn");
        if (objViewIn && objViewIn.value == Constants.MODULE_IN_DLG)
        {
            var btnSave = parent.document.getElementById("btn_0");
            if (btnSave)
                parent.CLButtonUtil.disableButton(btnSave);
        }

        var sQueryString = "", objForm;
        for (var i = 0; i < document.forms.length; i++)
        {
            objForm = document.forms[i];
            if (objForm.name && objForm.name.indexOf("frmMaster") != -1 && !objForm.getAttribute("SkipSave"))
                sQueryString += con.formData2QueryString(objForm, null, moduleBody.callbackQueryString, null, true, true) + "&";
        }

        if (iArrDelBodyIds)
        {
            var iArrRowInfo;
            for (var i = 0; i < iArrDelBodyIds.length; i++)
            {
                iArrRowInfo = iArrDelBodyIds[i]; //[sFldPrefix,iBodyFieldsIndex,iBodyId]; //"b["+iBodyFieldsIndex+"].delBodyIds"
                sQueryString += iArrRowInfo[0] + "b[" + iArrRowInfo[1] + "].delBodyIds=" + iArrRowInfo[2] + "&";
                //alert(iArrRowInfo[0]+"b["+iArrRowInfo[1]+"].delBodyIds="+iArrRowInfo[2]+"&");
            }
        }

        var iArrAlertIds = moduleRules.getAlertsToSend();
        if (iArrAlertIds)
        {
            for (var i = 0; i < iArrAlertIds.length; i++)
                sQueryString += "alertIds=" + iArrAlertIds[i] + "&";
        }

        if (clAppBuffer.getBackUrl() != null)
            sQueryString += "isFromListView=1&";


        var objReqCache={'d_actionid': Constants.IActions.SAVE,'d_windowtype': clAppBuffer.getWindowType()};

        if(me.arrEzetapFields!=null && !isPaymentCompleted)
        {
            var isShowEzetapDlg=true;
            var objAmountFld=document.getElementById("F"+me.arrEzetapFields[0]);
            var objMobileNoFld = document.getElementById("F"+me.arrEzetapFields[1]);
            var objEmailFld = document.getElementById("F"+me.arrEzetapFields[2]);
            var sEvaluateRule = me.arrEzetapFields[3];

            if(sEvaluateRule!=null && util.trim(sEvaluateRule).length > 0)
            {
                var arrCLVariableDTOs = eval(sEvaluateRule);

                var sFormula = formula.replaceVarsWithValues(arrCLVariableDTOs, false, -1, null, true, false, -1, null, true, null, false);
                if(sFormula!=null)
                {
                    sFormula=eval(sFormula);
                    if(sFormula==false)
                    {
                        console.warn("Ezetap rule failed  " + sFormula);
                        isShowEzetapDlg=false;
                    }
                }
            }
            sQueryString += "&isPaymentConfigured=1";

            if(isShowEzetapDlg)
            {
                if (!objAmountFld)
                {
                    msg.showMessage(Validation.ERROR_MSG, "Failed to find amount field (" + me.arrEzetapFields[0] + ")");
                    return false;
                }

                if (!objMobileNoFld)
                {
                    msg.showMessage(Validation.ERROR_MSG, "Failed to find Mobile no. field (" + me.arrEzetapFields[1] + ")");
                    return false;
                }

                Validation.checkMandatory(objAmountFld, null, 0, false);

                if (!Validation.checkMandatory(objMobileNoFld, null, 0, true))
                {
                    return false;
                }

                sQueryString += "&saveAction=" + Constants.IActions.SAVE_AS_DRAFT;
                sQueryString += "&viewIn=" + Constants.MODULE_IN_OTHER_SCREEN;//TODO
                //sQueryString += "&isPaymentConfigured=1";

                objReqCache['showEzetapDlg'] = true;
            }
        }

        if (sUrlParams)
            sQueryString += sUrlParams;

        if (!me.sURL)
            me.sURL = sSaveUrl;




        /**
         * On save response handler which on successful save performs subsequent tasks such as invoking callback function, clearing form in case of save_and_new
         * @param sResponse
         * @param iStatusCode
         */
        function handleSave(sResponse, iStatusCode, sMsg, appValue, objReqCache)
        {
            //sResponse[0]=status,[1]=return value(transid/update status),[2]=string used in tree,[3]=user specific value given in status DTO,[4]= incremental fieldids,[5]=incremental field values
            var objViewIn = document.getElementById("viewIn");
            var isNewTrans = me.getTransId() == 0;
            var iModuleId = document.getElementById("moduleId").value;


            if(objReqCache && objReqCache['showEzetapDlg']==true && iStatusCode != MSG_BUSINESS_MESSAGE)
            {
                if (isNewTrans)
                {
                    var sResponse2 = eval(sResponse);
                    document.getElementById("transId").value = sResponse2[1];
                }

                me.showPaymentDlg();

                //moduleView.handlePaymentStatus(0,"test response");
                return;
            }

            if (iStatusCode == MSG_SUCCESS_STATUS_ONLY)
            {
                if(objViewIn && (objViewIn.value == Constants.MODULE_IN_DLG || objViewIn.value == Constants.MODULE_IN_TREE_DLG))
                {
                    if (parent.window["home"] != undefined) //for new account creation issue from Quick create screen, in that one more iframe is there for edit view
                            parent.home.setIsFormDataUpdated(false);
                    else if (top.window["home"] != undefined)
                        top.home.setIsFormDataUpdated(false);


                }
                else if (window["home"] != undefined)
                    home.setIsFormDataUpdated(false);

                if (appValue && appValue == "9999") //todo define constant for external module after save
                {
                    sResponse = eval(sResponse);

                    var sArray = eval(sResponse[3]);//CLModuleSaveActionDTO values
                    sArray = eval(sArray[0]);


                    var clModuleSaveActionDTO = new CLModuleSaveActionDTO(sArray[0], sArray[1], sArray[2], sArray[3], sArray[4], sArray[5]);

                    Focus.crm.extmodule.handleAfterSave(clModuleSaveActionDTO);
                    return;
                }
                if (sMsg != null && sMsg.trim().length > 0)
                {
                    try
                    {
                        sMsg = decodeURIComponent(sMsg);
                    }
                    catch(e){}

                    sMsg = sMsg.replace(/\+/g, ' ');
                }
                try
                {
                    var iAfterSaveResponse = me.invokeAfterSave(sResponse, iStatusCode, sMsg, appValue);
                    if (iAfterSaveResponse == me.STATUS_RETURN)
                        return;
                }
                catch (e)
                {
                }


                var objViewMode = document.getElementById("moduleViewMode");

                /*if(!objViewMode)
                 objViewMode=document.getElementById("viewMode");*/

                //if(objViewIn && objViewIn.value!=Constants.MODULE_IN_WITHOUT_ACTIONS) // assump is same actions r included from other jsp
                if (objViewIn && objViewIn.value == Constants.MODULE_IN_TREE_DLG) // assump is same actions r included from other jsp
                {
                    sResponse = eval(sResponse);
                    //if(objViewIn.value==Constants.MODULE_IN_TREE_DLG)
                    //{
                    if (sResponse[0] >= 1)
                        clDialogTreeView.onSaveTreeDetails([sResponse[1], sResponse[2]]);
                    else
                        alert("save status: " + sResponse[0]);
                    //}
                }
                else if (objViewIn && objViewIn.value == Constants.MODULE_IN_DLG)
                {
                    if (parent.getDialogBox("module" + iModuleId) != null) //closing if dialogbox is opened through actionhandler.js and not yet closed
                        parent.handler.handleDialogClose(iModuleId);

                    parent.app.hidePopUp();
                    //not handling anything for modules displayed in dialogbox since dialogbox closing/refreshing will be handled in aftersave callback
                }
                else if (objViewMode.value == Constants.VIEW_MODE_EDIT || objViewMode.value == Constants.VIEW_MODE_EDIT_TABPANE)
                {
                    var isMoveToBackUrl=false;

                    if (iActionId == Constants.IActions.SAVE_AND_NEW)
                    {
                        msg.showBusinessMsg(MsgHandler.getMsg(MsgConstants.SAVED_SUCCESSFULLY));

                        var objRecordInfo=document.getElementById("tblRecordInfo");
                        if(objRecordInfo)
                            objRecordInfo.style.display="none";

                        setTimeout(function ()
                        {
                            document.getElementById("msgbox").style.display = "none";
                        }, 3000);
                        me.onSaveAndNew(sResponse);
                    }
                    else if (iActionId == Constants.IActions.SAVE_AND_PRINT
                        || iActionId == Constants.IActions.SAVE_AND_SEND)
                    {
                        if(document.getElementById("buttongroup_actbar0_toggle"))
                            util.addClass(document.getElementById("buttongroup_actbar0_toggle").parentNode,"hide");

                        if(document.getElementById("buttongroup_actbar1_toggle"))
                            util.addClass(document.getElementById("buttongroup_actbar1_toggle").parentNode,"hide");

                        sResponse = eval(sResponse);
                        var iTransId = me.getTransId();
                        var iMemberId=0;
                        if (iTransId <= 0)
                        {
                            iTransId = sResponse[1];
                            if(iModuleId==Constants.LEADS || iModuleId==Constants.TELELEADS)
                                iMemberId = sResponse[9];
                            document.getElementById("transId").value=iTransId;
                        }
                        else if(iModuleId==Constants.LEADS || iModuleId==Constants.TELELEADS) {
                            //iTransId = document.getElementById("extraIds[0]").value;
                            iMemberId = me.getTransId();
                        }

                        if (iActionId == Constants.IActions.SAVE_AND_SEND)
                        {
                            var sURLV=sSendMailUrl+"&actionId=3";
                            if(iModuleId==Constants.LEADS || iModuleId==Constants.TELELEADS) {
                                sURLV+="&memberId="+iMemberId;
                            }
                            handler.showEmailDlg(sURLV, 0, 0, iModuleId, iTransId,Constants.EMAILS, 0);
                        }
                        else
                        {
                            if(sResponse[8]==Constants.IAPPROVAL_STATUS.APPROVED || sResponse[8]==-1)
                            {
                                if(iModuleId==Constants.LEADS || iModuleId==Constants.TELELEADS)
                                    me.onSaveAndPrint(iMemberId);
                                else
                                    me.onSaveAndPrint(iTransId);

                                isMoveToBackUrl = true;
                                sResponse = null;//for new trans, response will not be available for forwarding to detailed view for save and print..so moving to back url
                            }
                            else
                            {
                                var sAlertMsg = MsgHandler.getMsg(MsgConstants.MODULE_AUTHORIZATION_PENDING_FOR_PRINTING,null,null);
                                msg.showBusinessMsg(sAlertMsg);
                            }
                        }
                    }
                    else
                        isMoveToBackUrl = true;


                    if(isMoveToBackUrl)
                    {
                        var iTimeout = 0;
                        if (home.isFrameView())
                        {
                            if (parent.clFrame.isMultipaneDisplay())
                                iTimeout = 600;
                        }

                        setTimeout(
                            function ()
                            {
                                if (isNewTrans && sResponse)
                                {
                                    //history.pushState(sURL, null, "crmhome.do");

                                    clAppBuffer.setBackUrl(null);
                                    clAppBuffer.setBackUrlResponse(null);

                                    home.handleResponse(sResponse, iStatusCode, sMsg, appValue, objReqCache);
                                }
                                else
                                    home.moveToBackUrl(true);

                            }, iTimeout);
                    }
                }

            }
            else
            {
                if (iStatusCode == MSG_BUSINESS_MESSAGE && appValue)
                {
                    var arrBusinessMsg = eval(appValue);
                    if (arrBusinessMsg["msgCode"] == MSG_ERR_DUPLICATE)
                    {
                        var iDuplicateTransId = arrBusinessMsg["dupTransId"];
                        var arrFieldIds = arrBusinessMsg["msgContent"];
                        if (arrFieldIds != null)
                        {
                            arrFieldIds = eval(arrFieldIds);
                            me.iArrDupFieldIds = arrFieldIds;

                            for (var i = 0; i < arrFieldIds.length; i++)
                            {
                                util.addClass(document.getElementById("F" + arrFieldIds[i]), "errorMsg");

                                //document.getElementById("F"+arrFieldIds[i]).style.backgroundColor="#FFECEC";
                                //document.getElementById("F"+arrFieldIds[i]).style.borderColor="red";
                            }
                        }

                        var iApiTransId = util.getAPITransId(iDuplicateTransId, iModuleId, 0);
                        var lArrCallbacks = me.getCallbackFns(document.forms["frmMaster" + iModuleId], me.EVENT_ON_DUPLICATE);
                        for (var j = 0; j < lArrCallbacks.length; j++)
                            lArrCallbacks[j](iModuleId, iApiTransId, me.iArrDupFieldIds);
                    }
                }

                if (objViewIn && objViewIn.value == Constants.MODULE_IN_DLG)
                {
                    //getDialogBox("appdlg")
                    var btnSave = parent.document.getElementById("btn_0");
                    if (btnSave)
                        parent.CLButtonUtil.enableButton(btnSave);
                }

                try
                {
                    me.invokeAfterSave(sResponse, iStatusCode, sMsg, appValue);
                }
                catch (e)
                {
                }
            }
            /*else
             alert("Save Response: "+sResponse);*/
        };



        con.sendPostRequest(me.sURL, sQueryString, handleSave, null, con.RESPONSE_HTML, null, null, null, null, ACTION_SAVE, false, objReqCache);

        return true;
    };


    this.showPaymentDlg=function()
    {
        var iModuleId = document.getElementById("moduleId").value;
        var objAmountFld = document.getElementById("F"+me.arrEzetapFields[0]);
        var objMobileNoFld = document.getElementById("F"+me.arrEzetapFields[1]);
        var objEmailFld = document.getElementById("F"+me.arrEzetapFields[2]);

        var sMobile=objMobileNoFld.value;
        var sEmail=null;
        if(objEmailFld!=null)
            sEmail=objEmailFld.value;

        //alert("pay amount "+objAmountFld.value+","+objMobileNoFld.value);//+","+objEmailFld.value);
        home.showEzeTapPaymentDlg(iModuleId, me.getTransId(), objAmountFld.value, clAppBuffer.getCompanyCode(), "moduleView.handlePaymentStatus",sEmail,sMobile,me.arrEzetapFields[4]);
    };

    this.handlePaymentStatus=function(iStatus,sMsg,sReference)
    {
        console.warn("PaymentStatus=="+iStatus+","+sMsg);
        var isTryAgain=false;
        var isDelete=false;

        if((iStatus == Constants.EZETAP_RESPONSE_STATUS.PAYMENT_REQUEST_SUCCESS) || (parseInt(iStatus) == 8600))
        {
            if(iStatus == Constants.EZETAP_RESPONSE_STATUS.PAYMENT_REQUEST_SUCCESS)
            {
                if (sReference && me.arrEzetapFields[5] != null && me.arrEzetapFields[5] > 0)
                    document.getElementById("F" + me.arrEzetapFields[5]).value = sReference;
                if(me.arrEzetapFields[6] != null && document.getElementById("F" + me.arrEzetapFields[6]))
                    getComboInstance("F" + me.arrEzetapFields[6]).setSelectedMasterId(Constants.IPaymentStatus.COMPLETE);
            }

            me.doSave("&isPaymentConfigured=1", 0, null, true);
        }
        else
        {
            if (iStatus == Constants.EZETAP_RESPONSE_STATUS.CANCEL_PAYMENT_REQUEST_SUCCESS)// pay user cancel success
            {
                // Payment request has been cancelled.
                // delete draft
                msg.showMessage(Validation.INFO_MSG,"Payment request cancelled.");

                isDelete = true;

            }
            //else if (iStatus == Constants.EZETAP_RESPONSE_STATUS.CANCEL_PAYMENT_REQUEST_FAILED)// pay user cancel failed
            //{
            //    isDelete = false;
            //}
            else // pay fail
                isTryAgain=true;

            if (isTryAgain) // pay fail
            {
                isTryAgain = window.confirm("Failed to make payment. Would you like to try again?");
                //isTryAgain=window.confirm("Payment status is not success from Ezetap ("+iStatus+"). Do you want to continue with save?");

                if (isTryAgain)
                {
                    me.showPaymentDlg();
                    //me.doSave("&isPaymentConfigured=1",0,null,true);
                }
                else
                    isDelete = true;

            }
            if (isDelete)
            {
                var sParams = "moduleId=" + me.getModuleId() + "&transId=" + me.getTransId();
                function deleteHandler() {
                    //home.moveToBackUrl(true);
                    document.getElementById("transId").value = 0;
                }
                con.sendPostRequest("module/moduleView!deleteModules.do", sParams, deleteHandler, null, false, null, null, false, true);
            }
        }
    };

    /**
     *
     * @param sResponse
     */
    this.invokeAfterSave=function(sResponse,iStatusCode,sMsg,appValue)
    {
        if(!fnArrCallbacks)
        {
            var iModuleId=0;
            if(document.getElementById("surveyModuleId")!=null)
                iModuleId=document.getElementById("surveyModuleId").value;
            else iModuleId=document.getElementById("moduleId").value;
            fnArrCallbacks=me.getCallbackFns(document.forms["frmMaster"+iModuleId],me.EVENT_AFTER_SAVE);
        }

        var iReturnStatus=0;
        if(fnArrCallbacks)
        {
            if(typeof fnArrCallbacks=="function")
                iReturnStatus=fnArrCallbacks(sResponse,iStatusCode,sMsg,appValue);
            else
            {

                for(var j=0;j < fnArrCallbacks.length; j++)
                {
                    iReturnStatus=fnArrCallbacks[j](sResponse,iStatusCode,sMsg,appValue);
                }
            }
        }
        //alert("--")
        return iReturnStatus;
    };

    this.invokeModuleCallbackFn=function(iEvtType)
    {
        //alert("beforeSave " +iEvtType)
        var arrReturnValue=null,fnArrCallbacks;
        var sUrlParams="";

        for(var i=0; i < document.forms.length; i++)
        {
            fnArrCallbacks=me.getCallbackFns(document.forms[i],iEvtType);

            if(fnArrCallbacks)
            {
                for(var j=0;j < fnArrCallbacks.length; j++)
                {
                    arrReturnValue=fnArrCallbacks[j]();
                    if(arrReturnValue)
                    {
                        var iSpecificStatus=arrReturnValue[0];
                        switch(iSpecificStatus)
                        {
                            case me.STATUS_CONTINUE:
                                break;
                            case me.STATUS_URL:
                            {
                                sUrlParams+=arrReturnValue[1];
                                break;
                            }
                            case me.STATUS_STOP_SUBMIT:
                                return [me.STATUS_STOP_SUBMIT];
                        }
                    }
                    else
                        return [me.STATUS_STOP_SUBMIT];
                }
            }
        }

        return [me.STATUS_CONTINUE,sUrlParams];
    };

    this.getCallbackFns=function(objForm,iEvtType)
    {
        var clModuleCallback=null;
        if(me.iViewId>0)
            clModuleCallback=moduleCallback.getInstance(me.iViewId);
        else if(objForm.name && objForm.getAttribute("fldPrefix")!=null)//objForm.name.indexOf("frmMaster")!=-1)
            clModuleCallback=moduleCallback.getInstance(document.getElementById(objForm.getAttribute("fldPrefix")+"moduleId").value);

        if(clModuleCallback)
        {
            switch(iEvtType)
            {
                case me.EVENT_BEFORE_SAVE:
                    return clModuleCallback.fnScriptBeforeSave;
                case me.EVENT_AFTER_SAVE:
                    return clModuleCallback.fnScriptAfterSave;
                case me.EVENT_BEFORE_NEW:
                    return clModuleCallback.fnScriptBeforeNew;
                case me.EVENT_AFTER_NEW:
                    return clModuleCallback.fnScriptAfterNew;
                case me.EVENT_BEFORE_CANCEL:
                    return clModuleCallback.fnScriptBeforeCancel;
                case me.EVENT_AFTER_CANCEL:
                    return clModuleCallback.fnScriptAfterCancel;
                case me.EVENT_ON_SAVE_AND_NEW:
                    return clModuleCallback.fnScriptOnSaveAndNew;
                case me.EVENT_ONLINE_CREATION:
                    return clModuleCallback.fnScriptOnOnlineCreation;
                case me.EVENT_ON_DUPLICATE:
                    return clModuleCallback.fnScriptOnDuplicate;
            }
        }

        return null;
    };


    this.fetchModuleData=function(iModuleId,iTransId)
    {
        if(iTransId<=0)
            return;

        var objForm,sQueryString="moduleId="+iModuleId+"&transId="+iTransId+"&";
        var sElemPrefix;


        for(var i=0; i < document.forms.length; i++)
        {
            objForm=document.forms[i];
            sElemPrefix=objForm.getAttribute("fldPrefix");

            if(objForm.name && objForm.name.indexOf("frmMaster")!=-1 &&   !objForm.getAttribute("SkipRetrieve"))
            {
                iArrElemIndexes=new Array();

                for(var j=0,sElemName=null; j < objForm.elements.length; j++)
                {
                    sElemName=objForm.elements[j].name;
//                    if(sElemName.indexOf("].value")!=-1)
                    if(sElemName.indexOf("].attr")!=-1)
                    {
                        sQueryString+=sElemName.substring(sElemPrefix.length)+"="+objForm.elements[j].value+"&";
                        iArrElemIndexes[iArrElemIndexes.length]=j;
                    }
                }
                objModuleForm=objForm;
                //alert(objForm.name+","+objForm.getAttribute("fldPrefix"))
                //sQueryString+=formData2QueryString(objForm,null,moduleView.filterInputsOnRetrieve,null);
            }
        }

        con.clearControls(document.forms["frmMaster"+iModuleId]);
        //alert(sQueryString);
        con.sendPostRequest("module/m!getFieldValues.do",sQueryString,null,"moduleView.handleFetchData");
    };

    this.handleFetchData = function(sResponse)
    {
//        alert("sResponse "+sResponse);
        var sArrModuleData=eval(sResponse);
        var objElem;

        for(var i=0,iElemIndex=0;i < iArrElemIndexes.length; i++)
        {
            iElemIndex=iArrElemIndexes[i]+1;
            objElem=objModuleForm.elements[iElemIndex];

            //writeToLog("name: "+objElem.name+",ctrlType: "+objElem.getAttribute("ctrlType")+",value: "+sArrModuleData[i]);

            switch(parseInt(objElem.getAttribute("ctrlType")))
            {
                //TODO: need to handle general master data setting
                case Constants.CONTROLTYPE_RADIOBUTTON:
                case Constants.CONTROLTYPE_CHECKBOX:
                {
                    objElem.checked=(sArrModuleData[i]>0);
                    break;
                }
                case Constants.CONTROLTYPE_COMBOBOX:
                case Constants.CONTROLTYPE_OPTIONCTRL:
                {
                    getComboInstance(objElem.id).checkAndAddItem(sArrModuleData[i],true);
                    break;
                }
                default:
                {
                    objElem.value=sArrModuleData[i];
                }
            }
        }
//        alert("sArrModuleData222222  "+sArrModuleData)
    };

    this.filterInputsOnRetrieve=function(sElemId, sElemName, sElemValue, formElem)
    {
        if(sElemName.indexOf("].attr")!=-1)
            return 0; //Including current element(with value fieldid and tableid) in query string
        return 1; //we need to return no. of elements to skip.
    };


    this.selectComboItem=function(sComboId,iStatus,sComboItem)
    {
        //alert(sComboId+","+iStatus+","+sComboItem);
        if(iStatus==Constants.OK)
        {

            getComboInstance(sComboId).checkAndAddItem(sComboItem,true);

            var clComboElement=document.getElementById(sComboId);
            clComboElement.setAttribute(Constants.COMBO_ATTR_SYSVAL,1);// to indicate value has been set programmatically not by user
            clComboElement.focus();
        }
    };
    //mandatory array index values [sFieldName,sLabel,iControlType,iDataType]
    this.markAsMandatory=function(sFieldId,sComboName,sLabel,sFormName,byValidationType,isBodyField,iRuleId)
    {
        if(sComboName && document.getElementById(sComboName))
            sFieldId=sComboName;
        if(iRuleId==null)
            arrMandatoryFields[arrMandatoryFields.length]=[sFieldId,sLabel,sFormName,byValidationType,isBodyField];
        else
            arrOtherValidations[arrOtherValidations.length]=[sFieldId,sLabel,sFormName,byValidationType,isBodyField,iRuleId];
    };

    /**
     * Invoked from rule evaluation function for making any field as mandatory
     * @param sFieldId
     * @param sComboName
     * @param sLabel
     * @param iRuleId
     */
    this.addValidation=function(sFieldId,sComboName,sLabel,iRuleId)
    {
        this.markAsMandatory(sFieldId,sComboName,sLabel,null,0,false,iRuleId);
    };

    /**
     * Invoked from rule evaluation function for making any field as normal
     * @param iRuleId
     */
    this.removeValidation=function(iRuleId)
    {
        var iLength=arrOtherValidations.length;
        //alert("remove "+arrOtherValidations.length)
        for(var i=0; i < iLength; i++)
        {
            var sArrValues=arrOtherValidations[i];
            //alert(iRuleId+"--------------"+sArrValues[sArrValues.length-1])

            if(sArrValues[sArrValues.length-1]==iRuleId)
            {
                arrOtherValidations.splice(i,1);
                iLength--;
                i--;
            }
            Validation.clearMessage(document.getElementById(sArrValues[0]),false);
        }
        //alert("remove222  "+arrOtherValidations.length)
    };

    this.checkValueRange=function(elemInput,iMinValue,iMaxValue)
    {

    };


    this.checkNoOfDecimals=function(elemInput,iNoOfDecimals)
    {

    };

    this.clearBannerText=function(elemInput)
    {
        if(util.hasClass(elemInput,"bannerText"))
        {
            elemInput.value="";
            util.removeClass(elemInput,"bannerText");
        }
    };

    this.showBannerText=function(elemInput)
    {
        if(elemInput.value=="")
        {
            elemInput.value=elemInput.getAttribute("bannerText");
            util.addClass(elemInput,"bannerText");
        }
    };


    /**Function is used for closing quick create dlg
     * */
    /*this.hideQuickCreate = function()
     {
     parent.getDialogBox("dlg").hide();
     };*/

    /**Function is used for save quick create flelds and close the dlg
     * */
    /*this.onClkSaveQuickCreate = function()
     {
     moduleView.saveModuleDetails(moduleView.hideQuickCreate);
     };*/

    this.onClkAddRow=function(sTableId,objAdd,e)
    {
        e = cross.getEvent(e);

        if(objAdd != null)
        {
            if(util.hasClass(objAdd,"clsDisabledActions"))
                return;
        }

        var clTable=new sTable(sTableId);
        var iRowIndex;

        clTable.addRow();
        iRowIndex = clTable.getRowCount(true) - 1;

        /*var iFreezeColIndex = 0;
        for (var i = 0; i < moduleBody.arrBodyTableIds.length; i++)
        {
            if (moduleBody.arrBodyTableIds[i][0] == sTableId)
            {
                iFreezeColIndex = moduleBody.arrBodyTableIds[i][2];
                break;
            }
        }
        if(iFreezeColIndex > 0)
            $('#'+sTableId).tableHeadFixer({head:true,left: iFreezeColIndex,top : 0,'z-index': 9});*/
        me.handleFreezeColumnOnAddrow(sTableId);
        me.updateRowProperties(clTable,sTableId,iRowIndex);

    };

    this.handleFreezeColumnOnAddrow = function(sTableId)
    {
        var iFreezeColIndex = 0;
        for (var i = 0; i < moduleBody.arrBodyTableIds.length; i++)
        {
            if (moduleBody.arrBodyTableIds[i][0] == sTableId)
            {
                iFreezeColIndex = moduleBody.arrBodyTableIds[i][2];
                break;
            }
        }
        if(iFreezeColIndex > 0)
            $('#'+sTableId).tableHeadFixer({head:true,left: iFreezeColIndex,top : 0,'z-index': 9});
    };

    this.updateRowProperties=function(clTable,sTableId,iRowIndex)
    {
        var iColCount=clTable.getColCount();
        for(var iColIndex=0; iColIndex < iColCount; iColIndex++)
        {
            var objInput=clTable.getElementAt(iRowIndex,iColIndex);
            var iDisplayType=objInput.getAttribute("dispType");
            if(iDisplayType!=null)
            {
                if(iDisplayType==Constants.DISPLAYTYPE_READONLY)
                    objInput.disabled=true;
                else if(objInput.getAttribute("disabled")!=null)
                    objInput.removeAttribute("disabled");
            }
            var sDStyleAttr=objInput.getAttribute("dstyle");
            if(sDStyleAttr!=null)
            {
                var arrAttributes= sDStyleAttr.split(";");
                for(var i=0;i<arrAttributes.length-1;i++)
                {
                    var arrProperty=arrAttributes[i].split(":");
                    var sProperty=arrProperty[0];
                    objInput.style.sProperty="";
                    objInput.style.removeProperty(sProperty);
                }

                objInput.removeAttribute("dstyle");
            }


            var sFieldName=objInput.name;
            if(sFieldName && sFieldName.indexOf(".r[")!=-1)
            {
                var sFieldId=objInput.id;
                sFieldId = sFieldId.substring(0, sFieldId.indexOf("["));
                if (objInput.getAttribute("x" + sFieldId) != null)
                    objInput.removeAttribute("x" + sFieldId);
            }
        }

        var iRowCount = clTable.getRowCount();
        if(iRowCount > 10)
        {
            document.getElementById(sTableId).parentNode.style.height="400px";
        }
        if (me.onAddRowHandler) {
            var args = [];
            if (me.onAddRowHandlerArgs) {
                for (var i = 0; i < me.onAddRowHandlerArgs.length; i++)
                    args[args.length] = me.onAddRowHandlerArgs[i];
            }
            cross.callFunction(window, eval(me.onAddRowHandler), args);
        }
    };

    this.onClkInsertRow=function(sTableId,objInsertRow,e)
    {
        if(objInsertRow != null)
        {
            if(util.hasClass(objInsertRow,"clsDisabledActions"))
                return;
        }

        var clTable=sTable.getInstance(sTableId);
        var iRowIndex = clTable.getCurrentRow();

        if(iRowIndex > 0)
            clTable.addRow(iRowIndex);
        //else
        //    clTable.addRow();

        me.updateRowProperties(clTable,sTableId,iRowIndex);
    };


    this.onClkDeleteRow=function(sTableId,iBodyFieldsIndex,sFldPrefix,e,objDelete)
    {
        //alert("onClkAddRow");
        if(objDelete != null && util.hasClass(objDelete,"clsDisabledActions"))
            return;

        var clTable = new sTable(sTableId);
        var iCurrentRow = clTable.getCurrentRow();

        if(iCurrentRow >= 0 && window.confirm(MsgHandler.getMsg(MsgConstants.ROW_DELETE_CONFIRM,null,null)))
        {
            if (me.onBeforeDeleteRowHandler)
            {
                var args = [];
                if (me.onBeforeDeleteRowHandlerArgs)
                {
                    for (var i = 0; i < me.onBeforeDeleteRowHandlerArgs.length; i++)
                        args[args.length] = me.onBeforeDeleteRowHandlerArgs[i];
                }
                args[args.length] = iCurrentRow;
                cross.callFunction(window, eval(me.onBeforeDeleteRowHandler), args);
                /**/
            }
            else
            {
                me.deleteBodyRow(sTableId, 0, iCurrentRow, iBodyFieldsIndex, sFldPrefix);
            }
        }
    };

    this.deleteBodyRow=function(sTableId, iBodyTableId,iRowIndex, iBodyFieldsIndex, sFldPrefix,e)
    {
        me.deleteBodyRows(sTableId, iBodyTableId,iRowIndex, iBodyFieldsIndex, sFldPrefix,false,e);
    };


    this.deleteBodyRows=function(sTableId, iBodyTableId,iRowIndex,iBodyFieldsIndex, sFldPrefix,isDeleteAllRows,e)
    {
        var isReturn=true;

        if(iBodyTableId > 0 && (!iBodyFieldsIndex || iBodyFieldsIndex < 0))
        {
            var objBodyTableInfo = document.getElementById("B"+iBodyTableId);
            iBodyFieldsIndex = objBodyTableInfo.getAttribute("fieldIndex");
            sFldPrefix = objBodyTableInfo.getAttribute("fieldPrefix");
        }

        if (me.onDeleteRowHandler)
        {
            var args = [];
            if (me.onDeleteRowHandlerArgs)
            {
                for (var i = 0; i < me.onDeleteRowHandlerArgs.length; i++)
                    args[args.length] = me.onDeleteRowHandlerArgs[i];
            }
            isReturn=cross.callFunction(window, eval(me.onDeleteRowHandler), args);
        }

        if(isReturn || isReturn==undefined || isReturn==null)
        {
            var clTable = new sTable(sTableId);
            var iRowCount;
            if(isDeleteAllRows)
            {
                iRowCount = clTable.getRowCount(true);
                iRowIndex = iRowCount - 1;
            }
            else
                iRowCount = iRowIndex + 1;


            while(iRowIndex >= 0)
            {
                var iBodyId = clTable.getValueAt(iRowIndex, 1);

                if (document.getElementById("transId").value > 0 && iBodyId > 0)
                {
                    //var iBodyId=document.getElementById(sFldPrefix+"b["+iBodyFieldsIndex+"].r["+iRowIndex+"].bodyId").value;
                    var iIndex;

                    if (!iArrDelBodyIds)
                        iArrDelBodyIds = [];

                    iIndex = iArrDelBodyIds.length;
                    iArrDelBodyIds[iIndex] = [sFldPrefix, iBodyFieldsIndex, iBodyId]; //"b["+iBodyFieldsIndex+"].delBodyIds"
                }

                //alert(iArrDelBodyIds)
                var objCurrentRow = clTable.getRow(iRowIndex);
                clTable.deleteRow(iRowIndex, false, true);



                if(isDeleteAllRows)
                {
                    iRowIndex--;
                    if(iRowIndex < 0)
                        break;
                }
                else
                    break;

            }


            try
            {
                if (!window.event && e) //firefox evt issue
                    window.event = e;

                if(isDeleteAllRows)
                    formula.handleRowDelete(objCurrentRow, 0);
                else
                    formula.handleRowDelete(objCurrentRow, iRowIndex);

            }
            catch (e)
            {
                console.warn(e.message + "===" + e.stack);
            }



            var iRowCount = clTable.getRowCount();
            if(iRowCount <= 10)
            {
                document.getElementById(sTableId).parentNode.style.height="";
            }
        }

        if (me.onDeleteRowAfterHandler)
        {
            var args = [];
            if (me.onDeleteRowAfterHandlerArgs)
            {
                for (var i = 0; i < me.onDeleteRowAfterHandlerArgs.length; i++)
                    args[args.length] = me.onDeleteRowAfterHandlerArgs[i];
            }
            isReturn=cross.callFunction(window, eval(me.onDeleteRowAfterHandler), args);
        }

    };



    this.toLowerCase=function(elemInput)
    {
        elemInput.value=elemInput.value.toLowerCase();
    };

    this.toUpperCase=function(elemInput)
    {
        elemInput.value=elemInput.value.toUpperCase();
    };

    this.toProperSentence = function(elemInput)
    {
        var sValue = elemInput.value;
        sValue = sValue.toLowerCase().split('.');
        for (var i = 0; i < sValue.length; i++) {
            sValue[i] = util.trim(sValue[i]).charAt(0).toUpperCase() + util.trim(sValue[i]).slice(1);
        }
        elemInput.value = sValue.join('. ');
    };

    this.toTitleCase = function(elemInput)
    {
        var str = elemInput.value;
        str = str.replace(/([.]*[^\W_]+[^\s-]*) */g, function (txt)
        {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
        elemInput.value = str;
    };

    function getMapLocationText(sTableId)
    {
        var objTable=document.getElementById(sTableId);

        var arrInputs=objTable.getElementsByTagName("TEXTAREA");
        var sSearchAddr1="";


        for(var i=0; i < arrInputs.length; i++)
        {
            sSearchAddr1+=arrInputs[i].value+" ";
        }

        var sSearchAddr2="";
        arrInputs=objTable.getElementsByTagName("INPUT");

        for(var i=0; i < arrInputs.length; i++)
        {
            if(arrInputs[i].type=="text")
                sSearchAddr2+=arrInputs[i].value+" ";
        }

        sSearchAddr2=util.trim(sSearchAddr2);
        return [sSearchAddr1,sSearchAddr2];
    }

    this.viewMap=function(sTableId)
    {
        var arrActions = new Array();
        arrActions[0] = MsgHandler.getMsg(MsgConstants.OK)+"|moduleView.onClkHideDlg();"; //3rd param onwards===attributes

        var sLocation=getMapLocationText(sTableId);
        if(sLocation)
        {
            //            window.open("https://maps.google.com/maps?q="+escape(sSearchText));

            //get google maps using gps coordinates  https://maps.google.com/?output=embed&q=34.052222,-118.243611
//            var sUrl="http://maps.google.com/maps?output=embed&q="+escape(sSearchText);
            var sUrl= con.getStruts2Url("module","moduleView","getViewMap",null);
            sUrl+="mapAddress="+escape(sLocation);
//            alert(sUrl)
            var dlgSearchMap=new DialogBox("clSearchMapDlg", MsgHandler.getMsg(MsgConstants.MAP),80,50,700,520,sUrl,false,"frmMaster",false,true,arrActions);
            dlgSearchMap.setCenter();
            dlgSearchMap.show();
        }
    };

    this.onClkHideDlg = function()
    {
        var dlgSearchMap = new DialogBox("clSearchMapDlg");
        dlgSearchMap.hide();
    };

    this.onSaveAndPrint = function(iTransId)
    {
        window.scrollTo(0,0);

        var sURL = "module/moduleView!getPrintLayoutSelection.do?moduleId="+document.getElementById("moduleId").value+"&transId="+iTransId+"&saveAndPrint=1";
        var arrActions = new Array();
        var sMethod = "clPrintLayoutSelection.onClkPrint";
        arrActions[0] = MsgHandler.getMsg(MsgConstants.PRINT) + "|" + sMethod;
        arrActions[1] = MsgHandler.getMsg(MsgConstants.CLOSE) + "|";
        var printLayoutDlg = new DialogBox("layoutdlg",MsgHandler.getMsg(MsgConstants.SELECT_LAYOUT),140, 160, 330, 185,sURL,false,null,false,true, arrActions);
        printLayoutDlg.setCenter();
        printLayoutDlg.show();

    };

    this.onSaveAndNew=function(sResponse)
    {
        sResponse = eval(sResponse);
        var objForm=document.forms["frmMaster"+document.getElementById("moduleId").value];
        if(sResponse[0]==MSG_SUCCESS)
        {
            con.clearControls(objForm,false,true);
            moduleRules.clear();
            moduleView.init();

            if(sResponse[4]!=null)
            {
                var iArrIncrFieldIds=sResponse[4];
                var sArrIncrFieldValues=sResponse[5];

                for(var i=0; i < iArrIncrFieldIds.length; i++)
                {
//                    alert(iArrIncrFieldIds[i]+"---"+sArrIncrFieldValues[i]);
                    document.getElementById("F"+iArrIncrFieldIds[i]).value=sArrIncrFieldValues[i];
                }
            }

            fnArrCallbacks=me.getCallbackFns(objForm,me.EVENT_ON_SAVE_AND_NEW);
            for(var j=0;j < fnArrCallbacks.length; j++)
                fnArrCallbacks[j](sResponse);

            if(moduleBody.arrBodyTableIds)
                this.updateTableSequences();
        }
        else
            alert("save status: "+sResponse[0]);
    };

    this.updateTableSequences = function()
    {
        var arrTableIds = moduleBody.arrBodyTableIds;
        if(arrTableIds && arrTableIds!=null)
        {
            for (var i = 0; i < arrTableIds.length; i++)
            {
                var clTable = new sTable(arrTableIds[i][0]);
                clTable.setCurrentRow(0);
                clTable.updateRowSequence();
            }
        }
    };

    this.clear=function()
    {
        arrMandatoryFields=[];
        arrOtherValidations=[];
        fnArrCallbacks=null;
    };

    /**
     * Lookup image handler function
     * @param iModuleId
     * @param sComboId
     */
    this.showLookUp=function(iModuleId,sComboId)
    {
        var objCombobox=document.getElementById(sComboId);
        if(objCombobox && (!objCombobox.disabled && !objCombobox.getAttribute("readonly") && objCombobox.getAttribute("readonly")!="true"))
        {
            var iBaseModuleId=document.getElementById("moduleId").value;
            var sQuickCreateParams="&baseModuleId="+iBaseModuleId;

            if(iModuleId==Constants.CONTACTS)
            {
                var iAccSeqId=me.getModuleTransId(Constants.ACCOUNTS);
                sQuickCreateParams="&accountId="+iAccSeqId;
            }

            moduleView.onClkGetLookUpDlg(iModuleId,moduleView.selectComboItem,false,sComboId,sQuickCreateParams);
        }
    };


    /**
     * Lookup image handler function
     * @param iModuleId
     * @param sComboId
     */
    me.sComboId = null;
    this.showNewModule=function(iModuleId,sComboId,sRelTypeFldId,e)
    {
        if(iModuleId==0 && sRelTypeFldId)
            iModuleId=getComboInstance(sRelTypeFldId).getSelectedId();

        if(iModuleId>0 && !document.getElementById(sComboId).disabled)
        {
            me.sComboId = sComboId;
            var sUrlParams="";
            if(iModuleId==Constants.CONTACTS)
            {
                var iAccSeqId=me.getModuleTransId(Constants.ACCOUNTS);
                sUrlParams="&accountId="+iAccSeqId;

            }

            if(getComboInstance(sComboId).getSelectionType()==1)//is group
                sUrlParams+="&bGroup=true";

            var iBaseModuleId=document.getElementById("moduleId").value;


            var fnArrCallbacks=me.getCallbackFns(document.forms["frmMaster"+iBaseModuleId],me.EVENT_ONLINE_CREATION);

            if(fnArrCallbacks!=null && fnArrCallbacks.length>0)
                fnArrCallbacks[0](iModuleId,moduleView.selectComboItem,[sComboId],sUrlParams,iBaseModuleId);
            else
                me.showModuleOnlineCreate(iModuleId,moduleView.selectComboItem,[sComboId],sUrlParams,iBaseModuleId);
        }
        if(e) {
            cross.cancelBubble(e);
        }
    };

    this.fnCallBack = null;
    this.args = null;
    this.showModuleOnlineCreate=function(iModuleId,fnCallBack,arrCallBackArgs,sUrlParams,iBaseModuleId,isEdit,iTransId)
    {
        var sUrl;//,sTitle,iModuleId;
        me.fnCallBack = fnCallBack;
        me.args = arrCallBackArgs;
        sUrl = home.getModuleCreateUrl()+"?moduleId="+iModuleId+"&viewIn="+Constants.MODULE_IN_DLG;
        var sTitle="";
        if(isEdit)
        {
            sTitle=MsgHandler.getMsg(MsgConstants.EDIT);
            sUrl+="&transId="+iTransId;
            sUrl+="&sFnSaveCallback=parent.moduleView.fnSaveCallBack";
        }
        else
        {
            sTitle=MsgHandler.getMsg(MsgConstants.NEW);
            sUrl+="&byAction="+Constants.NEW;
            sUrl+="&isOnlineCreate=1";
            sUrl+="&sFnSaveCallback=parent.moduleView.getModuleComboLine";
        }

        sTitle+=" "+clAppBuffer.getModuleCaption(iModuleId,true);
        sUrl+="&baseModuleId="+iBaseModuleId;

        if(sUrlParams)
            sUrl+=sUrlParams;
        app.showPopUp(sUrl, sTitle, 810, 500, null);

    };

    this.getMasterFieldValues = function(iMasterTypeIds)
    {
        var iValues=[];
        var iMasterValue;
        var sArrFieldIds;

        for(var i=0; i < iMasterTypeIds.length; i++)
        {
            iMasterValue=0;
            sArrFieldIds = formula.sMasterFldIds[iMasterTypeIds[i]];//-Constants.ACCOUNTS];
            if(sArrFieldIds)
            {
                var objCombo = getComboInstance(sArrFieldIds[0]);
                if(objCombo)
                    iMasterValue = objCombo.getSelectedId();
            }

            iValues[i]=iMasterValue;
        }

        return iValues;
    };

    this.setLinkMasterValuesFromParent=function()
    {
        var iArrLinkMasterIds = formula.getAllServerModuleIds();//-Constants.ACCOUNTS];
        var iArrLinkMasterValues = parent.moduleView.getMasterFieldValues(iArrLinkMasterIds);

        for(var i=0; i < iArrLinkMasterIds.length; i++)
        {
            if(iArrLinkMasterIds[i]!=Constants.USERS && iArrLinkMasterValues[i] > 0)
            {
                var sArrFieldIds = formula.sMasterFldIds[iArrLinkMasterIds[i]];//-Constants.ACCOUNTS];
                getComboInstance(sArrFieldIds[0]).searchAndAddItem(null,true,null,true,iArrLinkMasterValues[i],false,true);
            }
        }

    };

    this.getModuleComboLine = function(arrParams)
    {
        arrParams = eval(arrParams);
        var sUrl = home.getComboLineUrl()+"?moduleId="+getComboInstance(me.sComboId).getMasterType()+"&transId="+arrParams[1];
        con.sendPostRequest(sUrl,null, null, "moduleView.fnSaveCallBack", false);
    };
    this.fnSaveCallBack = function(sResponse,iStatusCode)
    {
        try
        {
            eval(me.fnCallBack)(me.sComboId,Constants.OK,sResponse);
            /*if(me.fnCallBack != undefined || me.fnCallBack != null)
             {
             var newArgs = new Array();
             if(me.args!=undefined && me.args.length>0)
             {
             for (var i = 0; i < me.args.length; i++)
             newArgs.push(me.args[i]);
             }
             newArgs.push(Constants.OK);
             newArgs.push(sResponse);
             cross.callFunction(window,eval(me.fnCallBack),newArgs);
             }*/
        }
        catch(e)
        {
            console.error(e);
        }


        //getDialogBox("dlg").hide();
    };

    /**
     * This function returns value of a given field. For combobox it will return selected itemtext
     * @param sFieldId
     */
    this.getFieldValueAsString=function(sFieldId)
    {
        var objField=me.getElementByFieldId(sFieldId);
        var iDataType=objField.getAttribute("datatype");
        var iCtrlType=objField.getAttribute("ctrltype");

        if(iCtrlType==Constants.CONTROLTYPE_COMBOBOX
            || iCtrlType == Constants.CONTROLTYPE_OPTIONCTRL
            || iDataType==Constants.DATATYPE_MASTER)
        {

            if(iDataType==Constants.DATATYPE_STRINGLIST)
                return getComboInstance(sFieldId).getSelectedMasterName();
            else
            {
                //alert(sFieldId+"---"+getComboInstance(sFieldId).getSelectedMasterName())
                var iSeqId = getComboInstance(sFieldId).getSelectedId();
                if (iSeqId >= 0)
                    return iSeqId;
                else
                    return "";
                //return getComboInstance(sFieldId).getSelectedMasterName();
            }
        }
        else
        {
            //alert(sFieldId+"-3333333--"+getComboInstance(sFieldId).getSelectedMasterName())
            if(iCtrlType == Constants.CONTROLTYPE_RADIOBUTTON)
            {
                var i=1;
                var sFldId=objField.id;
                while(objField)
                {
                    if(objField.checked)
                        return objField.value;

                    objField=document.getElementById(sFldId+"_"+i);
                    i++;
                }
                return 0;
            }
            if(iDataType==Constants.DATATYPE_FRACTION
                || iDataType==Constants.DATATYPE_NUMBER || iDataType==Constants.DATATYPE_BIGNUMBER)
            {
                var sValue=objField.value;
                if(sValue.indexOf(",")!=-1)
                    sValue=util.replaceAll(sValue,",","");
                return sValue;
            }
            else if(iDataType==Constants.DATATYPE_DOCVIEWER)
            {
                return document.getElementById("fileName_"+objField.id).innerText;
            }
            else if(iDataType==Constants.DATATYPE_BOOLEAN)
            {
                if(objField.checked)
                    return 1;
                else
                    return 0;
            }
            else
                return objField.value;
        }
    };



    this.addReadOnlyField=function(sFieldId)
    {
        if(me.iArrReadOnlyFields==null)
            me.iArrReadOnlyFields=[];

        me.iArrReadOnlyFields[me.iArrReadOnlyFields.length]=sFieldId;
    };

    this.setFieldValueAsAttr = function (objField,sValue,isSetFieldValueAsAttr)
    {
        var isDisabled=objField.getAttribute("disabled")!=null;
        var sFieldId=objField.id;
        if(sFieldId.indexOf("[")!=-1)
            sFieldId=sFieldId.substring(0, sFieldId.indexOf("["));

        var sAttr="x"+sFieldId;
        var iCtrlType=objField.getAttribute("ctrltype");
        var isCombo=iCtrlType == Constants.CONTROLTYPE_COMBOBOX
                    || iCtrlType == Constants.CONTROLTYPE_OPTIONCTRL
                    || (objField.getAttribute("datatype") == Constants.DATATYPE_MASTER && iCtrlType!=Constants.CONTROLTYPE_MULTI_SELECT);

        if(isSetFieldValueAsAttr)
        {
            if (isCombo)
            {
                sValue = getComboInstance(objField.id).getSelectedId();
                if(sValue)      /// todo  For disabled Fields
                    sValue=parseInt(sValue);
                if(sValue<=0)
                    sValue=null;

            }
            else
                sValue = objField.value;
        }


        if(objField.getAttribute(sAttr)!=null)
            objField.removeAttribute(sAttr);

        if(isDisabled && sValue)
            objField.setAttribute(sAttr,util.encryptString(sValue));

    };


    /**
     * This function is used to set the value of a field. It will select the combobox item based on the item text
     * @param sFieldId
     * @param sValue
     */
    this.setFieldValueAsString=function(sFieldId,sValue,isIgnoreTargetFormula,iComboType,isDoNotPickerFromServer,sSrcField)
    {
        if(me.sFieldStack && me.sFieldStack[sFieldId]!=null)//returning if setting value to src element
        {
            console.log("returning for recursive call "+sFieldId+","+sSrcField);
            return false;
        }

        console.log(sSrcField+","+sFieldId+"===="+sValue);

        if(sSrcField!=null)
        {
            if(me.sFieldStack==null)
            {
                me.sFieldStack={};
                me.sStartingField=sSrcField;
            }

            var arrFldIds=me.sFieldStack[sSrcField];
            if(!arrFldIds)
                arrFldIds=[];

            arrFldIds[arrFldIds.length] = sFieldId;
            me.sFieldStack[sSrcField] = arrFldIds;

            console.log(JSON.stringify(me.sFieldStack)+"====");
        }



        var objField=document.getElementById(sFieldId);
        var iDataType=objField.getAttribute("datatype");
        var iCtrlType=objField.getAttribute("ctrltype");
        var bReturn=false;

        console.log("setFieldValueAsString=="+sFieldId+","+sValue);

        if(iCtrlType==Constants.CONTROLTYPE_COMBOBOX || iCtrlType == Constants.CONTROLTYPE_OPTIONCTRL
            || (iDataType == Constants.DATATYPE_MASTER && iCtrlType!=Constants.CONTROLTYPE_MULTI_SELECT))
        {
            var objCombo=getComboInstance(sFieldId);

            if(sValue && isNaN(sValue) && sValue.indexOf("|cbval|")!=-1) //combo value
                sValue=sValue.substring(sValue.indexOf("|cbval|")+7);

            if(objField.getAttribute("mastertype")==0 || objField.getAttribute("mastertype")==Genernal_StaticValues)
            {
                if(!iComboType)
                    iComboType=0;

                if(sValue>0 || iDataType == Constants.DATATYPE_NUMBERLIST)
                {
                    bReturn=objCombo.setSelectedMasterId(sValue);
                    var elemSal = document.getElementById("spSalutation_"+sFieldId)
                    if(elemSal!=null && objCombo.getSelectedIndex()>0)
                    {
                        elemSal.children[0].setAttribute("selValue",1);
                        elemSal.children[0].value =  objCombo.getSelectedItem();
                    }

                    if(sValue==null)// || sValue=="0") //commented to allow selection of number list field with 0 value
                        objCombo.setSelectedIndex(-1);
                }
                else if(sValue!=null && isNaN(sValue))
                {
                    bReturn=objCombo.setSelectedKey(sValue);
                }
                else
                    objCombo.setSelectedIndex(-1);
                //getComboInstance(sFieldId).setSelectedKey(sValue);
            }
            else
            {
                if(objField.getAttribute("mastertype")==Genernal_Master)
                {
                    bReturn=objCombo.checkAndAddItem(sValue,true);
                }
                else
                {
                    /*  if(iComboType==1)
                     {
                     var arrComboItems =objCombo.getComboItems();
                     var arrScombos= arrComboItems[0];
                     var iArrCombos = arrComboItems[1];
                     for(var i=0;i<arrScombos.length;i++)
                     {
                     if(arrScombos[i]==util.trim(sValue))
                     objCombo.checkAndAddItem(sValue+"|"+iArrCombos[i],true);
                     }
                     if(objCombo.getSelectedId()<=0)
                     return false;
                     else
                     return true;
                     }

                     else*/
                    var iMasterId=0;

                    if(sValue!=null)
                    {
                        if (isNaN(sValue) && sValue.indexOf("|") != -1)
                            iMasterId = sValue.substring(sValue.lastIndexOf("|") + 1);
                        else
                        {
                            iMasterId = sValue;
                            sValue=null;
                        }

                    }

                    if(sValue==null && iMasterId <= 0)
                        objCombo.setSelectedIndex(-1);
                    else
                    {
                        if (isDoNotPickerFromServer)
                        {
                            objCombo.setSelectedMasterId(iMasterId);
                        }
                        else
                        {
                            var isPickerFromServer = true;
                            if (sValue == null && iMasterId == 0)
                                isPickerFromServer = false;
                            objCombo.searchAndAddItem(sValue, true, sFieldId, isPickerFromServer, iMasterId, true);
                        }
                    }

                    if(objCombo.getSelectedId()<=0)
                        bReturn=false;
                    else //if(!isIgnoreTargetFormula)
                    {
                        //formula.getServerVarValue(objField,null);
                        bReturn=true;
                    }
                }
            }



            var event = null;
            try
            {
                event = new Event("blur");
            }
            catch(error)
            {
                event = document.createEvent("Event");
                event.initEvent("blur", true, true);
            }


            objField.dispatchEvent(event);
            //objCombo.onBlurHandler(e);

            /*alert(objCombo.getSelectedId() )
             alert(objCombo.getSelectedIndex() )*/
            //}
            //getComboInstance(sFieldId).setSelectedKey(sValue);
        }
        else if(iCtrlType==Constants.CONTROLTYPE_MULTI_SELECT)
        {
            var arrMultiComboItems;
            clMultiCombo.removeAllItems(sFieldId);
            if(sValue!=null && sValue!="")
            {
                if(typeof(sValue)=="string")
                    arrMultiComboItems = eval(sValue);
                else
                    arrMultiComboItems =sValue;

                for (var i = 0; i < arrMultiComboItems.length; i++)
                {
                    var sItem=arrMultiComboItems[i].split("|");
                    clMultiCombo.addItem(sFieldId, null, true, sItem[1], sItem[0]);
                }
            }

        }
        else if(iDataType == Constants.DATATYPE_DOCVIEWER || iDataType == Constants.DATATYPE_PICTURE|| iCtrlType == Constants.CONTROLTYPE_SIGNATURE)
        {
            var sDocumentURL=null;
            if(sValue)
            {
                if (sValue.indexOf("|") != -1)
                {
                    sDocumentURL = sValue.substring(0, sValue.indexOf("|"));
                    sValue = sValue.substring(sValue.indexOf("|") + 1);

                    var sArrValues = sValue.split("|");
                    var sDisplayName = sArrValues[3];


                    /*sDocumentURL = sValue.substring(0, sValue.indexOf("|"));
                     var sDisplayName = sValue.substring(sValue.lastIndexOf("|") + 1);
                     sValue = sValue.substring(sValue.indexOf("|") + 1);*/
                }
                else
                    sDocumentURL = sValue;
            }
            if(sDocumentURL!=null && sDocumentURL.indexOf("fileCopy")!=-1)
            {
                var sUploadFieldId = sFieldId.substring(1);
                var imgPreview = document.getElementById("preview_F" + sUploadFieldId);
                if(sDocumentURL.indexOf("fieldId") == -1)
                    sDocumentURL += "&fieldId="+sUploadFieldId;
                if(!imgPreview) {
                    con.sendGetRequest(sDocumentURL);
                }
            }
            clHTML5Upload.setAttachment(sFieldId, sDocumentURL, sValue,sDisplayName);
        }
        else if(sValue && isNaN(sValue) && sValue.indexOf("|cbval|")!=-1) //combo value
        {
            sValue=sValue.substring(sValue.indexOf("|cbval|")+7);
            objField.value=sValue.substring(0,sValue.indexOf("|"));
        }
        else
        {
            if(iCtrlType==Constants.CONTROLTYPE_CHECKBOX)
            {
                if(sValue=="1")
                    objField.checked = true;
                else if(sValue=="0" || sValue==null)
                    objField.checked = false;
            }
            else if(iCtrlType==Constants.CONTROLTYPE_RADIOBUTTON || iCtrlType==Constants.CONTROLTYPE_RADIO_WITH_IMAGE) {
                if (sValue != null) {

                var sRadioBtnFieldId = objField.id;
                var iCount = 1;
                while (objField) {
                    if (objField.value == sValue) {
                        objField.checked = true;
                        break;
                    }
                    objField = document.getElementById(sRadioBtnFieldId + "_" + iCount);
                    iCount++;
                }
               }
            }
            else if(iDataType==Constants.DATATYPE_NUMBER || iDataType==Constants.DATATYPE_BIGNUMBER || iDataType==Constants.DATATYPE_FRACTION)
            {
                sValue=util.formatNumberToString(sValue);
            }


            if(iCtrlType==Constants.CONTROLTYPE_DATEPICKER && (!sValue || sValue==0))
            {
                objField.value="";
            }
            else
            {
                if(sValue && isNaN(sValue) && sValue.indexOf("<br/>")!=-1)
                    sValue=util.replaceAll(sValue,"<br/>","\n");
                else if(sValue==null)
                    sValue="";
                objField.value = sValue;
            }
        }

        me.setFieldValueAsAttr(objField,null,true);

        return bReturn;
    };

    this.clearFieldStack=function(sSrcFieldId)
    {
        if(sSrcFieldId==me.sStartingField)
        {
            me.sFieldStack=null;
            me.sStartingField=null;
        }
    };

    this.setFieldDisplay=function(objField,isHide)
    {
        var objCaptionField=moduleView.getCaptionField(objField);
        if(!objCaptionField)
            return;

        var objLookupTd=objCaptionField.parentNode.nextSibling.nextSibling;
        var sDisplay;
        if(isHide)
            sDisplay="none";
        else
            sDisplay="";

        if (objField.getAttribute("ctrltype") == Constants.CONTROLTYPE_RADIOBUTTON || objField.getAttribute("ctrltype") == Constants.CONTROLTYPE_RADIO_WITH_IMAGE)
        {
            toggleRadioButtons(objField.id, !isHide);
        }
        else if (objField.getAttribute("ctrltype") == Constants.CONTROLTYPE_TIMEPICKER)
            clTime.showOrHideTimePicker(objField.id,!isHide);
        else
        {
            objField.style.display = sDisplay;
            var objTD = objField.parentNode;
            objTD.style.display = sDisplay;
        }

        objCaptionField.parentNode.style.display = sDisplay;
        objCaptionField.style.display = sDisplay;

        //objTD.previousSibling.style.display="none";
        //if(objTD.nextSibling)
        if (objLookupTd)
            objLookupTd.style.display = sDisplay;

        if(isHide)
        {
            me.hideFieldRowIfEmpty(objField);
        }
        else
        {
            me.displayFieldRow(objField);
        }
    };

    function toggleRadioButtons(sFieldId,isDisplay)
    {
        var sDisplayStyle="";
        if(!isDisplay)
            sDisplayStyle="none";
        var arrRadioButtonFields=moduleView.getRadioButtonFields(sFieldId);
        for(var i=0; i < arrRadioButtonFields.length; i++)
        {
            arrRadioButtonFields[i].style.display=sDisplayStyle;
            arrRadioButtonFields[i].parentNode.style.display=sDisplayStyle;
        }
    }

    this.displayFieldRow=function(elemTarget)
    {
        var objRow=elemTarget.parentNode;
        while(objRow.nodeName!="TR")
            objRow=objRow.parentNode;
        if(objRow.style.display=="none")
            objRow.style.display="";
    };


    this.hideFieldRowIfEmpty=function(elemTarget)
    {
        var hasChildren=false;
        var objRow=elemTarget.parentNode;
        while(objRow.nodeName!="TR")
            objRow=objRow.parentNode;

        for(var i=0; i < objRow.cells.length; i++)
        {
            if(objRow.cells[i].style.display!="none")
            {
                var arrChildren=cross.getChildren(objRow.cells[i]);
                //alert(arrChildren.length)
                if(arrChildren.length>0)
                {
                    hasChildren=true;
                    break;
                }
            }
        }

        if(!hasChildren)
            objRow.style.display="none";
    };


    /**
     * This function is used for returning combobox selected value of given mastertype
     * @param iModuleId
     */
    this.getModuleTransId=function(iModuleId)
    {
        return this.getModuleTransIds(iModuleId);
    };

    /**
     * Returns list of selected values of all the mastertypes in current screen
     * @param iModuleId
     * @param isGetFieldIds
     */
    this.getModuleTransIds=function(iModuleId,isGetFieldIds)
    {
        var iArrServerVarModuleIds=null;
        var iArrBodyTableIds=null;
        var iArrServerVarSeqIds=null;
        var sArrModuleFieldIds={};
        var iArrAllServerModuleIds=[];
        //var iArrIsBodyFlds=[];

        for(var i=0; i < document.forms.length; i++)
        {
            var objForm=document.forms[i];
            if(objForm.name && objForm.name.indexOf("frmMaster")!=-1)
            {
                for(var j=0; j < objForm.elements.length; j++)
                {
                    var objElem=objForm.elements[j];
                    var objCombo;

                    if(objElem.getAttribute("mastertype"))
                    {
                        var iMasterType=objElem.getAttribute("mastertype");
                        //alert("adding "+iMasterType);


                        if(iMasterType > Constants.Genernal_Master) // && (iMasterType & 0xFF00)  != Constants.INTERNAL_MODULES)
                        {
                            var sElemId=objElem.id;
                            var isBodyField=false;
                            objCombo=getComboInstance(sElemId);
                            var iBodyRowIndex=-1;

                            //if(iMasterType==Constants.PRICE_BOOKS)
                            //    objCombo.setOnFocusScript("clProductsTable.setPriceBookSettings(this,evt)");


                            if(sElemId.indexOf("[")!=-1)
                            {
                                isBodyField=true;
                                iBodyRowIndex=sElemId.substring(sElemId.indexOf("[")+1,sElemId.indexOf("]"));
                                sElemId=sElemId.substring(0,sElemId.indexOf("["));
                            }
                            //alert(sElemId+","+objCombo)



                            if(!sArrModuleFieldIds[iMasterType]) //adding unique master type field-ids ex: arr['2305']=['F30001'];arr['2306']=['F30002']; ....
                            {
                                sArrModuleFieldIds[iMasterType]=[sElemId]; //-Constants.ACCOUNTS
                                //iArrIsBodyFlds[iArrIsBodyFlds.length]=isBodyField;
                                iArrAllServerModuleIds[iArrAllServerModuleIds.length]=iMasterType;


                                //alert(objElem.id+","+objCombo.getSelectedItem());
                                if(objCombo.getSelectedId()>0)
                                {
                                    if(iModuleId>0)
                                    {
                                        if(iModuleId==iMasterType)
                                            return objCombo.getSelectedId();
                                    }
                                    else
                                    {
                                        if(iArrServerVarModuleIds==null)
                                        {
                                            iArrServerVarModuleIds=[];
                                            iArrServerVarSeqIds=[];
                                            iArrBodyTableIds=[];
                                        }

                                        iArrServerVarModuleIds[iArrServerVarModuleIds.length]=iMasterType;
                                        if(objElem.id.indexOf("[")!=-1)
                                            iArrBodyTableIds[iArrBodyTableIds.length]=moduleBody.getIntTableId(objElem.id,false);
                                        else
                                            iArrBodyTableIds[iArrBodyTableIds.length]=0;

                                        iArrServerVarSeqIds[iArrServerVarSeqIds.length]=objCombo.getSelectedId();
                                    }
                                }
                            }
                            else //adding fieldid to already existing typewise array. i.e arr['2305']=['F30001','F30011'];
                            {
                                /*if(isBodyField)
                                {
                                    if(iBodyRowIndex>0) //adding only first row master fields
                                        continue;
                                }*/

                                var arrItems=sArrModuleFieldIds[iMasterType];
                                var isAdded=false;
                                for(var r=0; r < arrItems.length; r++)
                                {
                                    if(arrItems[r]==sElemId)
                                    {
                                        isAdded=true;
                                        break;
                                    }
                                }
                                if(!isAdded)
                                {
                                    arrItems[arrItems.length] = sElemId;
                                    sArrModuleFieldIds[iMasterType] = arrItems;
                                }

                                if(objCombo.getSelectedId()>0)
                                {
                                    if(iArrServerVarSeqIds==null)
                                    {
                                        iArrServerVarSeqIds = [];
                                        iArrServerVarModuleIds=[];
                                        iArrBodyTableIds=[];
                                    }


                                    if(objElem.id.indexOf("[")!=-1)
                                        iArrBodyTableIds[iArrBodyTableIds.length]=moduleBody.getIntTableId(objElem.id,false);
                                    else
                                        iArrBodyTableIds[iArrBodyTableIds.length]=0;

                                    iArrServerVarSeqIds[iArrServerVarSeqIds.length]=objCombo.getSelectedId();
                                    iArrServerVarModuleIds[iArrServerVarModuleIds.length]=iMasterType;

                                }

                                //earlier commented below lines for not attaching onlostscript handler to all the body rows
                                //enabled again to attach event to combobox if one is in header and one is in body. to individually load values(will defined based on prefix)

                                //iArrAllServerModuleIds[iArrAllServerModuleIds.length]=iMasterType;
                            }

                            clProductsTable.setMasterFieldId(iMasterType,sElemId,objCombo);

                            var sScript=objCombo.getOnLostScript();
                            if(!sScript || typeof(sScript)=="function" || (typeof(sScript)=="string" && sScript.indexOf("formula.getServerVarValue")==-1))
                                objCombo.setOnLostScript("formula.getServerVarValue(this,evt)");

                        }
                    }
                }
            }
        }

        //alert(iArrAllServerModuleIds.length);
        if(iModuleId>0)
            return -1;
        else
        {
            var arrReturn=[];
            arrReturn[0]=iArrServerVarModuleIds;
            arrReturn[1]=iArrServerVarSeqIds;

            if(isGetFieldIds)
            {
                arrReturn[2]=iArrAllServerModuleIds;
                arrReturn[3]=sArrModuleFieldIds;
                arrReturn[4]=iArrBodyTableIds;
                //arrReturn[4]= iArrIsBodyFlds;
            }

            return arrReturn;
        }
    };


    this.getCaptionField=function(elemInput)
    {
        if(elemInput.id.indexOf("[")==-1) //ignoring body field
            return Validation.getCaptionField(elemInput,elemInput.getAttribute("ctrltype"));

        /*var objTd;
         var iCtrlType=elemInput.getAttribute("ctrltype");
         if(iCtrlType==Constants.CONTROLTYPE_DATEPICKER)// || iCtrlType==Constants.CONTROLTYPE_COMBOBOX)
         {
         objTd=elemInput.parentNode.parentNode;
         while(objTd.nodeName!="TD")
         objTd=objTd.parentNode;
         return cross.getPrevSibiling(objTd).getElementsByTagName("LABEL")[0];
         }
         else if(iCtrlType==null && document.getElementById("uploadFileName_"+elemInput.id)!=null)//attachment field (Constants.CONTROLTYPE_DOCUMENTCTRL)
         {
         objTd=elemInput.parentNode.parentNode;
         while(objTd.nodeName!="TD")
         objTd=objTd.parentNode;
         return cross.getPrevSibiling(objTd).getElementsByTagName("LABEL")[0];
         }
         else
         {
         objTd=elemInput.parentNode;
         return objTd.previousSibling.getElementsByTagName("LABEL")[0];
         }*/

    };

    this.showHideField=function(elemTarget,isShow,iControlType)
    {
        var objCaptionField=moduleView.getCaptionField(elemTarget);
        if(!isShow)
        {
            elemTarget.style.display = "none";
            objCaptionField.style.display = "none";
        }
        else
        {
            elemTarget.style.display = "";
            objCaptionField.style.display = "";
        }
        if(iControlType!=undefined && iControlType==Constants.CONTROLTYPE_DATEPICKER)
        {
            var dateImg = document.getElementById(elemTarget.id+"button");
            if(dateImg)
            {
                if(!isShow)
                {
                    dateImg.style.display = "none";
                }
                else
                    dateImg.style.display = "";

            }
        }
    };

    this.getRadioButtonFields=function(sFieldId)
    {
        var arrRadioButtonFields=[];
        var objField=document.getElementById(sFieldId);
        var iCount=1;
        do
        {
            arrRadioButtonFields[arrRadioButtonFields.length]=objField;
            objField=document.getElementById(sFieldId+"_"+iCount);
            iCount++;
        }
        while(objField);
        return arrRadioButtonFields;
    };

    this.addVarFieldId=function(sVarName,sFieldId,iTableId,isBodyField,isSQLParam)
    {
        //alert(sVarName+","+sFieldId)
        this.arrVarFieldIds[sVarName]=sFieldId;
        if(isSQLParam)
            this.arrSQLParams[this.arrSQLParams.length]=sFieldId.substring(1);
    };

    this.getFieldId=function(sVarName)
    {
        if(sVarName.indexOf("Q")!=-1)
        {
            //alert(sVarName)
            var iSeq;
            if(sVarName.indexOf("_")!=-1)
                iSeq=parseInt(sVarName.substring(2,sVarName.indexOf("_")));
            else
                iSeq=parseInt(sVarName.substring(2));
            //alert(iSeq);
            //alert("currency  "+me.sMasterFldIds[Constants.CURRENCY_MODULE]);

            if((iSeq >= Constants.PRODRATE_START && iSeq <= Constants.PRODRATE_END)
                || (iSeq >= Constants.STOCK_START && iSeq <= Constants.STOCK_END))
                return formula.sMasterFldIds[Constants.PRODUCTS];
            else if(iSeq >= Constants.EXCHANGERATE_START && iSeq <= Constants.EXCHANGERATE_END)
                return formula.sMasterFldIds[Constants.CURRENCY_MODULE];
            else if(iSeq >= Constants.WORK_TYPE_RATE_START && iSeq <= Constants.WORK_TYPE_RATE_END)
                return formula.sMasterFldIds[Constants.USERS];
        }
        else
            return this.arrVarFieldIds[sVarName];
    };

    this.getSQLParams=function()
    {
        if(this.arrSQLParams.length>0)
            return this.arrSQLParams;
        else
            return null;
    };

    this.onUploadDone=function(sFileName,sActionUrl,sId,sDestPath,sHiddenName)
    {
        //alert(sHiddenName)
        //alert(sFileName+","+sActionUrl+","+sId+","+sDestPath);
        if(!sFileName)
        {
            var objRemove=document.getElementById(sId+"_remove");
            if(objRemove && !objRemove.value)
            {
                objRemove.value=document.getElementById("uploadFileName_"+sId).value;
                document.getElementById(sHiddenName+"_"+sId).value="";
            }
            var removeFile = document.getElementById('removeFile_'+sId);
            if(removeFile && !removeFile.value){
                removeFile.value = document.getElementById('uploadFileName_'+sId).value;
            }
        }else if(util.trim(sFileName).length > 0 && (Browser.isSafari && !Browser.isChrome))
        {
            var sActionUrl='';
            sActionUrl = con.getStruts2Url(null, "downloadFile", "getFile");
            sActionUrl= sActionUrl+"tempPath=1&uploadFileName="+sId.substring(1)+"_"+sFileName;
            if(document.getElementById("preview_"+sId))
                document.getElementById("preview_"+sId).src=sActionUrl;
        }
    };

    this.viewModule=function(sUrl,sTitle)
    {
        app.showPopUp(sUrl+"&sFnSaveCallback=parent.moduleView.hideModuleDialog",sTitle,680, 380);
    };

    this.hideModuleDialog=function()
    {
        app.hidePopUp();
    };

    this.callbackCheckInput=function(objInput,evt,keycode)
    {
        // var keycode;
        if(!keycode)
        {
            evt=evt?evt:window.event;
            if(evt)
                keycode = evt.keyCode;
        }

        if(keycode==13) //enter key
        {
            //objInput.onblur();
            var sName=objInput.name;
            if(sName.indexOf("[")!=-1)
            {
                var iModuleId=document.getElementById("moduleId").value;
                var iFieldIndex=parseInt(sName.substring(sName.indexOf("[")+1,sName.indexOf("]")),10);  //f[18].value

                //alert(document.forms["frmMaster"+iModuleId].elements["f["+(iFieldIndex+1)+"].value"])

                while(true)
                {
                    var objNextField=document.forms["frmMaster"+iModuleId].elements["f["+(iFieldIndex+1)+"].valueText"];
                    objNextField=document.forms["frmMaster"+iModuleId].elements["f["+(iFieldIndex+1)+"].valueText"];
                    if (!objNextField)
                        objNextField = document.forms["frmMaster" + iModuleId].elements["f[" + (iFieldIndex + 1) + "].value"];

                    if (objNextField)
                    {
                        if(objNextField.disabled)
                        {
                            iFieldIndex++;
                        }
                        else
                        {
                            objNextField.focus();
                            break;
                        }
                    }
                    else
                        break;
                }
            }
        }

    };

    this.onClkGeoMap= function(sTableId)
    {
        me.sTableId=sTableId;

        var sLangitudeFldId="lngitude1";
        var objTable=document.getElementById(me.sTableId);
        if(objTable.getAttribute("addrType")==Constants.IAddressTypes.SHIPPING)
            sLangitudeFldId="lngitude2";

        var sLatLangs=document.getElementById(document.getElementById(sLangitudeFldId).value).value;
        var latitude=0,longitude=0;

        if(sLatLangs.indexOf(",")!=-1)
        {
            latitude=sLatLangs.substring(0,sLatLangs.indexOf(","));
            longitude=sLatLangs.substring(sLatLangs.indexOf(",")+1);
        }

        //var geoMapDlg = getDialogBox("clGeoMap");
        var sUrl= con.getStruts2Url("module","moduleView","getViewMap",null);
        sUrl +="iLatitude="+latitude+"&iLongitude="+longitude+"&sCallbackFn=parent.moduleView.setAddressDetails";
        var sArrLocation=getMapLocationText(sTableId);
        if(sArrLocation)
        {
            if(sArrLocation[0])
                sArrLocation[0]=sArrLocation[0].replace(/\r?\n/g," ");
            if(sArrLocation[1])
                sArrLocation[1]=sArrLocation[1].replace(/\r?\n/g," ");

            sUrl+="&sMapAddress1="+escape(sArrLocation[0])+"&sMapAddress2="+escape(sArrLocation[1]);
        }

        /*var objTable=document.getElementById(sTableId);
         var arrInputs=objTable.getElementsByTagName("INPUT");
         var sSearchText="";

         for(var i=0; i < arrInputs.length; i++)
         {
         if(arrInputs[i].type=="text")
         sSearchText+=arrInputs[i].value+",";
         }

         arrInputs=objTable.getElementsByTagName("TEXTAREA");

         for(var i=0; i < arrInputs.length; i++)
         {
         sSearchText+=arrInputs[i].value+",";
         }
         sSearchText=util.trim(sSearchText);


         var sUrl= con.getStruts2Url("module","moduleView","getViewMap",null);
         sUrl+="mapAddress="+escape(sSearchText);*/

        //alert(sUrl);
        var arrActions = new Array();
        arrActions[0] = MsgHandler.getMsg(MsgConstants.OK)+"|clViewMap.onClkSave";
        arrActions[1] = MsgHandler.getMsg(MsgConstants.CANCEL)+"|parent.app.hidePopUp";
        var geoMapDlg = new DialogBox("appdlg",MsgHandler.getMsg(MsgConstants.MAP),100,50,780,520,sUrl,true,"frmMapDetails",true,true,arrActions);
        geoMapDlg.setCenter();
        geoMapDlg.show();

    };

    this.onClkSetCurrentLocation = function(sTableId)
    {
        util.toggleBackground(true);
        me.sTableId=sTableId;
        var iCurrentLatitude = 0,iCurrentLongitude = 0,clLatLng =0;
        if (iCurrentLatitude == 0 && iCurrentLongitude == 0)
        {
            if (navigator.geolocation)
            {
                navigator.geolocation.getCurrentPosition(function (position)
                {
                    iCurrentLatitude = position.coords.latitude;
                    iCurrentLongitude = position.coords.longitude;
                    clLatLng = new google.maps.LatLng(iCurrentLatitude, iCurrentLongitude);
                    clGeoMapUtils.getAddressFromGeocoder(moduleView.setAddressDetails,clLatLng);
                },function (error) {
                    switch(error.code) {
                        case error.PERMISSION_DENIED:
                            alert("Current location access permission is denied in your browser.");
                            break;
                        case error.POSITION_UNAVAILABLE:
                            alert("Location information is unavailable.");
                            break;
                        case error.TIMEOUT:
                            alert("The request to get user location timed out.");
                            break;
                        default:
                            alert("An unknown error occurred.");
                            break;
                    }
                    util.toggleBackground(false);
                });
            }
            else if (google.loader.ClientLocation)
            {
                iCurrentLatitude = google.loader.ClientLocation.latitude;
                iCurrentLongitude = google.loader.ClientLocation.longitude;
                clLatLng = new google.maps.LatLng(iCurrentLatitude, iCurrentLongitude);
                clGeoMapUtils.getAddressFromGeocoder(moduleView.setAddressDetails,clLatLng);
            }
        }
        else
            clGeoMapUtils.getAddressFromGeocoder(moduleView.setAddressDetails,clLatLng);
    };

    this.setAddressDetails=function(objArrAddressDetails)
    {
        //alert("setAddressDetails")
        if(objArrAddressDetails)
        {
            var sLangitudeFldId="lngitude1";
            var objTable=document.getElementById(me.sTableId);
            if(objTable.getAttribute("addrType")==Constants.IAddressTypes.SHIPPING)
                sLangitudeFldId="lngitude2";

            var arrInputs=objTable.getElementsByTagName("INPUT");

            //alert(objArrAddressDetails["address"]+"1---"+objTable.getElementsByTagName("TEXTAREA")[0].id);

            me.setFieldValueAsString(objTable.getElementsByTagName("TEXTAREA")[0].id,objArrAddressDetails["address"]);
//            var arrInputs=objTable.getElementsByTagName("INPUT");

            me.setFieldValueAsString(arrInputs[2].id,objArrAddressDetails["street"]);
            me.setFieldValueAsString(arrInputs[4].id,objArrAddressDetails["city"]);
            me.setFieldValueAsString(arrInputs[6].id,objArrAddressDetails["state"]);
            me.setFieldValueAsString(arrInputs[8].id,objArrAddressDetails["country"]);
            me.setFieldValueAsString(arrInputs[11].id,objArrAddressDetails["pincode"]);

            var objLangitudeFld=document.getElementById(document.getElementById(sLangitudeFldId).value);
            objLangitudeFld.value=objArrAddressDetails["lat"]+","+objArrAddressDetails["lng"];
            //alert(objLangitudeFld.value)
            util.toggleBackground(false);
        }
    };

    this.onClkChkBox=function(objChkBox,e)
    {
        if(objChkBox.getAttribute("readonly")==true || objChkBox.getAttribute("readonly")=="true")
        {
            //alert("true "+e)
            cross.cancelBubble(e,false,false);
            return false;
        }
        return true;
    };

    this.editComboItem=function(objComboBox,e)
    {
        var objComboInstance=getComboInstance(objComboBox.id);
        me.sComboId=objComboBox.id;

        var iMasterType=objComboInstance.getMasterType();
        if(iMasterType==Genernal_Master && objComboInstance.iMasterType2>0)
            iMasterType=objComboInstance.iMasterType2;
        var iSelectedId=objComboInstance.getSelectedId();



        function fnCallback(sComboId,evt)
        {
            formula.removeVariableValues(iMasterType,iSelectedId);

            var clComboElement=document.getElementById(sComboId);
            clComboElement.setAttribute(Constants.COMBO_ATTR_SYSVAL,1);// to indicate value has been set programmatically not by user
            clComboElement.focus();

            formula.getServerVarValue(objComboBox,evt);
            //formula.evaluateTargetExpr([sComboId],false,0,evt);
        }

        me.showModuleOnlineCreate(iMasterType,fnCallback,[objComboBox.id],"",0,true,iSelectedId);

        /*var sTitle="Edit";
         var iWidth=680;
         var iHeight=380;
         var sUrl=home.getModuleCreateUrl();
         sUrl+="?moduleId="+iMasterType;
         sUrl+="&transId="+iSelectedId;
         sUrl+="&viewIn="+Constants.MODULE_IN_DLG;
         sUrl+="&sFnSaveCallback=parent.home.getModuleComboLine";
         //alert(sUrl)
         app.showPopUp(sUrl, sTitle, iWidth, iHeight, null);*/

    };

    this.onDocumentKeyUp=function(e)
    {
        e = cross.getEvent(e);

        var keyCode = e.keyCode;
        var objSrc;

        //alert(e.altKey+","+keyCode)
        if(e.altKey)
        {
            objSrc = cross.getSrcElement(e);

            if (objSrc.getAttribute("mastertype"))
            {
                if (keyCode == 118) //opening lookup dialog on Alt+F7
                {
                    //alert(objSrc.getAttribute("mastertype")+","+objSrc.id)

                    me.showLookUp(objSrc.getAttribute("mastertype"), objSrc.id);
                }
                else if (keyCode == 119) //opening combo edit dialog on Alt+F8
                {
                    me.isComboEditByKeyEvent = true;
                    me.editComboItem(objSrc, e);
                }
            }else if(me.isPendingLinksDefined)
            {
                if (objSrc && objSrc.getAttribute("name"))
                {
                    var sName = objSrc.getAttribute("name");
                    if (sName.indexOf("b[") != -1)
                    {
                        cross.cancelBubble(e);
                        return false;
                    }
                }
                if (keyCode == 76)//opening pending links dialog on alt+L
                    clModuleLinks.onClkShowPendingLinksDlg(null, false, 0, null);
            }
        }

        home.setIsFormDataUpdated(true);

        cross.cancelBubble(e);
        return false;
    };



    //***************** LookUp Search*************************
    /**
     * This is function is used for get the LookUp search dialog......
     * @param iModuleId  : Module Id
     * @param sFnSetCallBack : for related result
     * @param isReturnAsId : if it is true return transid Wonly ..otherwise return key|value pair)
     * @param args : optional(arguments for function callback)
     */
    this.onClkGetLookUpDlg = function(iModuleId,sFnSetCallBack,isReturnAsId,sComboId,sQuickCreateParams)
    {
        me.sComboId=sComboId;

        var sId="lookup",sParams;
        var arrActions =[];
        var clDlgBox = getDialogBox(sId);

        var sUrl=home.getLookupUrl(iModuleId);

        if(iModuleId == Constants.USERS)      // get users tree
        {
            //sUrl = "security/users!getUserHirearchy.do";
            sParams = "?locationId=0";
            arrActions[0] = MsgHandler.getMsg(MsgConstants.OK)+"|clLookin.getSelectedValues";
            arrActions[1] = MsgHandler.getMsg(MsgConstants.CANCEL)+"|parent.moduleView.closeLookupDlg";
            sUrl += sParams;

            clDlgBox = new DialogBox(sId,(MsgHandler.getMsg(MsgConstants.USERS)),250,40,500,400, sUrl, true,null, false,true,arrActions,false,null,false);
            clDlgBox.callFn("clLookin.getCallBack",[moduleView.setSelectedUser],sId);
        }
        else
        {
            sParams="?moduleId="+iModuleId+"&isReturnAsId="+isReturnAsId;
            if(sComboId)
            {
                var clCombo = getComboInstance(sComboId);
                if(clCombo.getCondition())
                    sParams+="&sCondition="+clCombo.getCondition();

                var arrValues=clCombo.getCascadeValues();
                if(arrValues)
                {
                    if(arrValues[0])
                        sParams+="&casFieldId="+arrValues[0];
                    if(arrValues[1])
                        sParams+="&casParentIds="+arrValues[1];
                    if(arrValues[2])
                        sParams+="&casVals="+arrValues[2];
                }

                arrValues=clCombo.getRelModValues();
                if(arrValues)
                {
                    if(arrValues[0])sParams+="&relModTypes="+arrValues[0];
                    if(arrValues[1])sParams+="&relModSeqIds="+arrValues[1];
                    if(arrValues[2])sParams+="&targetModuleType="+arrValues[2];
                }

                sParams+="&parentId="+clCombo.getParentId()+"&selectionType="+clCombo.getSelectionType()+"&selectionBy="+clCombo.getSelectionBy()+"&fieldId="+clCombo.getFieldId();
            }

            arrActions[0] = MsgHandler.getMsg(MsgConstants.OK)+"|clLookUp.onClkSaveLookUp";
            arrActions[1] = MsgHandler.getMsg(MsgConstants.CANCEL)+"|parent.moduleView.closeLookupDlg";
            //sUrl = getStruts2Url(null,"module/search.do",null,sResult,true);
            sUrl +=sParams;
            if(sQuickCreateParams)
                sUrl +="&quickCreateParams="+util.encodeURI(sQuickCreateParams);
            clDlgBox = new DialogBox(sId,MsgHandler.getMsg(MsgConstants.LOOKUP_SEARCH),140,160,640,540,sUrl, true, null, true,true,arrActions,false,null,true);
        }

        clDlgBox.setCenter();
        clDlgBox.show();
    };

    /**
     * this function is used for close lookup dialog...
     */
    this.closeLookupDlg = function()
    {
        parent.home.releaseDialogReportHandles();
        getDialogBox("lookup").hide();
    };

    /**
     * callBack function for lookUp search
     * @param iStatus
     * @param sResponse
     */
    this.setSelectedComboItem = function(iStatus, sResponse,iTransId)
    {
        moduleView.selectComboItem(me.sComboId,iStatus,sResponse,iTransId);
        moduleView.closeLookupDlg();
        me.sComboId=null;
    };

    this.setSelectedUser=function(arrParams)
    {
        moduleView.selectComboItem(me.sComboId,Constants.OK,arrParams[1]+"|"+arrParams[0]);
        moduleView.closeLookupDlg();
    };

    this.loadIncrementalValue=function(sFieldId)
    {
        var objField=document.getElementById(sFieldId);
        objField.value=objField.getAttribute("default");
        var objFieldAttr=objField.previousSibling;
        while(!objFieldAttr.name || objFieldAttr.name.indexOf("attr")==-1)
            objFieldAttr=objFieldAttr.previousSibling;

        var sArrAttrValues=objFieldAttr.value.split("_");
        var iTagValue=parseInt(sArrAttrValues[2],10);

        /* objField.onchange=function()
         {
         iTagValue=util.unPackBit(iTagValue, me.TAG_INCREMENTAL);
         objFieldAttr.value=sArrAttrValues[0]+"_"+sArrAttrValues[1]+"_"+iTagValue;
         };*/

        iTagValue=util.packBit(iTagValue, me.TAG_INCREMENTAL);
        objFieldAttr.value=sArrAttrValues[0]+"_"+sArrAttrValues[1]+"_"+iTagValue;
    };

    this.onChangeIncrementValue=function(objField)
    {
        var objFieldAttr=objField.previousSibling;
        while(!objFieldAttr.name || objFieldAttr.name.indexOf("attr")==-1)
            objFieldAttr=objFieldAttr.previousSibling;

        var sArrAttrValues=objFieldAttr.value.split("_");
        var iTagValue=parseInt(sArrAttrValues[2],10);

        iTagValue=util.unPackBit(iTagValue, me.TAG_INCREMENTAL);
        objFieldAttr.value=sArrAttrValues[0]+"_"+sArrAttrValues[1]+"_"+iTagValue;
    };

    this.onBlurWebsite=function(objField)
    {
        var sValue = util.trim(objField.value);
        if(sValue != null&& sValue.length > 0){
            //if(sValue.indexOf("www.") == -1)
            //    objField.value = "www."+sValue;
            if(sValue.indexOf("http://") == -1 && sValue.indexOf("https://") == -1)
                objField.value = "http://"+sValue;
        }
    };

    this.onBlurPincode=function(objPostal)
    {
        var objRow=objPostal.parentNode.parentNode.previousSibling;
        while(objRow.nodeName!="TR")
            objRow=objRow.previousSibling;
        var arrInputs=objRow.getElementsByTagName("INPUT");
        var isGetAddressByPincode=false;
        for(var i=0; i < arrInputs.length; i++)
        {
            if(arrInputs[i].getAttribute("mastertype")==Constants.COUNTRIES)
            {
                if(getComboInstance(arrInputs[i].id).getSelectedId()==10) //country-- 10=singpore
                {
                    isGetAddressByPincode=true;
                }
                break;
            }
        }

        if(isGetAddressByPincode)
        {
            var objTable=objRow.parentNode;
            while(!util.hasClass(objTable,"moduleSubGrp"))
                objTable=objTable.parentNode;

            me.sTableId=objTable.id;
            clGeoMapUtils.getAddressByPincode(objPostal.value,moduleView.setAddressDetails);
        }
    };

    this.validateMinMax=function(objInput)
    {
        var iValue;
        var sMinValue = objInput.getAttribute("minValue");
        var sMaxValue = objInput.getAttribute("maxValue");
        var isValid = true;
        var sMsg=null;

        if(objInput.value)
        {
            var str = objInput.value;
            while(str.indexOf(',') != -1)
                str = str.replace(',','');
            iValue = parseFloat(sMinValue);
            if (parseFloat(str) < iValue)
            {
                sMsg = "Minimum value allowed: " + iValue;//TODO
                isValid = false;
            }


            if (isValid && sMaxValue)
            {
                iValue = parseFloat(sMaxValue);
                if (parseFloat(str) > iValue)
                {
                    sMsg = "Maximum value allowed: " + iValue;//TODO
                    isValid = false;
                }
            }
        }
        return [isValid,sMsg];
    };

    this.onClkShowDropDown = function(sId,e)
    {
        e = cross.getEvent(e);
        var elem = document.getElementById(sId);
        cross.setVisible(elem,!cross.isVisible(elem));
        cross.cancelBubble(e);
    } ;
    this.onClkSetValue = function(elemAch,iFieldId,e)
    {
        e = cross.getEvent(e);
        var elem = elemAch.parentNode.parentNode;
        elem = elem.children[0].children[0];
        elem = elem.tBodies[0].rows[0].cells[0].children[0];

        var sText =  cross.getInnerText(elemAch),cbElem;
        elem.value = cross.getInnerText(elemAch);
        elem.setAttribute("selValue",1);
        cbElem = getComboInstance(iFieldId);
        if(cbElem)
        {
            cbElem.checkAndAddItem(cross.getInnerText(elemAch) + "|" + elemAch.getAttribute("key"), true);
        }
        cross.cancelBubble(e);
    };

    this.viewEmailContent=function()
    {
        var iModuleId= 0,iTransId= 0,iCommunicationId=0;
        iModuleId=me.getModuleId();
        iTransId=me.getTransId();
        if(iModuleId==Constants.COMMUNICATION)
            iCommunicationId=iTransId;
        var dlgSearchMap=new DialogBox("clViewEmailDlg","Email Content",80,50,700,520,"module/communication!getEmailFile.do?moduleId="+iModuleId+"&transId="+iTransId+"&communicationId="+iCommunicationId,true,"frmMaster",true,true,null);
        dlgSearchMap.setCenter();
        dlgSearchMap.show();
    };

    this.onLoadShowLinkAction = function(sTableId){
        document.getElementById(sTableId+"Link").style.display = "";
    }
    this.callBackAfterAddressChange = function(iFieldId,sSelectedTextAddress,iLatitude,iLongitude,sAddressComponents) {
        var sLangitudeFldId = "lngitude1";
        if (iLongitude != 0 && iLatitude != 0) {
            if (document.getElementById(sLangitudeFldId) != null) {
                var objLangitudeFld = document.getElementById(document.getElementById(sLangitudeFldId).value);
                objLangitudeFld.value = iLatitude + "," + iLongitude;
            }
        }
    }
    /*Record info overlay*/
    this.onClkShowRecordOverlay=function(iIndex)
    {
        var iModuleId,iTransId,iClientHeight,iTop=50;
        iClientHeight=cross.getClientHeight();
        iClientHeight=iClientHeight-iTop;
        iModuleId=document.getElementById("moduleId").value;
        iTransId=document.getElementById("transId").value;
        clOverlay.showOverlay("EditRecordInfo","dvRecordInfo","325px",iClientHeight+"px",clOverlay.OVERLAY_RIGHT,null,iTop,null,"Record Info","dvEditView");
        con.sendPostRequest("module/infopanel!getRecordDetails.do?moduleId="+iModuleId+"&transId="+iTransId+"&recordInfo=true&selectedIndex="+iIndex,null,null,me.resRecordInfo,null,0,null,false,false,ACTION_LOADING);
    };
    this.resRecordInfo=function(res)
    {
        var objDiv=document.getElementById("dvRecordInfo");
        objDiv.innerHTML = res;
        loadResources(objDiv, util.onScriptsLoad);
    };

    /**
     * This method helps to show/hide based on isShow param and dvGrp object [copied from ModuleRules.js]
     * @param dvGrp
     * @param isShow
     */
    this.showOrHideFieldGroup=function(dvGrp,isShow)
    {
        dvGrp.style.display = isShow?"":"none";
        if(document.getElementById("viewIn") && document.getElementById("viewIn").value==Constants.MODULE_IN_DLG)
        {
            var iTabIndex=dvGrp.id.substring(dvGrp.id.length-1);
            var iModuleId=document.getElementById("moduleId").value;
            tabbedPane.showHide(isShow,iModuleId+"moduleRenderTab",iTabIndex);
        }
    }


    this.getElementByFieldId=function(sFieldId,iRuleId,isFromCondition,isFldByModuleId,iModuleId,iBodyFieldIndex)
    {
        var objElem = document.getElementById(sFieldId);

        if(!objElem && iBodyFieldIndex >= 0)
            objElem = document.getElementById(sFieldId+"["+iBodyFieldIndex+"]");

        if(!objElem)
        {
            me.throwInvalidFieldError(sFieldId,iRuleId,isFromCondition,isFldByModuleId,iModuleId);
        }

        return objElem;
    };

    this.throwInvalidFieldError=function(sFieldId,iRuleId,isFromCondition,isFldByModuleId,iModuleId)
    {
        var sErrorMsg = "";
        if(iRuleId > 0)
        {
            if(isFromCondition)
                sErrorMsg = "Invalid Field '"+sFieldId+"' used in Rule Condition, Rule-id= '"+iRuleId+"'";
            else if(isFldByModuleId)
                sErrorMsg = "Invalid Module Variable used, Module-id= '"+iModuleId+"'";
            else
                sErrorMsg = "Invalid Field '"+sFieldId+"' used in Rules, Rule-id= '"+iRuleId+"'";
        }
        else
            sErrorMsg = "Invalid Variable '"+sFieldId+"' used in Formulas";

        console.error("======="+sErrorMsg);
        //alert(sErrorMsg);

        //throw sErrorMsg;
    };

};


var moduleBody=new function()
{
    app.registerInstance("moduleBody",moduleBody);

    var me=this;
    var arrTableIds=null;
    this.arrBodyTableIds = null;

    this.START_HIDDEN_COLUMNS=3;
    this.END_HIDDEN_COLUMNS=2;

    this.initBodyTable=function(sTableId,iBodyTableId)
    {
        //cross.registerEventListener(cross.EVENT_ONKEYUP,moduleView.onDocumentKeyUp,null,null,Constants.SCOPE_SCREEN);
        //cross.addListener(document.getElementById(sTableId),cross.EVENT_ONKEYPRESS,me.handleKeyPress,true,[sTableId]);
        //cross.addListener(document,cross.EVENT_ONKEYDOWN,me.handleKeyDown,true,[sTableId,iRatioFieldId]);

        cross.registerEventListener(cross.EVENT_ONKEYDOWN,me.handleKeyDown,[sTableId,iBodyTableId],null,Constants.SCOPE_SCREEN);
        var clTable=new sTable(sTableId);
        clTable.updateRowSequence();

        if(!this.arrBodyTableIds)
            this.arrBodyTableIds=[];

        var iIndex=this.arrBodyTableIds.length;
        this.arrBodyTableIds[iIndex]=[];
        this.arrBodyTableIds[iIndex][0]=sTableId;

        //if (evt.ctrlKey
        //if (evt.keyCode == 105)
    };

    this.clearAll = function()
    {
        cross.unregisterAllListeners(Constants.SCOPE_SCREEN);
    };

    this.setRatioSrcField=function(sTableId,iRatioSrcFieldId)
    {
        for(var i=0; i < me.arrBodyTableIds.length; i++)
        {
            if(me.arrBodyTableIds[i][0]==sTableId)
            {
                me.arrBodyTableIds[i][1] = iRatioSrcFieldId;
                break;
            }
        }
    };

    this.setFreezeColIndex=function(sTableId,iFreezeColIndex)
    {
        for(var i=0; i < me.arrBodyTableIds.length; i++)
        {
            if(me.arrBodyTableIds[i][0]==sTableId)
            {
                me.arrBodyTableIds[i][2] = iFreezeColIndex;
                break;
            }
        }
    };

    this.markAsMandatory=function(sFormName,sTableId,isSkipValidation,iRuleId,sTargetColumnId,byValidationType)
    {
        if(isSkipValidation=='true')
            return;

        if(!iRuleId)
            iRuleId=-1;

        var arrTargetColumns=null;
        var iIndex=0;
        if(!arrTableIds)
            arrTableIds=[];
        else
        {
            for(var i=0; i < arrTableIds.length; i++)
            {
                if(iRuleId>0)
                {
                    if(arrTableIds[i][1]==iRuleId)
                    {
                        arrTargetColumns = arrTableIds[i][2];
                        arrTargetColumns[arrTargetColumns.length]=[sTargetColumnId,byValidationType];
                        break;
                    }
                }
                else if(arrTableIds[i][0]==sTableId && sTargetColumnId!=null)
                {
                    arrTargetColumns = arrTableIds[i][2];
                    arrTargetColumns[arrTargetColumns.length]=[sTargetColumnId,byValidationType];
                    arrTableIds[i][2]=arrTargetColumns;
                    return;
                }
            }
            iIndex=arrTableIds.length;
        }

        if(arrTargetColumns==null)
        {
            arrTargetColumns=[];
            if(sTargetColumnId!=null)
                arrTargetColumns[arrTargetColumns.length]=[sTargetColumnId,byValidationType];
        }

        arrTableIds[iIndex]=[sTableId,iRuleId,arrTargetColumns];//[sFormName,sTableId];
    };

    this.clearMandatory=function(iRuleId)
    {
        if(arrTableIds)
        {
            for(var i=0; i < arrTableIds.length; i++)
            {
                if (iRuleId > 0)
                {
                    if (arrTableIds[i][1] == iRuleId)
                    {
                        var sArrValues=arrTableIds.splice(i,1);
                        sArrValues=sArrValues[0];
                        Validation.clearMessage(null,false,"msg"+sArrValues[0]);
                        break;
                    }
                }
            }
        }

    };


    this.setColValue=function(sFieldId,iRowIndex,sValue,clTable,iColIndex,sDocumentURL,sFileDisplayName,isDoNotPickerFromServer)
    {
        if(clTable==null)
            clTable=me.getTableObject(sFieldId,true);

        if(!iColIndex)
            iColIndex=me.getCellIndex(sFieldId);

        //console.warn("setColValue  "+sFieldId+","+iColIndex+","+sValue);
        //var clTable=me.getTableObject(sFieldId,true);
        //alert(iRowIndex+"------"+iColIndex+"------"+sValue)

        //displayTable.setTableId("tblProducts");
        //displayTable.setValueAt(iRowIndex,iColIndex,sValue);


        var iColType=clTable.getColType(iColIndex,0);
        if(iColType==TYPE_UPLOAD_FILE && sDocumentURL!=null && sDocumentURL.indexOf("fileCopy")!=-1)
        {
            var sUploadFieldId = sFieldId.substring(1)+"["+iRowIndex+"]";
            var imgPreview = document.getElementById("preview_F" + sUploadFieldId);
            if(sDocumentURL.indexOf("fieldId") == -1)
                sDocumentURL += "&fieldId="+sUploadFieldId;
            if(!imgPreview)
                con.sendGetRequest(sDocumentURL);
        }


        if(sValue && isNaN(sValue))
        {
            if(sValue.indexOf("|cbval|")!=-1) //combo value
            {
                sValue=sValue.substring(sValue.indexOf("|cbval|")+7);

                if(iColType==TYPE_STRING)
                    sValue=sValue.substring(0,sValue.indexOf("|"));

            }

            if(sValue.indexOf("<br/>")!=-1)
                sValue=util.replaceAll(sValue,"<br/>","\n");
        }

        if(sDocumentURL!=null)
            sDocumentURL+="&defaultImg=placeholder.png";
        var bReturn=clTable.setValueAt(iRowIndex,iColIndex,sValue,null,!isDoNotPickerFromServer,false,null,true,sDocumentURL,sFileDisplayName);

        var objField = clTable.getElementAt(iRowIndex,iColIndex);
        if(!objField)
            me.throwInvalidFieldError(sFieldId);

        var iDataType=objField.getAttribute("datatype");
        var iCtrlType=objField.getAttribute("ctrltype");

        //commented for firing event on fraction(amount) field
        if(iCtrlType==Constants.CONTROLTYPE_COMBOBOX || iCtrlType == Constants.CONTROLTYPE_OPTIONCTRL
            || (iDataType == Constants.DATATYPE_MASTER && iCtrlType!=Constants.CONTROLTYPE_MULTI_SELECT))
        {
            var event = null;
            try
            {
                event = new Event("blur");
            }
            catch (error)
            {
                event = document.createEvent("Event");
                event.initEvent("blur", true, true);
            }


            objField.dispatchEvent(event);
        }


        //commented the below since for non-readonly field (after enabling it), issue is coming
        //if(objElement.getAttribute("disabled")!=null || objElement.getAttribute("dispType")==Constants.DISPLAYTYPE_READONLY)
            moduleView.setFieldValueAsAttr(objField,null,true);

        /*var iFieldId=sFieldId.substring(1);
        if(iFieldId==clProductsTable.getQtyFieldId())
            formula.handleQuantityChange(objElement,null);*/

        return bReturn;
    };

    this.setValueToAllColumns=function(sFieldId,sValue)
    {
        var clTable=me.getTableObject(sFieldId,true);
        var iColIndex=me.getCellIndex(sFieldId);
        var iRowCount=clTable.getRowCount(true);

        var iColType=clTable.getColType(iColIndex,0);

        for(var iRowIndex=0; iRowIndex < iRowCount; iRowIndex++)
        {
            //util.writeToLog("set column value: "+iRowIndex+","+iColIndex+","+sValue);
            if(sValue && isNaN(sValue))
            {
                if (sValue.indexOf("|cbval|") != -1) //combo value
                {
                    sValue = sValue.substring(sValue.indexOf("|cbval|") + 7);

                    if (iColType == TYPE_STRING)
                        sValue = sValue.substring(0, sValue.indexOf("|"));

                }
            }

            clTable.setValueAt(iRowIndex,iColIndex,sValue);
        }
    };

    this.changeColumnVisibility=function(clTable,sFieldId,isHide)
    {
        if(clTable==null)
            clTable=me.getTableObject(sFieldId,true);
        var iColIndex=me.getCellIndex(sFieldId);

        if(isHide)
            clTable.hideColumn(iColIndex);
        else
            clTable.showColumn(iColIndex);
    };

    this.enableOrDisableColumn=function(clTable,sFieldId,isDisable)
    {
        if(clTable==null)
            clTable=me.getTableObject(sFieldId,true);
        var iColIndex=me.getCellIndex(sFieldId);

        if(isDisable)
        {
            clTable.disableColumn(iColIndex);
            var iRowCount = clTable.getRowCount();
            for (var i = 0; i < iRowCount; i++)
                moduleView.setFieldValueAsAttr(clTable.getElementAt(i, iColIndex),null,true);
        }
        else
            clTable.enableColumn(iColIndex);
    };

    this.getColValue=function(sFieldId,iRowIndex, isGetHTMLContent,iColTypeRow,iColType,isGetSelectedId)
    {
        var iColIndex=me.getCellIndex(sFieldId);
        var clTable=me.getTableObject(sFieldId,true);
        return clTable.getValueAt(iRowIndex,iColIndex, isGetHTMLContent,iColTypeRow,iColType,isGetSelectedId);
    };

    this.getColValueOfAllRows=function(sFieldId,isGetHTMLContent,iColTypeRow,iColType,isGetSelectedId)
    {
        var iColIndex=me.getCellIndex(sFieldId);
        var clTable=me.getTableObject(sFieldId,true);
        var iRowCount=clTable.getRowCount(true);
        var arrColValues=[];
        for(var i=0; i < iRowCount; i++)
            arrColValues[i]=clTable.getValueAt(i,iColIndex, isGetHTMLContent,iColTypeRow,iColType,isGetSelectedId);
        return arrColValues;
    };

    this.getColumnSumValue=function(sFieldId,e)
    {
        //alert(sFieldId)
        var iColIndex=me.getCellIndex(sFieldId);
        var clTable=me.getTableObject(sFieldId,true);
        var iRowCount=clTable.getRowCount(true);
        var iSumOfCols=0;
        var sValue;

        for(var i=0; i < iRowCount; i++)
        {
            sValue=clTable.getValueAt(i,iColIndex);
            if(sValue)
                iSumOfCols+=parseFloat(sValue);
        }
        if(!iSumOfCols)
            iSumOfCols=0;
        return iSumOfCols;
    };

    this.getCellIndex=function(sFieldId)
    {
        //var objTd=document.getElementById(sFieldId+"[0]");

        return tablerow.getCellIndexByFieldId(sFieldId+"[0]");
    };

    this.getTableObject=function(sFieldId,isAppendIndex)
    {
        var sTableId=me.getTableId(sFieldId,isAppendIndex);
        if(sTableId!=null)
            return new sTable(sTableId);
        /*if(!isAppendIndex)
         alert(objTable.id)*/

        return null;
    };

    this.getTableId=function(sFieldId,isAppendIndex)
    {
        if(isAppendIndex && sFieldId.indexOf("[")==-1)
            sFieldId=sFieldId+"[0]";

        var objTable=document.getElementById(sFieldId);
        var sTableId=null;
        while(!sTableId)
        {
            if(!objTable)
                return null;
            objTable=objTable.parentNode;
            while(objTable && objTable.nodeName!="TABLE")
                objTable=objTable.parentNode;
            if(!objTable)
                return null;
            else if(!util.hasClass(objTable,"sTable"))
                sTableId=null; //inner tables inside in STable
            else
                sTableId=objTable.id;
        }
        return sTableId;
    };

    this.getIntTableId=function(sFieldId,isAppendIndex)
    {
        var sTableId = me.getTableId(sFieldId,isAppendIndex);
        if(sTableId!=null)
            return document.getElementById(sTableId).getAttribute("tableId");
        return 0;
    };

    this.getBodyFieldIndex=function(clTable,sFieldId,iRowIndex)
    {
        var iBodyFieldIndex=-1;
        var iCellIndex=me.getCellIndex(sFieldId);
        var elem=clTable.getElementAt(iRowIndex,iCellIndex);
        if(elem)
        {
            var sElemId = elem.id;
            if (sElemId && sElemId.indexOf("[") != -1)
                iBodyFieldIndex = sElemId.substring(sElemId.indexOf("[") + 1, sElemId.indexOf("]"));
        }
        return iBodyFieldIndex;
    };

    this.getMandatoryColumns=function(clTable)
    {
        var iColCount=clTable.getColCount()- me.END_HIDDEN_COLUMNS;
        var arrColIndexes=[];
        for(var i=me.START_HIDDEN_COLUMNS; i < iColCount; i++)
        {
            if(clTable.getElementAt(0,i).getAttribute("dispType")==Constants.DISPLAYTYPE_MANDATORY)
            {
                arrColIndexes[arrColIndexes.length]=i;
            }
        }
        return arrColIndexes;
    };

    /**
     * Querystring callback function which is used to perform invoke body validation function and skip empty rows.
     * @param elem
     * @param i
     */
    this.callbackQueryString=function(elem,i)
    {
        var sName=elem.name;
        if(sName.indexOf("b[")!=-1 && sName.indexOf("r[")!=-1 && sName.indexOf("bodyId")!=-1 )//  && elem.parentNode.cellIndex==1)
        {
            //alert(sName)
            var clTable=me.getTableObject(elem.id,false);
            var arrColIndexes=me.getMandatoryColumns(clTable);
            var objCurrentRow=elem.parentNode.parentNode;
            var hasRowValues=me.checkRowValidation(arrColIndexes,objCurrentRow.rowIndex-1,clTable,false);
            //var objForm=document.forms["frmMaster1792"];

            if(!hasRowValues)
            {
                var iSkipCount=objCurrentRow.getElementsByTagName("INPUT").length;
                iSkipCount+=objCurrentRow.getElementsByTagName("TEXTAREA").length;
                return iSkipCount;
            }
        }
        return 0;
    };

    /**
     * Validates body rows. It checks for any non-mandatory value in each row for non-empty and if exists validates mandatory fields for that row
     */
    this.validateBodyRows=function()
    {
        //arrTableIds[iIndex]=[sFormName,sTableId]
        if(!arrTableIds)
            return true;



        for(var i=0; i < arrTableIds.length; i++)
        {
            var sTableId=arrTableIds[i][0];

            Validation.clearMessage(null,false,"msg"+sTableId);

            var iRuleId=arrTableIds[i][1];
            var clTable=sTable.getInstance(sTableId);
            var arrTargetColumns=arrTableIds[i][2];

            if(iRuleId>0)
            {
                var objInput,iDataType,iCtrlType,iCellIndex;
                var sColumnLabel;

                for(var j=0; j < arrTargetColumns.length; j++)
                {
                    var arrValues=arrTargetColumns[j];
                    objInput=document.getElementById(arrValues[0]);
                    iDataType=objInput.getAttribute("datatype");
                    iCtrlType=objInput.getAttribute("ctrltype");
                    iCellIndex=tablerow.getCellIndexByFieldId(objInput.id);
                    sColumnLabel=clTable.getTableHeader().cells[iCellIndex].innerText;

                    if(iCtrlType==Constants.CONTROLTYPE_MULTI_SELECT)
                    {
                        if(!clMultiCombo.isValueSelected(objInput.id))
                            return false;
                    }

                    else if(!Validation.checkMandatory(objInput,sColumnLabel,iDataType,true,iCtrlType,true,null,false,"msg"+sTableId,1))
                    {
                        //Validation.showMessage(sColumnLabel+"  "+MsgHandler.getMsg(MsgConstants.REQUIRED),Validation.ERROR_MSG,null,Validation.ERROR_MANDATORY,false,"msg"+sTableId);
                        return false;
                    }
                }
            }

            var arrColIndexes=me.getMandatoryColumns(clTable);
            var iRowCount=clTable.getRowCount(true);

            for(var j=0; j < iRowCount; j++)
            {
                var iInvalidColIndex=me.checkRowValidation(arrColIndexes,j,clTable,true);
                if(iInvalidColIndex>=0)
                {
                    clTable.getElementAt(j,iInvalidColIndex).focus();
                    Validation.showMessage(MsgHandler.getMsg(MsgConstants.VALUE),Validation.ERROR_MSG,null,Validation.ERROR_MANDATORY,false,"msg"+sTableId);
                    return false;
                }
                else if(arrTargetColumns!=null)
                {
                    var byValidationType;

                    for(var k=0; k < arrTargetColumns.length; k++)
                    {
                        var arrValues = arrTargetColumns[k];
                        byValidationType = arrValues[1];

                        if (byValidationType == moduleView.CHECK_MIN_MAX)
                        {
                            //objInput=document.getElementById(arrValues[0]);
                            var iColIndex=moduleBody.getCellIndex(arrValues[0]);
                            objInput = clTable.getElementAt(j,iColIndex);

                            iDataType = objInput.getAttribute("datatype");
                            iCtrlType = objInput.getAttribute("ctrltype");

                            arrValues = moduleView.validateMinMax(objInput);
                            var isValid = arrValues[0];
                            var sMsg = arrValues[1];

                            if(!isValid)
                            {
                                objInput.focus();
                                Validation.showMessage(sMsg, Validation.ERROR_MSG, null, Validation.ERROR_CUSTOM, false, "msg" + sTableId);
                                return false;
                            }

                        }else if(byValidationType == moduleView.CHECK_INVALID)
                        {

                            var iColIndex=moduleBody.getCellIndex(arrValues[0]);
                            objInput = clTable.getElementAt(j,iColIndex);
                            iDataType = objInput.getAttribute("datatype");
                            iCtrlType = objInput.getAttribute("ctrltype");

                            if(objInput.value)
                            {
                                if (iCtrlType == Constants.CONTROLTYPE_PHONE)
                                {
                                    isValid = Validation.checkPhoneNo(objInput, MsgHandler.getMsg(MsgConstants.VALUE), true, true, Validation.ERROR_INVALID, false, "msg" + sTableId, true);
                                }
                                else if (iCtrlType == Constants.CONTROLTYPE_EMAIL)
                                {
                                    isValid = Validation.checkEMail(objInput, MsgHandler.getMsg(MsgConstants.VALUE), true, iCtrlType, true, Validation.ERROR_INVALID, false, "msg" + sTableId, true);
                                }
                                else if (iCtrlType == Constants.CONTROLTYPE_WEBSITE)
                                {
                                    isValid = Validation.checkWebsite(objInput, MsgHandler.getMsg(MsgConstants.VALUE), true, true, Validation.ERROR_INVALID, false, "msg" + sTableId, true);
                                }
                                if (!isValid)// && objInput.value != null && objInput.value.trim().length > 0)
                                {
                                    objInput.focus();
                                    Validation.showMessage(MsgHandler.getMsg(MsgConstants.VALUE), Validation.ERROR_MSG, null, Validation.ERROR_INVALID, false, "msg" + sTableId);
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }

        return true;
    };


    this.checkRowValidation=function(arrMandatoryCols,iRowIndex,clTable,isReturnColIndex)
    {
        var iColCount = clTable.getColCount() - me.END_HIDDEN_COLUMNS;
        var hasValues=false;
        var sValue;
        var iMandatoryColIndex=-1;

        for(var i=me.START_HIDDEN_COLUMNS; i < iColCount; i++)
        {
            sValue=clTable.getValueAt(iRowIndex,i);
            var objElement=clTable.getElementAt(iRowIndex,i);

            if(me.isMandatoryColumn(arrMandatoryCols,i))
            {
                //alert(hasValues+"----"+sValue)


                var iMinValue=objElement.getAttribute("minValue");
                if(iMinValue!=null && parseFloat(iMinValue)== parseFloat(sValue))
                    hasValues=true;
                else if(!me.hasValue(clTable,sValue,i))//util.trim(sValue).length==0)
                {
                    if(hasValues)
                        return i; //returning column index of mandatory column when other column value is not empty
                    else if(iMandatoryColIndex==-1)
                        iMandatoryColIndex=i;
                }
                else
                    hasValues=true;

                //alert("set "+iMandatoryColIndex)
            }
            else
            {
                if(objElement.parentNode.style.display=="none")
                    continue;

                var iBodyId = parseInt(clTable.getValueAt(iRowIndex,1));
                if(me.hasValue(clTable,sValue,i) || iBodyId > 0 )
                    hasValues = true;
            }
        }

        if(isReturnColIndex)
        {
            if(hasValues && iMandatoryColIndex>=0)
                return iMandatoryColIndex;
            else
                return -1; //-1 means no validation errors
        }
        else
        {
            if(iMandatoryColIndex>=0 || !hasValues) //it will be >= 0 when mandatory column value is not entered
                return false;
            else
                return true;
            /*if(hasValues && iMandatoryColIndex>=0)
             return false;
             else
             return true;*/
            //return hasValues; //returning boolean value to decide whether to include current row values in querystring
        }
    };

    this.hasValue=function(clTable,sValue,iColIndex)
    {
        var hasValues=false;
        if(util.trim(sValue).length>0)
        {
            var iColType=clTable.getColType(iColIndex);
            if(iColType==TYPE_NUMERIC || iColType==TYPE_FLOAT || iColType==TYPE_COMBOBOX)
            {
                if(sValue!=0)
                    hasValues=true;
            }
            else if(iColType==TYPE_TIME_PICKER)
            {
                if (sValue != "00:00" && sValue != "12:00 AM")
                    hasValues = true;
            }
            else if(iColType!=TYPE_BUTTON)
                hasValues=true;
        }

        return hasValues;
    };

    this.isMandatoryColumn=function(arrMandatoryCols,iColIndex)
    {
        for(var j=0; j < arrMandatoryCols.length; j++)
        {
            if(arrMandatoryCols[j]==iColIndex)
                return true;
        }
        return false;
    };

    this.cloneUploadField=function(clTable, iNewRowIndex, iColIndex, sValue)
    {

        var arrFileData = null, isEdit = false, sDownloadUrl = null;
        if (sValue != null && sValue.length > 0)
            arrFileData = sValue.split(":");
        if (arrFileData != null)
        {
            var arrValues = arrFileData[1].split("|");
            if (arrValues != null)
            {
                var sFileData = null, iRowIndex;
                var iModuleId = parseInt(arrValues[0])>0?parseInt(arrValues[0]):moduleView.getModuleId();
                var iTransId = parseInt(arrValues[1])>0?parseInt(arrValues[1]):moduleView.getTransId();
                var iFieldId = arrValues[2];
                var sFileName = arrValues[3];
                if (arrValues[4].split("&").length > 1)
                    iRowIndex = arrValues[4].split("&")[0];
                else
                    iRowIndex = arrValues[4];

                var iCurrentRowId = clTable.getElementAt(iRowIndex, iColIndex).id;
                var sFieldId = iCurrentRowId.split("[")[1];
                var iCurRowId = sFieldId.split("]")[0];
                if (iCurRowId != iRowIndex && parseInt(arrValues[0])==0)
                    iRowIndex = iCurRowId;

                var objImg = null, sSrcValue = null;
                objImg = document.getElementById("preview_F" + iFieldId + "[" + iRowIndex + "]");
                var objSpanTag = document.getElementById("fileName_F" + iFieldId + "[" + iRowIndex + "]");
                if (objSpanTag != null && objSpanTag.style.display != "none")
                {
                    objImg = objSpanTag;
                    var objAnchortag = objImg.children[0];
                    if (objAnchortag != null)
                        sSrcValue = objAnchortag.href;
                }
                else if (objImg != null)
                {
                    sSrcValue = objImg.src;
                }
                if (sSrcValue != null && sSrcValue.length > 0)
                {
                    var arrEditData = sSrcValue.split("?");
                    if (arrEditData.length > 1)
                    {
                        arrEditData = arrEditData[1].split("&");
                        for (var k = 0; k < arrEditData.length; k++)
                        {
                            var skey = arrEditData[k].split("=")[0];
                            if (skey == "pickFilename")
                            {
                                isEdit = true;
                                break;
                            }
                        }
                    }
                }
                var isNewOrClone = moduleView.getTransId() == 0;
                //if (!isEdit)
                //    sDownloadUrl = "downloadFile.do?tempPath=1&uploadFileName=" + iFieldId + "[" + iRowIndex + "]" + "_" + sFileName + "&moduleId=0&transId=0&fieldId=" + iFieldId + "&bodyRowIndex=" + iRowIndex; // + "|module:0|0|" + iFieldId + "|" + sFileName + "|" + iRowIndex;
                //else
                //    sDownloadUrl = "downloadFile.do?pickFilename=1&uploadFileName=" + iFieldId + "[" + iRowIndex + "]" + "_" + sFileName + "&moduleId=1792&transId=224&fieldId=" + iFieldId + "&bodyRowIndex=" + iRowIndex;
                //sFileData = "module:1792|224|" + iFieldId + "|" + sFileName + "|" + iRowIndex;

                //else
                //    sDownloadUrl = "fileCopy.do?uploadFileName=" + iFieldId + "[" + iRowIndex + "]" + "_" + sFileName + "&moduleId=1792&transId=224&fieldId=" + iFieldId + "&bodyRowIndex=" + iRowIndex;
                //sFileData = "module:"+iModuleId+"|"+iTransId+"|" + iFieldId + "|" + sFileName + "|" + iRowIndex;
                if(isEdit && !isNewOrClone) {
                    var iLastRowIndex = clTable.objTBody.parentNode.getAttribute("lastRowIndex") - 1;
                    var sTempFileName = null;
                    if (parseInt(arrValues[0]) > 0) {
                        sDownloadUrl = "downloadFile.do?pickFilename=1&uploadFileName=" + sFileName + "&moduleId=" + iModuleId + "&fieldId=" + iFieldId + "&transId=" + iTransId + "&bodyRowIndex=" + iRowIndex + "&documentId=0";
                        sFileData = "module:" + iModuleId + "|" + iTransId + "|" + iFieldId + "|" + sFileName + "|" + iRowIndex;
                        clTable.setValueAt(iNewRowIndex, iColIndex, sFileData, null, null, null, null, null, sDownloadUrl, sFileName);
                    } else {
                        if (!isEdit && sSrcValue != null) {
                            sTempFileName = iFieldId + "[" + iRowIndex + "]_" + sFileName;
                            sDownloadUrl = "fileCopy_nrf.do?uploadFileName=" + sFileName + "&moduleId=" + iModuleId + "&fieldId=" + iFieldId + "[" + iLastRowIndex + "]" + "&transId=" + iTransId + "&rowIndex=" + iRowIndex + "&sTempFileName=" + sTempFileName + "&documentId=0";
                        } else {  // -- for edit
                            sDownloadUrl = "fileCopy_nrf.do?uploadFileName=" + sFileName + "&moduleId=" + iModuleId + "&fieldId=" + iFieldId + "[" + iLastRowIndex + "]" + "&transId=" + iTransId + "&rowIndex=" + iRowIndex + "&documentId=0";
                        }

                        if (objSpanTag != null && objSpanTag.style.display != "none")
                            clTable.setValueAt(iNewRowIndex, iColIndex, sFileName, null, null, null, null, null, sDownloadUrl, sFileName, true);
                        else
                            clTable.setValueAt(iNewRowIndex, iColIndex, sFileName, null, null, null, null, null, sDownloadUrl, sFileName);
                    }
                }
            }
        }
        else
            clTable.setValueAt(iNewRowIndex, iColIndex, sValue, null, null, null, null, null, null);

    };

    this.handleKeyDown=function(sTableId,iBodyTableId,e)
    {
        e=cross.getEvent(e);
        var objInput = cross.getSrcElement(e);

        if(objInput)
        {
            if (e.ctrlKey)
            {

                var keycode = e.which || e.keyCode;
                var objTable = me.getTableObject(objInput.getAttribute("id"));

                if (objTable != null && objTable.getTableId() == sTableId)
                {
                    //sTableId = objTable.getTableId();

                    if (keycode == 73) //Ctrl+I
                    {
                        var objAddRow = document.getElementById(sTableId + "Add");
                        if (!util.hasClass(objAddRow, "hide"))
                        {
                            me.insertRow(sTableId, e);
                            moduleView.handleFreezeColumnOnAddrow(sTableId);
                        }

                        cross.cancelBubble(e, false, false);
                        return false;
                    }
                    else if (keycode == 68) //Ctrl+D
                    {
                        var objDeleteRow = document.getElementById(sTableId + "Delete");
                        if (!util.hasClass(objDeleteRow, "hide"))
                        {
                            var iRowIndex = formula.getBodyRowIndex(true, e);
                            if (iRowIndex > 0)
                                moduleView.deleteBodyRow(sTableId, iBodyTableId, iRowIndex, -1, null, e);
                        }

                        cross.cancelBubble(e, false, false);
                        return false;
                    }
                    else if (keycode == 82) //Ctrl+R -Ratio calculation
                    {
                        var iRatioSrcField = 0;
                        for (var i = 0; i < me.arrBodyTableIds.length; i++)
                        {
                            if (me.arrBodyTableIds[i][0] == sTableId)
                            {
                                iRatioSrcField = me.arrBodyTableIds[i][1];
                                break;
                            }
                        }

                        me.calculateRatio(sTableId, iRatioSrcField, e);//35293=body amount

                        cross.cancelBubble(e, false, false);
                        return false;
                    }
                    else if (keycode == 81) //Ctrl+Q - Cloning of Row data
                    {
                        var clTable = sTable.getInstance(sTableId);
                        var iCurrRowIndex = formula.getBodyRowIndex(true, e);
                        var iNewRowIndex = iCurrRowIndex + 1;
                        var objAddRow = document.getElementById(sTableId + "Add");
                        if (!util.hasClass(objAddRow, "hide"))
                        {
                            clTable.addRow(iNewRowIndex, iCurrRowIndex,null, true);
                            moduleView.handleFreezeColumnOnAddrow(sTableId);
                        }
                        var iColCount = clTable.getColCount();
                        for (i = 0; i < iColCount; i++)
                        {
                            var iColType = clTable.getColType(i, 0);
                            var sValue = clTable.getValueAt(iCurrRowIndex, i, null, null, null, true, true, true);
                            if (iColType == TYPE_UPLOAD_FILE)
                            {
                                me.cloneUploadField(clTable, iNewRowIndex, i, sValue);
                            }
                            else if (iColType == TYPE_COMBOBOX2)
                            {
                                var iComboId = clTable.getElementAt(iCurrRowIndex, i).id;
                                var arrLastCastVals = getComboInstance(iComboId).getRecentCascadeValues();
                                if (i == 1)
                                    sValue = 0;
                                clTable.setValueAt(iNewRowIndex, i, sValue);
                                if (arrLastCastVals != null)
                                {
                                    var iCurrComboId = clTable.getElementAt(iNewRowIndex, i).id;
                                    getComboInstance(iCurrComboId).setRecentCascadeValues(arrLastCastVals);
                                }
                            }
                            else
                            {
                                if (i == 1)
                                    sValue = 0;
                                clTable.setValueAt(iNewRowIndex, i, sValue);
                            }
                        }
                        clTable.updateRowSequence();
                        cross.cancelBubble(e, false, false);
                        return false;
                    }
                    else if (keycode == 89 ) // Ctrl+Y
                    {

                        var sId = null;
                        var clTable = sTable.getInstance(sTableId);
                        var iCurrRowIndex = formula.getBodyRowIndex(true, e);
                        if(e!=null && e.srcElement!=null)
                            sId = (e.srcElement.id).split("[")[0];
                        var iCellIndex=tablerow.getCellIndexByFieldId(sId+"[0]");
                        var iRowCount = clTable.getRowCount();
                        var iColType = clTable.getColType(iCellIndex, 0);
                        var sValue = clTable.getValueAt(iCurrRowIndex, iCellIndex, null, null, null, true, true, true);
                        for(var i=iCurrRowIndex+1; i<iRowCount-1; i++) {

                            var iFieldId = clTable.getElementAt(i, iCellIndex).id;
                            //if (iColType == TYPE_UPLOAD_FILE)
                            //{
                            //    me.cloneUploadField(clTable, i, iCellIndex, sValue);
                            //}
                            //else
                            if (iColType == TYPE_COMBOBOX2)
                            {
                                var iComboId = clTable.getElementAt(i, iCellIndex).id;
                                var arrLastCastVals = getComboInstance(iComboId).getRecentCascadeValues();
                                clTable.setValueAt(i, iCellIndex, sValue);
                                if (arrLastCastVals != null)
                                {
                                    var iCurrComboId = clTable.getElementAt(i, iCellIndex).id;
                                    getComboInstance(iCurrComboId).setRecentCascadeValues(arrLastCastVals);
                                }
                            }
                            else
                            {
                                clTable.setValueAt(i, iCellIndex, sValue);
                            }

                            var objField = document.getElementById(iFieldId);
                            var event = null;
                            try
                            {
                                event = new Event("blur");
                            }
                            catch(error)
                            {
                                event = document.createEvent("Event");
                                event.initEvent("blur", true, true);
                            }
                            objField.dispatchEvent(event);
                        }

                        var objElement=clTable.getElementAt(iCurrRowIndex, iCellIndex);
                        var objCombo = getComboInstance(objElement.id);
                        if(objCombo!=null)
                            objCombo.initTextField(objElement, -1)
                    }
                }
            }
            home.setIsFormDataUpdated(true);
        }

    };


    this.insertRow=function(sTableId,e)
    {
        var clTable=sTable.getInstance(sTableId);
        var iRowIndex=formula.getBodyRowIndex(true,e);
        if(iRowIndex>0)
            clTable.addRow(iRowIndex);
    };

    this.enableOrDisableRowAdd=function(sTableId,isDisable)
    {
        var objAddRow=document.getElementById(sTableId+"Add");
        me.enableOrDisableTableAction(objAddRow,isDisable);

        var objInsertRow=document.getElementById(sTableId+"Insert");
        me.enableOrDisableTableAction(objInsertRow,isDisable);
    };

    this.enableOrDisableRowDelete=function(sTableId,isDisable)
    {
        var objDeleteRow=document.getElementById(sTableId+"Delete");
        me.enableOrDisableTableAction(objDeleteRow,isDisable);
    };

    this.enableOrDisableTableAction=function(objAction,isDisable)
    {
        var isHidden = util.hasClass(objAction,"hide");
        if(isDisable)
        {
            if(!isHidden)
                util.addClass(objAction,"hide");
        }
        else if(isHidden)
            util.removeClass(objAction,"hide");
    };

    this.calculateRatio=function(sTableId,iRatioFieldId,e)
    {
        var objSrc = cross.getSrcElement(e);
        if(objSrc.id.indexOf("[")!=-1)
        {
            var iDataType=objSrc.getAttribute("datatype");

            if(iDataType==Constants.DATATYPE_NUMBER || iDataType==Constants.DATATYPE_BIGNUMBER || iDataType==Constants.DATATYPE_FRACTION)
            {
                var sSrcValue = objSrc.value;
                var iCurrentRowIndex = objSrc.parentNode.parentNode;
                var clTable = sTable.getInstance(sTableId);
                var iRowCount = clTable.getRowCount(true);

                if (sSrcValue && util.trim(sSrcValue).length > 0)
                {
                    var sElemId = objSrc.id;
                    sElemId = sElemId.substring(0, sElemId.indexOf("["));
                    var iCurrentCellIndex = me.getCellIndex(sElemId);
                    var iSrcCellIndex = me.getCellIndex("F" + iRatioFieldId);
                    var fSrcValue = parseFloat(sSrcValue);
                    var fSumValue = 0;

                    for (var i = 0; i < iRowCount; i++)
                    {
                        var sValue = clTable.getValueAt(i, iSrcCellIndex);
                        if (sValue)
                            fSumValue += parseFloat(sValue);
                    }

                    for (var i = 0; i < iRowCount; i++)
                    {
                        var sValue = clTable.getValueAt(i, iSrcCellIndex);
                        if (sValue)
                            sValue = parseFloat(sValue);
                        else
                            sValue = 0;

                        if(iDataType==Constants.DATATYPE_NUMBER || iDataType==Constants.DATATYPE_BIGNUMBER)
                            clTable.setValueAt(i, iCurrentCellIndex, parseInt((sValue / fSumValue) * fSrcValue));
                        else
                            clTable.setValueAt(i, iCurrentCellIndex, (sValue / fSumValue) * fSrcValue);
                    }
                }
            }
        }
    };

};


var clModuleAPI=new function()
{
    app.registerInstance("clModuleAPI",clModuleAPI);
    // CrmApi constants
    var me=this;
    this.Combo_Master_Name=1;
    this.Combo_Master_Value=0;
    me.VALUE_TYPE_ATTACHMENT_NAME = 2;
    me.VALUE_TYPE_ATTACHMENT_URL = 3;
    this.arrCallBacks=[];

    this.onAddRowHandler=null;
    this.onAddRowHandlerArgs=null;

    /**
     * This method is used to set add row handlers
     * @param fnHandler
     * @param arrArgs
     */
    this.setOnAddRowhandler =function(fnHandler, arrArgs)
    {
        moduleView.setOnAddRowhandler(fnHandler, arrArgs)
    };

    this.onDeleteRowHandler=null;
    this.onDeleteRowHandlerArgs=null;
    /**
     * This method is used to set delete row handlers
     * @param fnHandler
     * @param arrArgs
     */
    this.setOnDeleteRowhandler =function(fnHandler, arrArgs)
    {
        moduleView.setOnDeleteRowhandler(fnHandler, arrArgs)
    };

    this.onBeforeDeleteRowHandler=null;
    this.onBeforeDeleteRowHandlerArgs=null;

    /**
     * This method is used to set before delete row handlers
     * @param fnHandler
     * @param arrArgs
     */
    this.setBeforeDeleteRowhandler= function(fnHandler, arrArgs)
    {
        moduleView.setBeforeDeleteRowhandler(fnHandler, arrArgs)
    };

    /**
     * This function can be used to set the value of a given field id
     * @param iFieldId
     * @param sValue
     * @param iComboType
     */
    this.setFieldValue=function(iFieldId,sValue,iComboType)
    {
        if(iFieldId instanceof Array && sValue instanceof Array && iComboType instanceof Array)
        {
            var arrFieldIds=iFieldId;
            var arrValues=sValue;
            var arrComboType = iComboType;
            for(var i=0; i < arrFieldIds.length; i++)
            {
                var objResponse=setFieldValue(arrFieldIds[i], arrValues[i],arrComboType[i]);
                if(objResponse["status"]!=clCrmApiHandler.STATUS_SUCCESS)
                    return objResponse;
            }

            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
        }
        else
            return setFieldValue(iFieldId,sValue,iComboType);
    };

    /**
     * This function is used to enable/disable field.
     * @param iFieldId
     * @param isEnable
     */
    function enableField(iFieldId,isEnable)
    {
        var  sFieldId="F"+iFieldId;
        var objField=document.getElementById(sFieldId);
        if(objField)
        {
            if(!isEnable)
                $("#"+sFieldId).attr("disabled","disabled");
            else
                $("#"+sFieldId).removeAttr("disabled");

            return true;
        }

        return false;
    }

    /**
     * This function is used to Enable/Diable set of Fields.
     * @param arrFieldIds
     * @param isEnable
     */
    this.setFieldsEnable =function(arrFieldIds,isEnable)
    {
        var arrResponse={};
        for(var i=0; i < arrFieldIds.length ;i++)
        {
            var iFieldId=arrFieldIds[i];
            var isEnabled=enableField(iFieldId,isEnable);
            if(isEnabled)
            {
                arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
                arrResponse["data"]=null;
                arrResponse["fieldId"]=[iFieldId];
            }
            else
            {
                arrResponse["status"]=clCrmApiHandler.STATUS_ERROR;
                arrResponse["data"]=null;
                arrResponse["fieldId"]=[iFieldId];
                break;
            }
        }

        return arrResponse;
    };

    /**
     * This function is used to Enable/Diable particular Field
     * @param iFieldId
     * @param isEnable
     */
    this.setFieldEnable =function(iFieldId,isEnable)
    {
        var arrResponse={};
        var isEnabled=enableField(iFieldId,isEnable);
        if(isEnabled)
        {
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            arrResponse["data"]=null;
            arrResponse["fieldId"]=[iFieldId];
        }

        return arrResponse;
    };

    /**
     * This function is used to set css style to Field
     * @param iFieldId
     * @param sProperties
     */
    this.setFieldStyle =function(iFieldId,sProperties)
    {
        var  sFieldId="F"+iFieldId;
        var objField=document.getElementById(sFieldId);
        if(objField)
        {
            $("#"+sFieldId).attr("style",sProperties);
            var arrResponse={};
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            arrResponse["data"]=null;
            arrResponse["fieldId"]=[iFieldId];
        }
        return arrResponse;
    };

    /**
     * This function is used to set css Class to Field
     * @param iFieldId
     * @param sClassName
     */
    this.setFieldClass = function(iFieldId,sClassName)
    {
        var  sFieldId="F"+iFieldId;
        var objField=document.getElementById(sFieldId);
        if(objField)
        {
            util.addClass(objField,sClassName);
            var arrResponse={};
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            arrResponse["data"]=null;
            arrResponse["fieldId"]=[iFieldId];
        }
        return arrResponse;
    };

    /**
     * This function is used to remove css Class to Field
     * @param iFieldId
     * @param sClassName
     */
    this.removeFieldClass = function(iFieldId,sClassName)
    {
        var  sFieldId="F"+iFieldId;
        var objField=document.getElementById(sFieldId);
        if(objField)
        {
            util.removeClass(objField,sClassName);
            var arrResponse={};
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            arrResponse["data"]=null;
            arrResponse["fieldId"]=[iFieldId];
        }
        return arrResponse;
    };

    /**
     * This function is used to enable/disable body field
     * @param iFieldId
     * @param iRowIndex
     * @param isEnable
     */
    function enableBodyField(iFieldId,iRowIndex,isEnable)
    {
        var  sFieldId="F"+iFieldId+"["+iRowIndex+"]";
        var objField=document.getElementById(sFieldId);

        if(objField)
        {
            if(!isEnable)
                $('#F'+iFieldId+'\\['+iRowIndex+'\\]').attr("disabled","disabled");
            else
                $('#F'+iFieldId+'\\['+iRowIndex+'\\]').removeAttr("disabled");

            return true;
        }
        return false;
    }

    /**
     * This function is used to Enable/Diable set of body Fields.
     * @param arrFieldIds
     * @param iRowIndex
     * @param isEnable
     */
    this.setBodyFieldsEnable=function(arrFieldIds,iRowIndex,isEnable)
    {
        var arrResponse={};
        for(var i=0; i < arrFieldIds.length; i++)
        {
            var iFieldId=arrFieldIds[i];
            var isEnabled = enableBodyField(iFieldId, iRowIndex, isEnable);

            if (isEnabled)
            {
                arrResponse["status"] = clCrmApiHandler.STATUS_SUCCESS;
                arrResponse["data"] = null;
                arrResponse["fieldId"] = [iFieldId];
            }
            else
            {
                arrResponse["status"]=clCrmApiHandler.STATUS_ERROR;
                arrResponse["data"]=null;
                arrResponse["fieldId"]=[iFieldId];
                break;
            }
        }
        return arrResponse;
    };

    /**
     * This function is used to Enable/Diable particular body Field
     * @param iFieldId
     * @param iRowIndex
     * @param isEnable
     */
    this.setBodyFieldEnable=function(iFieldId,iRowIndex,isEnable)
    {
        var arrResponse={};
        var isEnabled=enableBodyField(iFieldId,iRowIndex,isEnable);

        if(isEnabled)
        {
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            arrResponse["data"]=null;
            arrResponse["fieldId"]=[iFieldId];
        }
        return arrResponse;
    };

    /**
     * This function is used to set css style to column of table
     * @param iFieldId
     * @param iRowIndex
     * @param sProperties
     */
    this.setBodyFieldStyle =function(iFieldId,iRowIndex,sProperties)
    {
        var  sFieldId="F"+iFieldId+"["+iRowIndex+"]";
        var objField=document.getElementById(sFieldId);
        if(objField)
        {
            $('#F'+iFieldId+'\\['+iRowIndex+'\\]').attr("style",sProperties);
            $('#F'+iFieldId+'\\['+iRowIndex+'\\]').attr("dstyle",sProperties);
            var arrResponse={};
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            arrResponse["data"]=null;
            arrResponse["fieldId"]=[iFieldId];
        }
        return arrResponse
    };

    /**
     * This function is used to set css class to column of table
     * @param iFieldId
     * @param iRowIndex
     * @param sClassName
     */
    this.setBodyFieldClass =function(iFieldId,iRowIndex,sClassName)
    {
        var  sFieldId="F"+iFieldId+"["+iRowIndex+"]";
        var objField=document.getElementById(sFieldId);
        if(objField)
        {
            util.addClass(objField,sClassName);
            var arrResponse={};
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            arrResponse["data"]=null;
            arrResponse["fieldId"]=[iFieldId];
        }
        return arrResponse
    };

    /**
     * This function is used to remove css class to column of table
     * @param iFieldId
     * @param iRowIndex
     * @param sClassName
     */
    this.removeBodyFieldClass =function(iFieldId,iRowIndex,sClassName)
    {
        var  sFieldId="F"+iFieldId+"["+iRowIndex+"]";
        var objField=document.getElementById(sFieldId);
        if(objField)
        {
            util.removeClass(objField,sClassName);
            var arrResponse={};
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            arrResponse["data"]=null;
            arrResponse["fieldId"]=[iFieldId];
        }
        return arrResponse
    };

    /**
     * This function is used to Enable/Diable particular row.
     * @param iTableId
     * @param iRowIndex
     * @param isEnable
     */
    this.setBodyRowEnable = function(iTableId,iRowIndex,isEnable)
    {

        var clTable=document.getElementById("B"+iTableId);
        var sTableId=clTable.getAttribute("tableId");
        var objBodyTable= new sTable(sTableId);
        var objRow=objBodyTable.getRow(iRowIndex);
        var iColCount=objBodyTable.getColCount()- ((me.END_HIDDEN_COLUMNS!=undefined && me.END_HIDDEN_COLUMNS!=null )?me.END_HIDDEN_COLUMNS:0);
        for(i=0;i<iColCount;i++)
        {
            var objElem = objBodyTable.getElementAt(iRowIndex,i);
            var objElemId=util.trim(objElem.id);
            var objTdElem=objElem.parentNode;
            if(objElemId.length>0 && objTdElem.style.display=="")
            {
                var sFieldId=objElemId.split("[");
                var iColIndex=sFieldId[1].split("]");
                if(!isEnable)
                    $('#'+sFieldId[0]+'\\['+iColIndex[0]+'\\]').attr("disabled","disabled");
                else
                    $('#'+sFieldId[0]+'\\['+iColIndex[0]+'\\]').removeAttr("disabled");
                var arrResponse={};
                arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
                arrResponse["data"]=null;
            }
        }

        return arrResponse

    }

    /**
     * This function is used to set css style to row of table
     * @param iTableId
     * @param iRowIndex
     * @param sProperties
     */
    this.setBodyRowStyle = function(iTableId,iRowIndex,sProperties)
    {
        var clTable=document.getElementById("B"+iTableId);
        var sTableId=clTable.getAttribute("tableId");
        var objBodyTable= new sTable(sTableId);
        var objRow=objBodyTable.getRow(iRowIndex);
        var iColCount=objBodyTable.getColCount()- ((me.END_HIDDEN_COLUMNS!=undefined && me.END_HIDDEN_COLUMNS!=null )?me.END_HIDDEN_COLUMNS:0);
        for(i=0;i<iColCount;i++)
        {
            var objElem = objBodyTable.getElementAt(iRowIndex,i);
            var objElemId=util.trim(objElem.id);
            var objTdElem=objElem.parentNode;
            if(objElemId.length>0 && objTdElem.style.display=="")
            {
                var sFieldId=objElemId.split("[");
                var iColIndex=sFieldId[1].split("]");
                $('#'+sFieldId[0]+'\\['+iColIndex[0]+'\\]').attr("style",sProperties);
                $('#'+sFieldId[0]+'\\['+iColIndex[0]+'\\]').attr("dstyle",sProperties);
                var arrResponse={};
                arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
                arrResponse["data"]=null;
            }
        }

        return arrResponse
    };

    /**
     * This function is used to set css Class to row of table
     * @param iTableId
     * @param iRowIndex
     * @param sClassName
     */
    this.setBodyRowClass = function(iTableId,iRowIndex,sClassName)
    {
        var clTable=document.getElementById("B"+iTableId);
        var sTableId=clTable.getAttribute("tableId");
        var objBodyTable= new sTable(sTableId);
        var objRow=objBodyTable.getRow(iRowIndex);
        var iColCount=objBodyTable.getColCount()- ((me.END_HIDDEN_COLUMNS!=undefined && me.END_HIDDEN_COLUMNS!=null )?me.END_HIDDEN_COLUMNS:0);
        for(i=0;i<iColCount;i++)
        {
            var objElem = objBodyTable.getElementAt(iRowIndex,i);
            var objElemId=util.trim(objElem.id);
            var objTdElem=objElem.parentNode;
            if(objElemId.length>0 && objTdElem.style.display=="")
            {
                util.addClass(objElem,sClassName);
                var arrResponse={};
                arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
                arrResponse["data"]=null;
            }
        }

        return arrResponse
    };

    /**
     * This function is used to remove css Class to row of table
     * @param iTableId
     * @param iRowIndex
     * @param sClassName
     */
    this.removeBodyRowClass = function(iTableId,iRowIndex,sClassName)
    {
        var clTable=document.getElementById("B"+iTableId);
        var sTableId=clTable.getAttribute("tableId");
        var objBodyTable= new sTable(sTableId);
        var objRow=objBodyTable.getRow(iRowIndex);
        var iColCount=objBodyTable.getColCount()- me.END_HIDDEN_COLUMNS;
        for(i=0;i<iColCount;i++)
        {
            var objElem = objBodyTable.getElementAt(iRowIndex,i);
            var objElemId=util.trim(objElem.id);
            var objTdElem=objElem.parentNode;
            if(objElemId.length>0 && objTdElem.style.display=="")
            {
                util.removeClass(objElem,sClassName);
                var arrResponse={};
                arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
                arrResponse["data"]=null;
            }
        }

        return arrResponse
    };

    /**
     * This function can be used to set the value of a given field id
     * @param iFieldId
     * @param sValue
     * @param iComboType
     */
    function setFieldValue(iFieldId,sValue,iComboType)
    {
        var sMessage;
        var sFieldId="F"+iFieldId;
        var objField=document.getElementById(sFieldId);
        if(objField)
        {
            var iDataType=objField.getAttribute("datatype");
            var iControlType=objField.getAttribute("ctrltype");
            var iValidationStatus;


            if(iControlType==Constants.CONTROLTYPE_COMBOBOX
                || iControlType==Constants.CONTROLTYPE_OPTIONCTRL)
            {
                var isValid;

                if(!iComboType)
                    iComboType=0;
                if(!isNaN(sValue) && sValue>0 && iComboType==0) {
                    sValue = util.getAPITransIdToInt(sValue);
                }
                if(iComboType==1)
                {
                    var objCombo = getComboInstance(sFieldId);
                    objCombo.searchAndAddItem(sValue,true,sFieldId,true);
                    if(objCombo.getSelectedId()>0)
                        isValid= true;
                    else
                        isValid= false;
                }
                else if(sValue )
                    isValid = moduleView.setFieldValueAsString(sFieldId, sValue,null,iComboType);
                else
                {
                    getComboInstance(sFieldId).clearSelection();
                    isValid = true;
                }
                if(isValid)
                    iValidationStatus=Validation.SUCCESS;
                else
                    iValidationStatus=Validation.ERROR_INVALID;
            }
            else if(iControlType==Constants.CONTROLTYPE_MULTI_SELECT)
            {
                if(sValue!=null)
                    moduleView.setFieldValueAsString(sFieldId, sValue);

            }
            else
            {
                iValidationStatus = Validation.validateValue(sValue, iDataType, iControlType, false);
                if(iValidationStatus==Validation.SUCCESS)
                    moduleView.setFieldValueAsString(sFieldId, sValue);
            }

            if(iValidationStatus==Validation.SUCCESS)
            {
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
            }
            else
            {
                var sLabel = Validation.getFieldLabel(objField, iControlType);
                if (iValidationStatus == Validation.ERROR_INVALID)
                    sMessage = sLabel + Validation.getMessage(Validation.ERROR_INVALID);
                else if (iValidationStatus == Validation.ERROR_MANDATORY)
                    sMessage = sLabel + Validation.getMessage(Validation.ERROR_MANDATORY);

                if (sMessage)
                {
                    return  clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,sMessage,["fieldId"],[iFieldId]);
                }
            }
        }
        else
            return  clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_FIELD,null,null),["fieldId"],[iFieldId]);

    };

    /**
     * This function can be used to retrieve value of a given field id
     * @param iFieldId
     * @param iType
     */
    this.getFieldValue=function(iFieldId,iType)
    {
        if(iFieldId instanceof Array)
        {
            var arrResponse={};
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            arrResponse["data"]=[];
            arrResponse["fieldId"]=[];

            var arrFieldIds=iFieldId;
            var arrTypes=iType;

            for(var i=0; i < arrFieldIds.length; i++)
            {
                var objResponse=getFieldValue(arrFieldIds[i], (arrTypes!=null?arrTypes[i]:1));
                if(objResponse["status"]!=clCrmApiHandler.STATUS_SUCCESS)
                    return objResponse;

                var objData=arrResponse["data"];
                objData[objData.length]=objResponse["data"];

                objData=arrResponse["fieldId"];
                objData[objData.length]=objResponse["fieldId"];
            }

            return arrResponse;

        }
        else
            return getFieldValue(iFieldId,iType);
    };

    /**
     * This function can be used to retrieve value of a given field id
     * @param iFieldId
     * @param iType
     */
    function getFieldValue(iFieldId,iType)
    {
        var  sFieldId="F"+iFieldId;
        var objField=document.getElementById(sFieldId);
        var sFieldValue ;
        if(objField)
        {
            if((objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_COMBOBOX
                || objField.getAttribute("ctrltype")== Constants.CONTROLTYPE_OPTIONCTRL))
            {
                if(iType==clModuleAPI.Combo_Master_Value)
                {
                    sFieldValue= moduleView.getFieldValueAsString(sFieldId);
                    if(sFieldValue>0)
                        sFieldValue=util.getAPITransId(sFieldValue,me.getComboMasterType(objField),0);
                }
                else if(iType==clModuleAPI.Combo_Master_Name)
                {
                    sFieldValue= getComboInstance(sFieldId).getSelectedMasterName();
                    if(sFieldValue.length>0)
                        sFieldValue=util.htmlEnDeCode.htmlDecode(sFieldValue);
                }
            }
            else if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_MULTI_SELECT) {
                sFieldValue = new Array();
                var arrIds = clMultiCombo.getSelectedIds(sFieldId);
                var arrValues = clMultiCombo.getSelectedItems(sFieldId);
                for(var i=0;i<arrIds.length;i++ )
                    sFieldValue[i]= arrValues[i]+"|"+arrIds[i];
            }
            else
                sFieldValue= moduleView.getFieldValueAsString(sFieldId);

            if(isNaN(sFieldValue) && sFieldValue.indexOf("\'")!=-1)
                sFieldValue=sFieldValue.replace("\'","&quot;");

            return  clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,sFieldValue,["fieldId"],[iFieldId]);
        }
        else
            return  clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_FIELD,null,null),["fieldId"],[iFieldId]);
    };

    /**
     * This function can be used to check for mandatory fields.
     * @param sFieldId
     */
    this.isMandatoryField = function(sFieldId)
    {
        var arrMandatoryFields=moduleView.getMandatoryFields();
        for(var i=0;i<arrMandatoryFields.length;i++)
        {
            for(var j=0; j<arrMandatoryFields[i].length;j++)
            {
                if(sFieldId==arrMandatoryFields[i][0])
                    return true;
            }
        }
        return false;
    };

    /**
     * This function can be used to set the value of a body table column
     * @param iFieldId
     * @param iRowIndex
     * @param sValue
     * @param iComboType
     */
    this.setBodyFieldValue =function(iFieldId,iRowIndex,sValue,iComboType)
    {
        var sMessage;
        var  sFieldId="F"+iFieldId;
        var objField=document.getElementById(sFieldId+"[0]");
        var iMasterType=objField.getAttribute("mastertype");
        var iDataType=objField.getAttribute("datatype");
        var iControlType=objField.getAttribute("ctrltype");
        var clTable=moduleBody.getTableObject(sFieldId+"[0]",false);
        if(!iComboType)
            iComboType=0;

        if(iRowIndex==-1)
        {
            iRowIndex= clTable.getCurrentRow();
            var iCellIndex=moduleBody.getCellIndex(sFieldId);
            objField=clTable.getElementAt(iRowIndex,iCellIndex);
        }
        else
        {
            var iColIndex=moduleBody.getCellIndex(sFieldId);
            objField=clTable.getElementAt(iRowIndex,iColIndex,0);
        }



        if(objField){

            var isValid,sStatus;

            if(iControlType==Constants.CONTROLTYPE_COMBOBOX || iControlType== Constants.CONTROLTYPE_OPTIONCTRL
                || (iDataType == Constants.DATATYPE_MASTER && iControlType!=Constants.CONTROLTYPE_MULTI_SELECT))
            {

                //   moduleView.setFieldValueAsString(objField.id,sValue,true,iComboType);

                var objCombo=getComboInstance(objField.id)

                if(!isNaN(sValue) && sValue>0 && iComboType==0)
                    sValue=util.getAPITransIdToInt(sValue);

                if(iMasterType==0)
                {
                    if(!iComboType)
                        iComboType=0;

                    if(sValue>0)
                    {
                        sStatus= objCombo.setSelectedMasterId(sValue);
                    }
                    else if(sValue!=null && isNaN(sValue))
                    {
                        sStatus=objCombo.setSelectedKey(sValue);
                    }
                    else
                        objCombo.setSelectedIndex(-1);
                    //getComboInstance(sFieldId).setSelectedKey(sValue);
                }
                else
                {
                    if(iMasterType==Genernal_StaticValues
                        || iMasterType==Genernal_Master)
                    {
                        sStatus=objCombo.checkAndAddItem(sValue,true);
                        /*if(isItemAdded)
                         return true;
                         else
                         return false;*/
                    }
                    else
                    {
                        /*  if(iComboType==1)
                         {
                         var arrComboItems =objCombo.getComboItems();
                         var arrScombos= arrComboItems[0];
                         var iArrCombos = arrComboItems[1];
                         for(var i=0;i<arrScombos.length;i++)
                         {
                         if(arrScombos[i]==util.trim(sValue))
                         objCombo.checkAndAddItem(sValue+"|"+iArrCombos[i],true);
                         }
                         if(objCombo.getSelectedId()<=0)
                         return false;
                         else
                         return true;
                         }

                         else*/

                        if(iComboType==0)
                            objCombo.searchAndAddItem(null, true, objField.id, true, sValue, true);
                        else
                            objCombo.searchAndAddItem(sValue, true, objField.id, true, null, true);


                        //objCombo.searchAndAddItem(sValue,true,objField.id,true,sValue,true);

                        if(objCombo.getSelectedId()<=0)
                            sStatus= false;
                        else// if(!isIgnoreTargetFormula)
                        {
                            //formula.getServerVarValue(objField,null);
                            sStatus= true;
                        }
                    }
                }

                if(objField.getAttribute("disabled")!=null || objField.getAttribute("dispType")==Constants.DISPLAYTYPE_READONLY)
                    moduleView.setFieldValueAsAttr(objField,null,true);


                /*
                 if(iComboType==1 && sValue!=null)
                 {
                 var objCombo = getComboInstance(objField.id);
                 objCombo.searchAndAddItem(sValue,true,objField.id,true,sValue,true);
                 if(objCombo.getSelectedIndex()>0)
                 sStatus = true;
                 else
                 sStatus = false;

                 }
                 else
                 sStatus= moduleBody.setColValue(sFieldId,iRowIndex,sValue);*/

                if(sStatus)
                {
                    return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
                }
                else
                {
                    return  clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_VALUE,null,null),["fieldId"],[iFieldId]);
                }
            }
            else
                isValid=Validation.validateValue(sValue,iDataType,iControlType);

            if(isValid==Validation.SUCCESS)
            {
                if(iControlType==Constants.CONTROLTYPE_PICTUREBOX
                    || iControlType==Constants.CONTROLTYPE_DOCUMENTCTRL)
                {
                    if(iComboType==me.VALUE_TYPE_ATTACHMENT_URL)
                    {
                        //(sFieldId,iRowIndex,sValue,null,0,sImgURL,sDisplayName)
                        //downloadFile.do?&tempPath=1&moduleId=0&transId=0&fieldId=300042&bodyRowIndex=0|module:0|0|300042|clock.png|0
                        var sDocumentURL=null;
                        if(sValue)
                        {
                            if (sValue.indexOf("|") != -1)
                            {
                                sDocumentURL = sValue.substring(0, sValue.indexOf("|"));

                                var sDisplayName = sValue.substring(0, sValue.lastIndexOf("|"));
                                sDisplayName = sDisplayName.substring(sDisplayName.lastIndexOf("|")+1);
                                //var sDisplayName = sValue.substring(sValue.lastIndexOf("|") + 1);
                                sValue = sValue.substring(sValue.indexOf("|") + 1);
                            }
                            else
                                sDocumentURL = sValue;
                        }
                        moduleBody.setColValue(sFieldId,iRowIndex,sValue,null,0,sDocumentURL,sDisplayName);
                    }
                    else
                        moduleBody.setColValue(sFieldId,iRowIndex,sValue);
                }
                else
                    moduleBody.setColValue(sFieldId,iRowIndex,sValue);
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
            }
            else
            {
                if (isValid == Validation.ERROR_INVALID)
                    sMessage = MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_VALUE,null,null);
                else if (isValid == Validation.ERROR_MANDATORY)
                    sMessage = MsgHandler.getMsg(MsgConstants.CRMAPI_MANDATORY_VALUE,null,null);

                if (sMessage)
                {
                    return  clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,sMessage,["fieldId"],[iFieldId]);
                }
            }
        }
        else
            return  clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_FIELD,null,null),["fieldId"],[iFieldId]);

    };

    /**
     * This function can be used to get the master type.
     * @param objField
     */
    this.getComboMasterType = function(objField) {
        var iMasterType = getComboInstance(objField.id).iSqlfcMasterType;
        return (iMasterType>0)?iMasterType:objField.getAttribute("mastertype");
    };

    /**
     * This function can be used to retrieve value of a body table column
     * @param iFieldId
     * @param iRowIndex
     * @param iComboType
     */
    this.getBodyFieldValue = function(iFieldId,iRowIndex,iComboType)
    {
        var sColValue,objField;
        var sFieldId="F"+iFieldId;
        objField=document.getElementById(sFieldId+"[0]");
        var clTable=moduleBody.getTableObject(sFieldId+"[0]",false);
        if(iRowIndex==-1)
        {
            iRowIndex= clTable.getCurrentRow();
        }
        var iCellIndex=moduleBody.getCellIndex(sFieldId);
        var objField=clTable.getElementAt(iRowIndex,iCellIndex);
        if(objField){
            var iControlType=objField.getAttribute("ctrltype");

            if(iControlType==Constants.CONTROLTYPE_COMBOBOX
                || iControlType== Constants.CONTROLTYPE_OPTIONCTRL)
            {
                if(iComboType==clModuleAPI.Combo_Master_Value || iComboType==null)
                {
                    var iColIndex=moduleBody.getCellIndex(sFieldId);
                    var clTable=moduleBody.getTableObject(sFieldId,true);
                    sColValue=clTable.getValueAt(iRowIndex,iColIndex,null,null,null,true);
                    if (sColValue > 0)
                        sColValue = util.getAPITransId(sColValue, me.getComboMasterType(objField), 0);
                }
                else if(iComboType==clModuleAPI.Combo_Master_Name)
                {
                    sColValue= moduleBody.getColValue(sFieldId,iRowIndex);
                }
            }
            else if(objField.getAttribute("ctrltype")== Constants.CONTROLTYPE_DOCUMENTCTRL) {
                if(iComboType==clModuleAPI.VALUE_TYPE_ATTACHMENT_NAME)
                {
                    sColValue= moduleBody.getColValue(sFieldId,iRowIndex);
                }
                else if(iComboType==clModuleAPI.VALUE_TYPE_ATTACHMENT_URL)
                {
                    var sFileName = sColValue= moduleBody.getColValue(sFieldId,iRowIndex);
                    //"downloadFile.do?fieldId=" + iFieldId2 + "&bodyRowIndex=" + iBodyRowCounter + "|" + sSql + "";
                    var sUrl = "downloadFile.do?uploadFileName="+iFieldId+"["+iRowIndex+"]_"+sFileName+"&tempPath=1&moduleId=0&transId=0&fieldId="+iFieldId+"&bodyRowIndex="+iRowIndex;
                    //"module:" + iModuleId2 + "|" + iTransId2 + "|" + iFieldId2 + "|" + sSql + "|" + iBodyRowCounter;
                    var sFileData= "module:0|0|"+iFieldId+"|"+sFileName+"|"+iRowIndex;
                    sColValue= sUrl+"|"+sFileData;
                }
            }
            else
                sColValue= moduleBody.getColValue(sFieldId,iRowIndex);

            if(isNaN(sColValue) && sColValue.indexOf("\'")!=-1)
                sColValue=sColValue.replace("\'","&quot;");

            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,sColValue);
        }
        else
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_FIELD,null,null),["fieldId","rowIndex"],[iFieldId,iRowIndex]);
    };

    /**
     * This function can be used to add row in body table
     * @param iTableId
     */
    this.addBodyRow=function(iTableId)
    {
        var clTable=document.getElementById("B"+iTableId);
        if(clTable)
        {
            var sTableId=clTable.getAttribute("tableId");
            moduleView.onClkAddRow(sTableId);
        }
        else
        {
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_TABLE,null,null));
        }
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
    };

    /**
     * This function is used to delete particular row of table
     * @param iTableId
     * @param iRowIndex
     */
    this.deleteBodyRow=function(iTableId,iRowIndex)
    {
        var objBodyTableInfo=document.getElementById("B"+iTableId);
        if(objBodyTableInfo)
        {
            var sTableId=objBodyTableInfo.getAttribute("tableId");
            //var iBodyFieldIndex=objBodyTableInfo.getAttribute("fieldIndex");
            //var sFldPrefix=objBodyTableInfo.getAttribute("fieldPrefix");
            var clTable= new sTable(sTableId);
            var iRowCnt=clTable.getRowCount();

            if(iRowIndex < iRowCnt-1)
            {
                moduleView.deleteBodyRow(sTableId, iTableId,iRowIndex,-1,null,null);
                //clTable.deleteRow(iRowIndex,false,true);
            }
            else
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_ROW,null,null));
        }
        else
        {
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_TABLE,null,null));
        }


        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
    };

    /**
     * This function is used to delete all rows of the table
     * @param iTableId
     */
    this.deleteAllBodyRows=function(iTableId)
    {
        var objBodyTableInfo=document.getElementById("B"+iTableId);
        if(objBodyTableInfo)
        {
            var sTableId=objBodyTableInfo.getAttribute("tableId");
            //var iBodyFieldIndex=objBodyTableInfo.getAttribute("fieldIndex");
            //var sFldPrefix=objBodyTableInfo.getAttribute("fieldPrefix");
            var clTable= new sTable(sTableId);
            var iRowCnt=clTable.getRowCount();

            if(iRowCnt > 0)
            {
                moduleView.deleteBodyRows(sTableId, iTableId,0,-1,null,true,null);
                //clTable.deleteRow(iRowIndex,false,true);
            }
            else
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_ROW,null,null));
        }
        else
        {
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_TABLE,null,null));
        }


        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
    };

    /**
     * This function is used to save Printlayout
     */
    this.doForceSave=function()
    {
        var isSaving = moduleView.doSave();
        if(!isSaving)
            util.toggleBackground(false);

        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
    };

    /**
     * This function can be used to set cells with values in particular row
     * @param iTableId
     * @param iRowIndex
     * @param arrValues
     */
    this.setRowWithValues=function(iTableId,iRowIndex,arrValues)
    {
        var iCount=0;
        var ArrResponse=new Array();
        var clTable=document.getElementById("B"+iTableId);
        if(clTable)
        {
            var sTableId=clTable.getAttribute("tableId");
            for(var i=0;i<arrValues.length;i++)
            {
                var iFieldIds=arrValues[i][0];
                var iFieldValues=arrValues[i][1];
                var iComboType = arrValues[i][2];
                if(arrValues[i][3]!=undefined)
                    iComboType = arrValues[i][3];
                var arrApiResponse=clModuleAPI.setBodyFieldValue(iFieldIds,iRowIndex,iFieldValues,iComboType);
                if(arrApiResponse.status==clCrmApiHandler.STATUS_SUCCESS)
                {
                    ArrResponse.push(arrApiResponse.status);
                    iCount=iCount+1;
                }
                else
                    ArrResponse.push(arrApiResponse.data);
            }
            if(iCount==arrValues.length)
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
            else
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_ERROR,ArrResponse);
        }
        else
        {
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_TABLE,null,null));
        }
    };

    /**
     * This function can be used to get Current Row Index
     * @param iTableId
     */
    this.getCurrentRow=function(iTableId)
    {
        var clTable=document.getElementById("B"+iTableId);
        if(clTable) {
            var objTable = clTable.getAttribute("tableId");
            var sTableId=new sTable(objTable);
            var iRowIndex= sTableId.getCurrentRow();
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,iRowIndex);
        }
    };

    /**
     * This function can be used to get no. of rows in table
     * @param iTableId
     */
    this.getTableRowCount=function(iTableId)
    {
        var clTable=document.getElementById("B"+iTableId);
        if(clTable) {
            var objTable = clTable.getAttribute("tableId");
            var sTableId=new sTable(objTable);
            var iRowCount= sTableId.getRowCount(true);
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,iRowCount);
        }
    };

    /**
     * This function can be used to insert values in row
     * @param iTableId
     * @param iRowIndex
     * @param arrValues
     */
    this.insertRowWithValues=function(iTableId,iRowIndex,arrValues)
    {
        var iCount=0;
        var clTable=document.getElementById("B"+iTableId);
        if(clTable)
        {
            var sTableId=clTable.getAttribute("tableId");
            var objTable=new sTable(sTableId);
            objTable.insertRow(iRowIndex);
            var ArrResponse=new Array();
            for(var i=0;i<arrValues.length;i++)
            {
                var iFieldIds=arrValues[i][0];
                var iFieldValues=arrValues[i][1];
                var iComboType = arrValues[i][2];
                if(arrValues[i][3]!=undefined)
                    iComboType = arrValues[i][3];
                var arrApiResponse=clModuleAPI.setBodyFieldValue(iFieldIds,iRowIndex,iFieldValues,iComboType);
                if(arrApiResponse.status==clCrmApiHandler.STATUS_SUCCESS)
                {
                    ArrResponse.push(arrApiResponse.status);
                    iCount=iCount+1;
                }
                else
                    ArrResponse.push(arrApiResponse.data);
            }
            if(iCount==arrValues.length)
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
            else
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_ERROR,ArrResponse);

        }
        else
        {
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_TABLE,null,null));
        }
    };

    /**
     * This function can be used to add row with cells filled in body table
     * @param iTableId
     * @param arrValues
     */
    this.addRowWithValues =function(iTableId,arrValues)
    {
        var iCount=0;
        var clTable=document.getElementById("B"+iTableId);
        if(clTable)
        {
            var sTableId=clTable.getAttribute("tableId");
            var objTable=new sTable(sTableId);
            moduleView.onClkAddRow(sTableId);

            var iRowCount = objTable.getRowCount(true);
            var ArrResponse=new Array();
            for(var i=0;i<arrValues.length;i++)
            {
                var iFieldIds=arrValues[i][0];
                var iFieldValues=arrValues[i][1];
                var iComboType = arrValues[i][2];
                if(arrValues[i][3]!=undefined)
                    iComboType = arrValues[i][3];
                var arrApiResponse=clModuleAPI.setBodyFieldValue(iFieldIds,iRowCount-1,iFieldValues,iComboType);
                if(arrApiResponse.status==clCrmApiHandler.STATUS_SUCCESS)
                {
                    ArrResponse.push(arrApiResponse.status);
                    iCount=iCount+1;
                }
                else
                    ArrResponse.push(arrApiResponse.data);
            }
            if(iCount==arrValues.length)
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
            else
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_ERROR,ArrResponse);

        }
        else
        {
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_TABLE,null,null));
        }

    };

    /**
     * This function is used to find duplicate value in any column.
     * @param iTableId
     * @param iColIndex
     * @param sValue
     * @param iComboType
     */
    this.isColumnValueExists=function(iTableId,iColIndex,sValue,iComboType)
    {
        var arrResponse={};
        var clTable=document.getElementById("B"+iTableId);
        var sTableId=clTable.getAttribute("tableId");
        var objBodyTable= new sTable(sTableId);
        var iRowCount=objBodyTable.getRowCount(true);
        var isMatched=false;
        for(var i=0;i<iRowCount;i++)
        {
            arrResponse["status"]=clCrmApiHandler.STATUS_SUCCESS;
            if(util.trim(sValue) == objBodyTable.getValueAt(i,iColIndex))
            {
                arrResponse["data"]=i;
                isMatched=true;
            }
            if(isMatched)
                break;
            else
                arrResponse["data"]=-1;
        }
        return arrResponse;
    };

    /**
     * This function can be used to get array of row values which are validated on Mandatory Fields.
     * @param arrFieldIds
     * @param iFromRowIndex
     * @param iToRowIndex
     * @param arrMandatoryFldIds
     * @param iComboType
     * @param iAttachmentType
     * @param isGetAPITransId
     */
    this.getRowValues=function(arrFieldIds,iFromRowIndex,iToRowIndex,arrMandatoryFldIds,iComboType,iAttachmentType,isGetAPITransId)
    {
        var arrValues=[];
        var iFieldId="F"+arrFieldIds[0];
        var clTable=moduleBody.getTableObject(iFieldId,true);
        var iMandatoryIndexes=[];
        for(var i=0; i < arrMandatoryFldIds.length; i++)
        {
            arrMandatoryFldIds[i]="F"+arrMandatoryFldIds[i];
            iMandatoryIndexes[i]=moduleBody.getCellIndex(arrMandatoryFldIds[i]);
        }

        var iColIndexes=[];
        for(var i=0; i < arrFieldIds.length; i++)
        {
            arrFieldIds[i]="F"+arrFieldIds[i];
            iColIndexes[i]=moduleBody.getCellIndex(arrFieldIds[i]);
        }

        //var iRowCount=clTable.getRowCount();
        if(!iFromRowIndex && !iToRowIndex && iFromRowIndex!=0)
        {
            iFromRowIndex=0;
            iToRowIndex=clTable.getRowCount(true)-1;
        }
        else if(!iToRowIndex)
            iToRowIndex=iFromRowIndex;
        else if(iFromRowIndex>iToRowIndex)
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,"FromIndex should be less than or equal to ToIndex");

        var isGetSelectedId=false, isGetAttachmentUrl=false; //by default returns item name
        if(iComboType==undefined || iComboType.length<=0)
            isGetSelectedId=true;
        else
        {
            if(isNaN(parseInt(iComboType)) || parseInt(iComboType)== 1)
                isGetSelectedId=false;
            else if(parseInt(iComboType) == 0)
                isGetSelectedId=true;
        }

        if(iAttachmentType==undefined || iAttachmentType.length<=0)
            isGetAttachmentUrl=false;
        else
        {
            if(isNaN(parseInt(iAttachmentType)) || parseInt(iAttachmentType)== 3)
                isGetAttachmentUrl=true;
            else if(parseInt(iAttachmentType) == 2)
                isGetAttachmentUrl=false;
        }

        if(isGetAPITransId==undefined || isGetAPITransId.length<=0 || isGetAPITransId=="false")
            isGetAPITransId=false;
        else
            isGetAPITransId=true;

        for(var iRowIndex=iFromRowIndex; iRowIndex <= iToRowIndex;iRowIndex++)
        {
            var isIncludeCurrentRow=true;
            for(var j=0; j < arrMandatoryFldIds.length; j++)
            {
                var sValue=clTable.getValueAt(iRowIndex, iMandatoryIndexes[j],null,null,null,isGetSelectedId,isGetAttachmentUrl);
                if(!sValue || sValue.length==0)
                {
                    isIncludeCurrentRow=false;
                    break;
                }

            }
            if(isIncludeCurrentRow)
            {
                var sArrColValues=[];
                for(var j=0; j < arrFieldIds.length; j++)
                {

                    if(isGetAPITransId)
                    {
                        var sFieldId = arrFieldIds[j];
                        var objField=document.getElementById(sFieldId+"[0]");
                        var iControlType=objField.getAttribute("ctrltype");

                        var iColIndex=moduleBody.getCellIndex(sFieldId);
                        var sColValue=clTable.getValueAt(iRowIndex,iColIndex,null,null,null,isGetSelectedId,isGetAttachmentUrl);
                        if(iControlType==Constants.CONTROLTYPE_COMBOBOX
                            || iControlType== Constants.CONTROLTYPE_OPTIONCTRL)
                        {
                            if(iComboType==clModuleAPI.Combo_Master_Value || iComboType.length<=0)
                            {
                                if (sColValue > 0)
                                    sColValue = util.getAPITransId(sColValue,me.getComboMasterType(objField), 0);
                            }
                        }

                        sArrColValues[sArrColValues.length] = sColValue;
                    }
                    else
                        sArrColValues[sArrColValues.length]=clTable.getValueAt(iRowIndex, iColIndexes[j],null,null,null,isGetSelectedId,isGetAttachmentUrl);
                }

                arrValues[arrValues.length]=sArrColValues;
            }
        }
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,arrValues);
    };

    /**
     * This function is used to set the event for a given Field.
     * (The Event is set during the page on Load and the event is triggered on the field depending on the Event type provided)
     * @param iFieldId
     * @param iEventType
     * @param iComboType
     */
    this.registerEventListener = function(iFieldId,iEventType,iComboType)
    {
        if(iEventType!=clCrmApiHandler.EVT_TYPE_FIELD_ONBLUR && iEventType!=clCrmApiHandler.EVT_TYPE_FIELD_ONCLICK && iEventType!=clCrmApiHandler.EVT_TYPE_FIELD_ONFOCUS)
        {
            return  clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,"Invalid Event");
        }

        var objField=document.getElementById("F"+iFieldId);
        if(objField)
        {
            if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_COMBOBOX
                || objField.getAttribute("ctrltype")== Constants.CONTROLTYPE_OPTIONCTRL)
            {
                if(iEventType==clCrmApiHandler.EVT_TYPE_FIELD_ONFOCUS)
                    getComboInstance(objField.id).setOnFocusScript("clModuleAPI.fieldEventListener(0,false,evt)");
                else
                    getComboInstance(objField.id).setOnLostScript("clModuleAPI.fieldEventListener(0,false,evt)");
            }
            else
                cross.addListener(objField, parseInt(iEventType), clModuleAPI.fieldEventListener, true, [0, false],Constants.SCOPE_SCREEN);

            me.arrCallBacks[me.arrCallBacks.length] = {
                "fieldId": iFieldId,
                "evtType": iEventType,
                "comboType": iComboType
            };
        }
        else
        {
            objField = document.getElementById("F" + iFieldId + "[0]");

            if (objField)
            {
                var clTable = moduleBody.getTableObject(objField.id,true);
                var iRowCount = clTable.getRowCount(true);

                for (var k = 0; k < iRowCount; k++)
                {
                    objField = document.getElementById("F" + iFieldId + "[" + k + "]");
                    if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_COMBOBOX
                        || objField.getAttribute("ctrltype")== Constants.CONTROLTYPE_OPTIONCTRL)
                    {
                        if(k==0)
                        {
                            if (iEventType == clCrmApiHandler.EVT_TYPE_FIELD_ONFOCUS)
                                getComboInstance(objField.id).setOnFocusScript("clModuleAPI.fieldEventListener(-1,true,evt)");
                            else
                                getComboInstance(objField.id).setOnLostScript("clModuleAPI.fieldEventListener(-1,true,evt)");
                        }
                    }
                    else
                        cross.addListener(objField, parseInt(iEventType), clModuleAPI.fieldEventListener, true, [k, true],Constants.SCOPE_SCREEN);

                    me.arrCallBacks[me.arrCallBacks.length] = {
                        "fieldId": iFieldId,
                        "evtType": iEventType,
                        "comboType": iComboType
                    };
                }
            }
            else
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR, MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_FIELD, null, null), ["fieldId"], [iFieldId]);
        }

    };

    /**
     * This function is used to attach event listner to field.
     * @param iRowIndex
     * @param isBodyField
     * @param e
     */
    this.fieldEventListener = function(iRowIndex,isBodyField,e)
    {
        var sValue;
        var isInvokeCallback=false;
        var objField = cross.getSrcElement(e);
        var iArrPosition=0;
        if(iRowIndex==-1)
        {
            var clTable=moduleBody.getTableObject(objField.id,true);
            iRowIndex= clTable.getCurrentRow();
        }

        var sElemId=objField.id;
        var iBodyFieldIndex=iRowIndex;
        if(sElemId && sElemId.indexOf("[")!=-1)
            iBodyFieldIndex=sElemId.substring(sElemId.indexOf("[")+1,sElemId.indexOf("]"));

        for(var i=0;i<me.arrCallBacks.length;i++)
        {
            isInvokeCallback=false;
            if(isBodyField)
            {

                if(objField.id=="F"+me.arrCallBacks[i].fieldId+"["+iBodyFieldIndex+"]")
                {
                    sValue = me.getBodyFieldValue(me.arrCallBacks[i].fieldId, iRowIndex, me.arrCallBacks[i].comboType);
                    isInvokeCallback=true;
                    iArrPosition=i;
                    break;
                }
            }
            else if(objField.id=="F"+me.arrCallBacks[i].fieldId)
            {
                sValue=me.getFieldValue(me.arrCallBacks[i].fieldId,me.arrCallBacks[i].comboType);
                isInvokeCallback=true;
                iArrPosition=i;
                break;
            }
        }
        if(isInvokeCallback)
        {
            var iFieldId = me.arrCallBacks[iArrPosition].fieldId;
            clCrmApiHandler.sendMessage(clCrmApiHandler.STATUS_SUCCESS,clCrmApiHandler.VIEW_TYPE_EDIT,"registerEventListener_"+iFieldId,
                [me.arrCallBacks[iArrPosition].fieldId,sValue.data,me.arrCallBacks[iArrPosition].evtType,iRowIndex]);
        }
    };

    /**
     * This function is used to set the event for a given Table.
     * (The Event is set during the page on Load and the event is triggered on the table depending on the Event type provided)
     * @param iTableId
     * @param iTableEvtType
     * @param isGetCurrentRow
     */
    this.registerTableEventListener = function(iTableId,iTableEvtType,isGetCurrentRow)
    {
        var clTable=document.getElementById("B"+iTableId);
        var sTableId=clTable.getAttribute("tableId");

        if(iTableEvtType==clCrmApiHandler.EVT_TYPE_TABLE_ON_ENTER)
        {
            var arrRows = document.getElementById(sTableId).rows;
            for (var j = 0; j < arrRows.length; j++)
            {
                var objRow = arrRows[j];
                var sOnClickData = objRow.getAttribute("onclick");
                var sOnKeyUpData = objRow.getAttribute("onkeyup");
                if (sOnClickData != null)
                {
                    sOnClickData += "clModuleAPI.tableEventListener('" + sTableId + "',"+iTableEvtType+");";
                    objRow.setAttribute("onclick", sOnClickData);
                }
                if (sOnKeyUpData != null)
                {
                    sOnKeyUpData += "clModuleAPI.tableEventListener('" + sTableId + "',"+iTableEvtType+");";
                    objRow.setAttribute("onkeyup", sOnKeyUpData);
                }
            }
        }
        else if(iTableEvtType==clCrmApiHandler.EVT_TYPE_TABLE_ON_ADD_ROW)
        {
            moduleView.setOnAddRowhandler(clModuleAPI.tableEventListener,[iTableId,iTableEvtType]);
        }
        else if(iTableEvtType==clCrmApiHandler.EVT_TYPE_TABLE_ON_DELETE_ROW)
        {
            moduleView.setOnDeleteRowhandler(clModuleAPI.tableEventListener,[iTableId,iTableEvtType]);
        }
        else if(iTableEvtType==clCrmApiHandler.EVT_TYPE_TABLE_BEFORE_DELETE_ROW)
        {
            moduleView.setBeforeDeleteRowhandler(clModuleAPI.tableEventListener,[iTableId,iTableEvtType,isGetCurrentRow]);
        }
    };

    /**
     * This function is used to attach event listner to table.
     * @param sTableId
     * @param iTableEvtType
     * @param isGetCurrentRow
     * @param iRowIndex
     */
    this.tableEventListener=function(sTableId,iTableEvtType,isGetCurrentRow,iRowIndex)
    {
        var iTableId=0;

        if(iTableEvtType == clCrmApiHandler.EVT_TYPE_TABLE_ON_ENTER)
        {
            var objTable= document.getElementById(sTableId);
            var objParentNode =objTable.parentNode.parentNode;
            var arrInputTags = objParentNode.querySelectorAll("input");
            iTableId = arrInputTags[0].value;
        }
        else //if(iTableEvtType == clCrmApiHandler.EVT_TYPE_TABLE_ON_ADD_ROW || iTableEvtType == clCrmApiHandler.EVT_TYPE_TABLE_ON_DELETE_ROW)
        {
            iTableId=sTableId;
        }

        if(isGetCurrentRow)
            clCrmApiHandler.sendMessage(clCrmApiHandler.STATUS_SUCCESS,clCrmApiHandler.VIEW_TYPE_EDIT,"registerTableEventListener_"+iTableEvtType,[iTableId,iRowIndex]);
        else
            clCrmApiHandler.sendMessage(clCrmApiHandler.STATUS_SUCCESS,clCrmApiHandler.VIEW_TYPE_EDIT,"registerTableEventListener_"+iTableEvtType,iTableId);
    };

    /**
     * This function is used to return row index of table whose any mandatory fields are empty.
     * @param arrMandatoryFldIds
     */
    this.getNewRowIndex=function(arrMandatoryFldIds)
    {
        var iCurrentEmptyRow=-1;
        var arrValues=[];
        var iFieldId="F"+arrMandatoryFldIds[0];
        var clTable=moduleBody.getTableObject(iFieldId,true);
        var iMandatoryIndexes=[];
        for(var i=0; i < arrMandatoryFldIds.length; i++)
        {
            arrMandatoryFldIds[i]="F"+arrMandatoryFldIds[i];
            iMandatoryIndexes[i]=moduleBody.getCellIndex(arrMandatoryFldIds[i]);
        }
        var iRowCount=clTable.getRowCount(true);
        for(var iRowIndex=iRowCount-1; iRowIndex >= 0;iRowIndex--)
        {
            var isIncludeCurrentRow=true;
            for(var j=0; j < arrMandatoryFldIds.length; j++)
            {
                var sValue=clTable.getValueAt(iRowIndex, iMandatoryIndexes[j]);
                if(!sValue || sValue.length==0)
                {
                    iCurrentEmptyRow=iRowIndex;
                }
            }
        }
        if(iCurrentEmptyRow>=0)
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,iCurrentEmptyRow);

        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,-1);
    };

    /**
     * This function is used to display global message
     * @param sMessage
     */
    this.showMsg=function(sMessage)
    {
        Validation.showMessage(sMessage,Validation.ERROR_MSG,null,null,true);
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,-1);
    };

    /**
     * This function is used to show Alert Box
     * @param sMessage
     */
    this.AlertMsg=function(sMessage) //iMsgType,
    {
        msg.showMessage(Validation.ERROR_MSG,sMessage);
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,-1);
    };

    /**
     * This function is used to display Field message
     * @param iFieldId
     * @param sMessage
     * @constructor
     */
    this.FieldMsg=function(iFieldId,sMessage)
    {
        var sFieldId="msgF"+iFieldId;
        var objField=document.getElementById(sFieldId);
        if(objField!=null)  /* && objField.style.display=="none" */
        {
            objField.style.display="";
            objField.innerHTML=sMessage;
            objField.className="errorMsg1";
        }
        else
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,"Invalid FieldId");

        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,-1);
    };

    /**
     * Returns current transId
     */
    this.getTransId = function()
    {
        var iAPITransId= moduleView.getAPITransId();
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,iAPITransId);
    };

    /**
     * This function is used to show business messages globally.
     * @param sMessage
     * @param iMsgType
     */
    this.showValidationMessage = function (sMessage,iMsgType)
    {
        var objDvMsg = document.getElementById("msgbox");
        if(objDvMsg!=null)
        {
            Validation.showMessage(sMessage,iMsgType,objDvMsg,null,true,null);
        }
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
    };

    /**
     * This function is used as callback function and to set response.
     * @param fDistance
     * @param arrParams
     */
    this.geoDistCallBack = function(fDistance,arrParams) {
        fDistance = parseFloat(fDistance);
        var objReturn = clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,fDistance);
        objReturn["viewType"] = arrParams[0];
        objReturn["target"] = arrParams[1];
        objReturn["msgType"] = clCrmApiHandler.MSG_TYPE_RESPONSE;//arrParams[2];
        window.postMessage(objReturn);
    };

    /**
     * This function is used to find the distance between two locations.
     * @param iPrevLatitude
     * @param iPrevLongitude
     * @param iLatitude
     * @param iLongitude
     * @param iViewType
     * @param sTargetFn
     */
    this.geoFindDistance = function (iPrevLatitude,iPrevLongitude,iLatitude,iLongitude,iViewType,sTargetFn)
    {
        if((iPrevLatitude<=0 && iPrevLongitude<=0) || (iLatitude<=0 && iLongitude<=0))
            return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_VALIDATION_ERROR,MsgHandler.getMsg(MsgConstants.CRMAPI_INVALID_DISTANCE_PARAMS,null,null));
        else
            clGeoMapUtils.findDistance(iPrevLatitude, iPrevLongitude, iLatitude, iLongitude, clModuleAPI.geoDistCallBack, [iViewType,sTargetFn]);
    };

    this.hideModuleGroup = function(iFieldId,isBodyGrid)
    {
        var objGroup = null;
        var objField = null;
        if(isBodyGrid)
            objField = document.getElementById("F"+iFieldId+"[0]");
        else
            objField = document.getElementById("F"+iFieldId);
        if(objField != null) {
            objGroup = moduleView.getFieldGroup(objField);
            if (objGroup != null) {
                objGroup.style.display = "none";
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS, null);
            }
        }
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_ERROR, null);
    };

    this.showModuleGroup = function(iFieldId,isBodyGrid)
    {
        var objGroup = null;
        var objField = null;
        if(isBodyGrid)
            objField = document.getElementById("F"+iFieldId+"[0]");
        else
            objField = document.getElementById("F"+iFieldId);
        if(objField != null) {
            objGroup = moduleView.getFieldGroup(objField);
            if (objGroup != null) {
                objGroup.style.display = "";
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS, null);
            }
        }
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_ERROR, null);
    };

    this.disableModuleGroup = function(iFieldId,isBodyGrid)
    {
        var objGroup = null;
        var objField = null;
        if(isBodyGrid)
            objField = document.getElementById("F"+iFieldId+"[0]");
        else
            objField = document.getElementById("F"+iFieldId);
        if(objField != null) {
            objGroup = moduleView.getFieldGroup(objField);
            if (objGroup != null) {
                moduleView.enableOrDisableGroup(objGroup, false);
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS, null);
            }
        }
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_ERROR, null);
    };

    this.enableModuleGroup = function(iFieldId,isBodyGrid)
    {
        var objGroup = null;
        var objField = null;
        if(isBodyGrid)
            objField = document.getElementById("F"+iFieldId+"[0]");
        else
            objField = document.getElementById("F"+iFieldId);
        if(objField != null) {
            objGroup = moduleView.getFieldGroup(objField);
            if (objGroup != null) {
                moduleView.enableOrDisableGroup(objGroup, true);
                return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS, null);
            }
        }
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_ERROR, null);
    };
};

var clProductsTable = new function()
{
    app.registerInstance("clProductsTable", clProductsTable);

    var me = this;

    this.PB_DATE_RANGE_IN_HEADER = 0;
    this.PB_DATE_RANGE_IN_BODY = 1;
    this.PB_PRODUCT_IN_HEADER = 2;
    this.PB_PRODUCT_IN_BODY = 3;
    this.PB_CUSTOMER_IN_HEADER = 4;
    this.PB_CUSTOMER_IN_BODY = 5;
    this.PB_LOCATION_IN_HEADER = 6;
    this.PB_LOCATION_IN_BODY = 7;
    //this.PB_QTY_RANGE_IN_HEADER = 8;
    this.PB_QTY_RANGE_IN_BODY = 9;
    this.PB_CURRENCY_IN_HEADER = 10;
    this.PB_CURRENCY_IN_BODY = 11;
    //this.PB_UNITS_IN_HEADER = 12;
    this.PB_UNITS_IN_BODY = 13;
    this.PB_TAG_IN_HEADER = 14;
    this.PB_TAG_IN_BODY = 15;

    this.iPriceBookSettings = 0;
    //this.iPriceBookFieldId = 0;
    this.iQtyFieldId = 0;
    this.iQtyTableId = 0;
    this.iArrPriceBookModules=[];

    this.isMultipleProductTables = false;
    this.isQtyRangeEnabled = false;
    this.iTagModuleId = 0;
    this.iPriceBookId = 0;

    this.setPriceBookFieldId = function(iFieldId)
    {
        var clPriceBookCombo = getComboInstance("F"+iFieldId);
        me.iPriceBookId = clPriceBookCombo.getSelectedId();
        me.iArrPriceBookModules[me.iArrPriceBookModules.length] = {"moduleId": Constants.PRICE_BOOKS,"fieldId": "F"+iFieldId,"isBody": false,"isEnabled":true};

        clPriceBookCombo.setOnLostScript("clProductsTable.onBlurPriceBook(this,evt)");
        me.setPriceBookSettings(clPriceBookCombo);
    };

    this.setPriceBookSettingsValue=function(iPriceBookSettings)
    {
        me.iPriceBookSettings = iPriceBookSettings;
    };

    this.setPriceBookSettings=function(clPriceBookCombo)
    {
        me.iPriceBookSettings = clPriceBookCombo.getSelectedAttr("iPriceBookSettings");
        //if (util.checkBit(me.iPriceBookSettings, me.PB_QTY_RANGE_IN_BODY))
        me.isQtyRangeEnabled = true;
    };

    this.isQtRangeEnabled = function()
    {
        return me.isQtyRangeEnabled;
    };

    this.onBlurPriceBook=function(elemPriceBook,e)
    {
        var clPriceBookCombo = getComboInstance(elemPriceBook.id);
        me.iPriceBookId = clPriceBookCombo.getSelectedId();
        me.setPriceBookSettings(clPriceBookCombo);

        for(var i = 0 ; i < me.iArrPriceBookModules.length; i++)
        {
            if(me.iArrPriceBookModules[i].moduleId != me.iTagModuleId)
                me.iArrPriceBookModules[i].isBody=false;
        }

        for(var i = 0 ; i < me.iArrPriceBookModules.length; i++)
        {
            if ( (me.iArrPriceBookModules[i].moduleId==Constants.PRODUCTS && util.checkBit(me.iPriceBookSettings, me.PB_PRODUCT_IN_BODY))
                    || (me.iArrPriceBookModules[i].moduleId==Constants.UNITS_MODULE && util.checkBit(me.iPriceBookSettings, me.PB_UNITS_IN_BODY))
                    || (me.iArrPriceBookModules[i].moduleId==Constants.LOCATION_MODULE && util.checkBit(me.iPriceBookSettings, me.PB_LOCATION_IN_BODY))
                    || (me.iArrPriceBookModules[i].moduleId==Constants.CURRENCY_MODULE && util.checkBit(me.iPriceBookSettings, me.PB_CURRENCY_IN_BODY)))
            {
                me.iArrPriceBookModules[i].isBody = true;
            }
        }
    };

    /*this.getPriceBookFieldId=function()
    {
        return this.iPriceBookFieldId;
    };*/

    this.setPriceBookTagInfo=function(iFieldId,iLinkMasterId,isBodyField,iBodyTableId)
    {
        me.iArrPriceBookModules[me.iArrPriceBookModules.length] = {"moduleId": iLinkMasterId,"fieldId": "F"+iFieldId,"isBody": isBodyField,"tableId":iBodyTableId,"isEnabled":true};
        me.iTagModuleId = iLinkMasterId;
    };


    this.setQtyFieldId=function(iQtyFieldId,iQtyTableId)
    {
        this.iQtyFieldId=iQtyFieldId;
        this.iQtyTableId=iQtyTableId;
    };

    this.getQtyFieldId=function()
    {
        return this.iQtyFieldId;
    };

    this.getQtyTableId=function()
    {
        return this.iQtyTableId;
    };

    this.getProductFieldId=function(iBodyTableId)
    {
        for(var i=0; i < me.iArrPriceBookModules.length; i++)
        {
            if(me.iArrPriceBookModules[i].moduleId == Constants.PRODUCTS)
            {
                if(iBodyTableId > 0)
                {
                    if(me.iArrPriceBookModules[i].tableId == iBodyTableId)
                        return me.iArrPriceBookModules[i].fieldId;
                }
                else
                    return me.iArrPriceBookModules[i].fieldId;
            }
        }

        return null;
    };

    this.isModuleLinkedToProduct=function(iLinkMasterId)
    {
        if(iLinkMasterId>0)
        {
            if (iLinkMasterId == Constants.PRODUCTS
                || iLinkMasterId == Constants.UNITS_MODULE
                || iLinkMasterId == Constants.LOCATION_MODULE
                || iLinkMasterId == Constants.CURRENCY_MODULE
                || iLinkMasterId == Constants.PRICE_BOOKS
                || iLinkMasterId == me.iTagModuleId)
                return true;
        }
        return false;
    };

    this.getProductLinkedModuleIds = function(iTableId,iCurrentModuleId)
    {
        var iBodyModuleIds=[];
        for(var i = 0; i < me.iArrPriceBookModules.length; i++)
        {
            //if(me.iArrPriceBookModules[i].moduleId!=iCurrentModuleId)//Constants.PRODUCTS)
            //{
            //me.iArrPriceBookModules[i].isBody == true ||
            if ((me.iArrPriceBookModules[i].moduleId == Constants.UNITS_MODULE) || (me.iArrPriceBookModules[i].tableId == iTableId || me.iArrPriceBookModules[i].tableId == 0))
                iBodyModuleIds[iBodyModuleIds.length] = [me.iArrPriceBookModules[i].moduleId, me.iArrPriceBookModules[i].fieldId];
            //}
        }

        //if(me.iTagModuleId>0)
        //    iBodyModuleIds[iBodyModuleIds.length]=me.iTagModuleId;

        return iBodyModuleIds.length>0?iBodyModuleIds:null;
    };

    this.setMasterFieldId = function(iLinkMasterId,sFieldId,objCombo)
    {
        me.setPrevSeqIdListener(objCombo);

        if(me.isModuleLinkedToProduct(iLinkMasterId))
        {
            //me.setPrevSeqIdListener(objCombo);

            var isBody;
            var iTableId=0;

            if ( (iLinkMasterId==Constants.PRODUCTS && util.checkBit(me.iPriceBookSettings, me.PB_PRODUCT_IN_BODY))
                || (iLinkMasterId==Constants.UNITS_MODULE && util.checkBit(me.iPriceBookSettings, me.PB_UNITS_IN_BODY))
                || (iLinkMasterId==Constants.LOCATION_MODULE && util.checkBit(me.iPriceBookSettings, me.PB_LOCATION_IN_BODY))
                || (iLinkMasterId==Constants.CURRENCY_MODULE && util.checkBit(me.iPriceBookSettings, me.PB_CURRENCY_IN_BODY)))
            {
                isBody = true;
            }
            else if(iLinkMasterId==Constants.PRODUCTS)
            {
                var objTxtFld = objCombo.getTextField();
                if(objTxtFld.id && objTxtFld.id.indexOf("[")!=-1)
                    isBody = true;
            }

            for(var i = 0; i < me.iArrPriceBookModules.length; i++)
            {
                if(me.iArrPriceBookModules[i].moduleId == iLinkMasterId && me.iArrPriceBookModules[i].fieldId == sFieldId)
                    return;
            }

            var sTableId = moduleBody.getTableId(sFieldId,true);
            if(sTableId!=null)
                iTableId = document.getElementById(sTableId).getAttribute("tableId");

            var sProductFieldId = me.getProductFieldId();

            if(iLinkMasterId==Constants.PRODUCTS)
            {
                if (sProductFieldId != null)
                    me.isMultipleProductTables = true;
            }

            me.iArrPriceBookModules[me.iArrPriceBookModules.length] = {"moduleId": iLinkMasterId,"fieldId": sFieldId,"isBody": isBody,"tableId":iTableId,"isEnabled":true};

        }
    };


    this.getValueByPriceBookSetting=function(iModuleId,iBodyFieldIndex,iProductTableId)
    {
        var iSelectedId=0;
        if(me.iArrPriceBookModules.length>0)
        {
            for(var i =0; i < me.iArrPriceBookModules.length; i++)
            {
                if(me.iArrPriceBookModules[i].isEnabled && me.iArrPriceBookModules[i].moduleId==iModuleId)
                {
                    if(me.iArrPriceBookModules[i].isBody)
                    {
                        if(iBodyFieldIndex!=null && iBodyFieldIndex>=0)
                        {
                            if (iProductTableId > 0)
                            {
                                if (me.iArrPriceBookModules[i].tableId == iProductTableId)
                                {
                                    iSelectedId = getComboInstance(me.iArrPriceBookModules[i].fieldId + "[" + iBodyFieldIndex + "]").getSelectedId();
                                    break;
                                }
                            }
                            else
                            {
                                if(getComboInstance(me.iArrPriceBookModules[i].fieldId + "[" + iBodyFieldIndex + "]"))
                                    iSelectedId = getComboInstance(me.iArrPriceBookModules[i].fieldId + "[" + iBodyFieldIndex + "]").getSelectedId();
                                else
                                    iSelectedId = 0;
                                break;
                            }
                        }
                        else
                            break;
                    }
                    else
                    {
                        var objCombo=null;

                        if (iProductTableId > 0)
                        {
                            if (me.iArrPriceBookModules[i].tableId == iProductTableId)
                            {
                                iSelectedId = getComboInstance(me.iArrPriceBookModules[i].fieldId + "[" + iBodyFieldIndex + "]").getSelectedId();
                                break;
                            }
                        }
                        else
                        {
                            if(iBodyFieldIndex!=null && iBodyFieldIndex>=0)
                                objCombo = getComboInstance(me.iArrPriceBookModules[i].fieldId + "[" + iBodyFieldIndex + "]");

                            if(!objCombo)
                                objCombo = getComboInstance(me.iArrPriceBookModules[i].fieldId);

                            if (objCombo)
                                iSelectedId = objCombo.getSelectedId();


                            /*if (objCombo)
                                iSelectedId = objCombo.getSelectedId();
                            else
                            {
                                objCombo = getComboInstance(me.iArrPriceBookModules[i].fieldId + "[" + iBodyFieldIndex + "]");
                                if (objCombo)//to support Units functionality in prev. implementations where isBody might be false
                                    iSelectedId = objCombo.getSelectedId();
                            }*/
                            break;
                        }


                    }
                }
            }
        }

        if(iSelectedId==-1)
            iSelectedId=0;

        return iSelectedId;
    };

    this.getProductTableId=function(sCurrentFieldId)
    {
        var iProductTableId=0;

        if(me.isMultipleProductTables && sCurrentFieldId)
        {
            for (var i = 0; i < me.iArrPriceBookModules.length; i++)
            {
                if (me.iArrPriceBookModules[i].moduleId == Constants.PRODUCTS && me.iArrPriceBookModules[i].isBody==true)
                {
                    var iTableId = moduleBody.getIntTableId(sCurrentFieldId,true);

                    if(me.iArrPriceBookModules[i].tableId==iTableId)
                    {
                        iProductTableId=me.iArrPriceBookModules[i].tableId;
                        break;
                    }
                }
            }
        }

        return iProductTableId;
    };

    this.isProductRowEmpty=function(iBodyFieldIndex,sCurrentFieldId)
    {
        var iProductTableId=me.getProductTableId(sCurrentFieldId);
        if(me.iPriceBookSettings > 0)
        {
            if (me.getValueByPriceBookSetting(Constants.PRODUCTS, iBodyFieldIndex, iProductTableId) > 0
                || me.getValueByPriceBookSetting(Constants.UNITS_MODULE, iBodyFieldIndex, iProductTableId) > 0
                || me.getValueByPriceBookSetting(me.iTagModuleId, iBodyFieldIndex, iProductTableId) > 0
                || me.getValueByPriceBookSetting(me.LOCATION_MODULE, iBodyFieldIndex, iProductTableId) > 0)
                return false;

            return true;
        }

        return false;
    };

    this.getProductValuesKey = function(iModuleId,iSeqId,iBodyFieldIndex,sCurrentFieldId)
    {
        var iProductTableId=me.getProductTableId(sCurrentFieldId);

        var sKey=iModuleId+"_"+iSeqId;

        if(me.iPriceBookSettings > 0) //if pricebook is not defined, ignoring the below fields in the key combination
        {
            sKey += "_" + me.getValueByPriceBookSetting(Constants.PRICE_BOOKS, iBodyFieldIndex, iProductTableId);
            sKey += "_" + me.getValueByPriceBookSetting(Constants.UNITS_MODULE, iBodyFieldIndex, iProductTableId);

            if (me.iTagModuleId > 0)
                sKey += "_" + me.getValueByPriceBookSetting(me.iTagModuleId, iBodyFieldIndex, iProductTableId);
            else
                sKey += "_0";

            sKey += "_" + me.getValueByPriceBookSetting(Constants.CURRENCY_MODULE, iBodyFieldIndex, iProductTableId);
            sKey += "_" + me.getValueByPriceBookSetting(Constants.LOCATION_MODULE, iBodyFieldIndex, iProductTableId);
        }

        var iQty=0;
        if(me.isQtyRangeEnabled)
        {
            var objQty = null;
            if (iBodyFieldIndex != null && iBodyFieldIndex >= 0 && (objQty = document.getElementById("F" + me.iQtyFieldId + "[" + iBodyFieldIndex + "]")))//me.isQtyRangeEnabled &&
            {
                if (objQty.value)
                    iQty = parseInt(objQty.value);
            }
            /*else if(iQtyValue!=null && iQtyValue > 0)
             iQty=iQtyValue;*/
        }

        if(!iQty)
            iQty=1;

        sKey+="_"+iQty;

        return sKey;
        //product,units,tag,currency,location,qty--,customer
    };


    this.setPrevSeqIdListener=function(objCombo)
    {
        var sScript=objCombo.getOnFocusScript();
        if(!sScript || typeof(sScript)=="function" || (typeof(sScript)=="string" && sScript.indexOf("formula.setPreviousSeqId")==-1))
            objCombo.setOnFocusScript("formula.setPreviousSeqId(this,evt)");
    };

};


if(!moduleCallback)
{
    var moduleCallback=new function()
    {
        app.registerInstance("moduleCallback",moduleCallback);

        var objArrModuleCallbacks={};
        this.getInstance=function(iModuleId)
        {
            if(!objArrModuleCallbacks[iModuleId])
                objArrModuleCallbacks[iModuleId]=new CLModuleCallback();
            return objArrModuleCallbacks[iModuleId];
        };


        this.clearPrevInstance=function(iModuleId)
        {
            objArrModuleCallbacks[iModuleId]=null;
        };

    };
}

function CLModuleCallback()
{
    this.fnScriptBeforeSave=[];
    this.fnScriptAfterSave=[];
    this.fnScriptBeforeNew=[];
    this.fnScriptAfterNew=[];
    this.fnScriptBeforeCancel=[];
    this.fnScriptAfterCancel=[];
    this.fnScriptOnSaveAndNew=[];
    this.fnScriptOnOnlineCreation=[];
    this.fnScriptOnDuplicate=[];

    this.setScriptBeforeSave=function(fnScriptBeforeSave)
    {
        //alert("before add "+this.fnScriptBeforeSave)

        if(fnScriptBeforeSave)
            this.fnScriptBeforeSave[this.fnScriptBeforeSave.length]=fnScriptBeforeSave;

        // alert(this.fnScriptBeforeSave)
    };

    this.setScriptAfterSave=function(fnScriptAfterSave)
    {
        if(fnScriptAfterSave)
            this.fnScriptAfterSave[this.fnScriptAfterSave.length]=fnScriptAfterSave;
        //alert(this.fnScriptAfterSave)
    };

    this.setScriptBeforeNew=function(fnScriptBeforeNew)
    {
        if(fnScriptBeforeNew)
            this.fnScriptBeforeNew[this.fnScriptBeforeNew.length]=fnScriptBeforeNew;
    };

    this.setScriptAfterNew=function(fnScriptAfterNew)
    {
        if(fnScriptAfterNew)
            this.fnScriptAfterNew[this.fnScriptAfterNew.length]=fnScriptAfterNew;
    };

    this.setScriptBeforeCancel=function(fnScriptBeforeCancel)
    {
        if(fnScriptBeforeCancel)
            this.fnScriptBeforeCancel[this.fnScriptBeforeCancel.length]=fnScriptBeforeCancel;
    };

    this.setScriptAfterCancel=function(fnScriptAfterCancel)
    {
        if(fnScriptAfterCancel)
            this.fnScriptAfterCancel[this.fnScriptAfterCancel.length]=fnScriptAfterCancel;
    };

    this.setScriptOnSaveAndNew=function(fnScriptOnSaveAndNew)
    {
        if(fnScriptOnSaveAndNew)
            this.fnScriptOnSaveAndNew[this.fnScriptOnSaveAndNew.length]=fnScriptOnSaveAndNew;
    };

    this.setScriptOnOnlineCreation=function(fnScriptOnOnlineCreation)
    {
        if(fnScriptOnOnlineCreation)
            this.fnScriptOnOnlineCreation[this.fnScriptOnOnlineCreation.length]=fnScriptOnOnlineCreation;
    };

    this.setScriptOnDuplicate=function(fnScriptOnDuplicate)
    {
        if(fnScriptOnDuplicate)
            this.fnScriptOnDuplicate[this.fnScriptOnDuplicate.length]=fnScriptOnDuplicate;
    };

}

function CLConstraintEvalDTO(sConstraintName,iArrFieldIds,isBodyTable,isUniqueAcrossRecords)
{
    this.sConstraintName=sConstraintName;
    this.iArrFieldIds=iArrFieldIds;
    this.isBodyTable1=isBodyTable;
    this.isUniqueAcrossRecords1=isUniqueAcrossRecords;

    this.getConstraintName=function()
    {
        return this.sConstraintName;
    };

    this.getFieldIds=function()
    {
        return this.iArrFieldIds;
    };

    this.isBodyTable=function()
    {
        return this.isBodyTable1;
    };

    this.isUniqueAcrossRecords=function()
    {
        return this.isUniqueAcrossRecords1;
    };

}

//}



function CLRuleDTO(sRuleName,iLinkTypeId,iLinkType,iApplyOn,iRuleId,alTabHld)
{
    this.sRuleName = sRuleName;
    this.iLinkTypeId = iLinkTypeId;
    this.iLinkType = iLinkType;
    this.iApplyOn = iApplyOn;
    this.iRuleId = iRuleId;
    this.alTabHld = alTabHld;
}

function CLRuleTabDTO(iTabId,iMessageType,sErrorMessage,alConditionHld,alPropertiesHld,alAlertHld,alFormatHld)
{
    this.iTabId = iTabId;
    this.iMessageType = iMessageType;
    this.sErrorMessage = sErrorMessage;
    this.alConditionHld = alConditionHld;
    this.alPropertiesHld = alPropertiesHld;
    this.alAlertHld = alAlertHld;
    this.alFormatHld = alFormatHld;
}

function CLRulePropertiesDTO(iField,byDispType,iChangeValue,iLinkId,iComboValue,sValue,sCaption,sLinkFldName,sFieldName,valueName)
{
    this.iField = iField;
    this.byDispType = byDispType;
    this.iChangeValue = iChangeValue;
    this.iLinkId = iLinkId;
    this.iComboValue = iComboValue;
    this.sValue = sValue;
    this.sCaption = sCaption;
    this.sLinkFldName = sLinkFldName;
    this.sFieldName = sFieldName;
    this.sValueName = valueName;
}

function CLRuleConditionDTO(sOpenBrackets,sValue,sCloseBrackets,iField,iOperatorId,iCompareWith,iLinkId,iConjunction,iSequence,iComboValue,sLinkFldName,sFieldName,sCombo_comboValue,iDataType,iLinkMasterId,sValueName) //hasServerVariables(before sLinkFldName),
{
    this.sOpenBrackets = sOpenBrackets;
    this.sValue = sValue;
    this.sCloseBrackets = sCloseBrackets;
    this.iField = iField;
    this.iOperatorId = iOperatorId;
    this.iCompareWith = iCompareWith;
    this.iLinkId = iLinkId;
    this.iConjunction = iConjunction;
    this.iSequence = iSequence;
    this.iComboValue = iComboValue;
//    this.hasServerVariables = hasServerVariables;
    this.sLinkFldName=sLinkFldName;
    this.sFieldName=sFieldName;
    this.sCombo_comboValue=sCombo_comboValue;
    this.iDataType=iDataType;
    this.iLinkMasterId=iLinkMasterId;
    this.sValueName=sValueName;
}

function CLRuleFormatDTO(iField,iTextAlign,iCharacterCasing,iFont,sBannerText,sToolTip,sBackColor)
{
    this.iField = iField;
    this.iTextAlign = iTextAlign;
    this.iCharacterCasing = iCharacterCasing;
    this.iFont = iFont;
    this.sBannerText = sBannerText;
    this.sToolTip = sToolTip;
    this.sBackColor = sBackColor;
}

function CLRuleAlertDTO(iRuleAlertId,iType,iAlertTo,iSMS,iEmail,iDashBoard,iPopup,iGTalk,sSpecMessage)
{
    this.iRuleAlertId = iRuleAlertId;
    this.iType = iType;
    this.iAlertTo = iAlertTo;
    this.iSMS = iSMS;
    this.iEmail = iEmail;
    this.iDashBoard = iDashBoard;
    this.iPopup = iPopup;
    this.iGTalk = iGTalk;
    this.sSpecMessage = sSpecMessage;
}

var moduleRules=new function()
{
    app.registerInstance("moduleRules",moduleRules);

    var me=this;
    var P_TYPE_FIELD_PROP=1;
    var P_TYPE_DATA_FORMAT=2;
    var arrFieldRules;
    var arrOnSaveRuleIds=null;
    this.iArrOnloadRules=null; //stores ruleids which needs to be executed on window load
    this.iArrAlertIds=[];
    this.arrFieldRules={};

    this.addOnloadRule=function(iRuleId)
    {
        if(me.iArrOnloadRules==null)
            me.iArrOnloadRules=[];
        me.iArrOnloadRules[me.iArrOnloadRules.length]=iRuleId;
    };

    this.getRuleDefinedOnField=function(sFieldId,iEventApplied)
    {
        if(me.arrFieldRules[sFieldId])
        {
            var arrRule = me.arrFieldRules[sFieldId];//{"ruleId":iRuleId,"applyOn":iApplyOn};
            var iApplyOn = arrRule["applyOn"];
            if (util.checkBit(iApplyOn, iEventApplied))
            {
                return arrRule["ruleId"];
            }
        }
        return 0;
    };

    this.getAlertsToSend=function()
    {
        if(me.iArrAlertIds>0)
            return me.iArrAlertIds;
        return null;
    };

    this.getOnSaveRules=function()
    {
        return arrOnSaveRuleIds;
    };

    this.addOnSaveRule=function(iRuleId)
    {
        if(!arrOnSaveRuleIds)
            arrOnSaveRuleIds=[];
        arrOnSaveRuleIds[arrOnSaveRuleIds.length]=iRuleId;
    };

    this.setRulesArray=function(sRulesArray)
    {
        arrFieldRules=eval(sRulesArray);        
    };

    this.evalOnloadRules=function()
    {
        if(me.iArrOnloadRules)
        {
            for(var i=0; i < me.iArrOnloadRules.length; i++)
                me.evaluateRule(me.iArrOnloadRules[i]);
            me.iArrOnloadRules=null;
        }        
    };
    


    this.evaluateRule=function(iRuleId,e)//,sFieldId)
    {
        //util.writeToLog("evaluateRule "+iRuleId);
        e=cross.getEvent(e);

        var iStatus=Constants.MSG_SUCCESS;
        var arrData=null;
        var sSrcFldId=null;
        var iRuleIndex=-1;

        for(var i=0; i < arrFieldRules.length; i++)
        {
            if(arrFieldRules[i].ruleId==iRuleId)
            {
                iRuleIndex=i;
                arrData=arrFieldRules[i].tabs;
                sSrcFldId=arrFieldRules[i].linkTypeId;

                if(sSrcFldId.length<=4) //
                {
                    for(var j=0; j < arrData.length; j++)
                    {
                        sValues = arrData[j];
                        if (sValues != null)
                        {
                            var arrConditions=sValues[0];
                            if (arrConditions != null && arrConditions.length > 0)
                            {
                                var arrVariableDTOs=arrConditions[0];

                                for(var k=0; k < arrVariableDTOs.length; k++)
                                {
                                    if(arrVariableDTOs[k].iType==formula.VARTYPE_SCREEN)
                                    {
                                        var sBodyFieldId=moduleView.getFieldId(arrVariableDTOs[k].sValue);
                                        if(isBodyColumn(sBodyFieldId))
                                        {
                                            sSrcFldId=sBodyFieldId;
                                            break;
                                        }
                                    }

                                }

                            }

                        }

                        if(sSrcFldId.length>4)
                            break;
                    }
                }
            }
        }

        var isSrcBodyField=isBodyColumn(sSrcFldId);
        var clBodyTable=null;
        var iStartIndex=0;
        var iLength=1;
        var iBodyRowIndex=-1;
        var iBodyFieldIndex=-1;
        var isIncrementRowIndex=false;

        if(isSrcBodyField) //if body field either rule should apply to single or all the rows of body table. if it is not body field, its a normal rule 
        {
            clBodyTable=moduleBody.getTableObject(sSrcFldId,true);
            if(sSrcFldId.indexOf("[")!=-1)
            {
                var objElem=moduleView.getElementByFieldId(sSrcFldId,iRuleId);
                while(objElem.nodeName!="TR")
                    objElem=objElem.parentNode;
                iBodyRowIndex=objElem.rowIndex;
            }
            else if (formula.iBodyRowIndex != null && formula.iBodyRowIndex >= 0)
                iBodyRowIndex = formula.iBodyRowIndex;
            else
                iBodyRowIndex=formula.getBodyRowIndex(true,e);

            if(iBodyRowIndex < 0 ) //==-1) //looping all the rows for editmode onload rule
            {
                iLength=clBodyTable.getRowCount(true);
                isIncrementRowIndex=true;
            }
            else
            {
                //row-wise rule, evaluating for current row specified by iBodyRowIndex
                iStartIndex=iBodyRowIndex;//evaluate only current row
                iLength=iStartIndex+1;

                iBodyFieldIndex=formula.getBodyRowFieldIndex(iBodyRowIndex,clBodyTable);

                /*var objInput=cross.getSrcElement(e);
                var sId=objInput.id;
                if(sId.indexOf("[")!=-1)
                    iBodyFieldIndex=sId.substring(sId.indexOf("[")+1,sId.indexOf("]"));*/
            }

            //util.writeToLog(iBodyRowIndex+","+iStartIndex+","+iLength)
        }

        for(var i=iStartIndex; i<iLength; i++) //for normal rule, loop will be executed only once. For header-body rule it will be no. of rows in body. For row-wise evaluation, executed only once for the current row 
        {
            if(isIncrementRowIndex)
                iBodyRowIndex++;

            //util.writeToLog(iBodyRowIndex+","+iStartIndex+","+iLength)
            var objRule = arrFieldRules[iRuleIndex];
            var iPrevActionIndex=objRule['iPrevActionIndex'];

            var sValues,sCondition=null,iActionIndex=-1,isClearOldValues=true;
            
            for(var iTabIndex=0; iTabIndex < arrData.length; iTabIndex++)
            {
                sValues=arrData[iTabIndex];
                if(iActionIndex==-1)
                {
                    if(sValues!=null)
                    {
                        if(sValues[0]==null || sValues[0].length==0)
                            sCondition=true;
                        else
                        {
                            if(isSrcBodyField && iBodyFieldIndex==-1)
                                iBodyFieldIndex=moduleBody.getBodyFieldIndex(clBodyTable,sSrcFldId,iBodyRowIndex);

                            sCondition = me.evaluateCondition(sValues[0], isSrcBodyField, iBodyRowIndex, iBodyFieldIndex,iRuleId);
                        }
                    }
                    else
                        sCondition=false;

                    if(sCondition)
                        iActionIndex=iTabIndex;
                }

                //util.writeToLog("sCondition  "+sCondition)
                //util.writeToLog("iActionIndex="+iActionIndex+",iTabIndex="+iTabIndex+",sValues="+sValues);

                /*if(iActionIndex!=iTabIndex && sValues!=null && isClearOldValues)
                {
                    me.clearPrevConditionValues(iRuleId,sValues,sSrcFldId,isSrcBodyField,iBodyRowIndex,clBodyTable);
                    isClearOldValues=false;
                }*/
            }


            if(iPrevActionIndex!=null && iPrevActionIndex>=0 && iPrevActionIndex!=iActionIndex)
            {
                sValues=arrData[iPrevActionIndex];
                if(sValues!=null)
                    me.clearPrevConditionValues(iRuleId,sValues,sSrcFldId,isSrcBodyField,iBodyRowIndex,clBodyTable);
            }


            if(iActionIndex!=-1 && sCondition==true)
            {
                //util.writeToLog("evaluateRule true "+iActionIndex);
                sValues=arrData[iActionIndex];
                if(sValues[1]!=null) //alerts
                    me.putAlertIdsInBuffer(sValues[1]); //iRuleId,iTabIndex,sValues[1]);

                if(sValues[2]) //show message
                {
                    if(sValues[5]==Constants.MSGTYPE_WARNANDRESTRICT)
                    {
                        Validation.showMessage(sValues[2],Validation.ERROR_MSG,document.getElementById(sSrcFldId),null,false,null,true);

                        if(isSrcBodyField && iBodyRowIndex>=0)
                        {
                            clBodyTable.getRow(iBodyRowIndex).style.backgroundColor="rgb(255, 154, 154)";
                        }
                        iStatus=-1;
                    }
                    else
                        alert(sValues[2]); //TODO: display in msgbox

                    //msg.showMessage(0,sValues[2],"Message",0);
                }

                if(sValues[3]!=null) // field properties
                    me.changeFieldProperties(iRuleId,sValues[3],isSrcBodyField,iBodyRowIndex,clBodyTable,sSrcFldId);
                if(sValues[4]!=null) // data format
                    me.changeDataFormat(sValues[4],iRuleId,iBodyFieldIndex);
            }

            iBodyFieldIndex=-1;

            objRule['iPrevActionIndex']=iActionIndex;
        }

        moduleView.clearFieldStack(sSrcFldId);

        return iStatus;
    };

    this.clearPrevConditionValues=function(iRuleId,sValues,sSrcFldId,isSrcBodyField,iBodyRowIndex,clBodyTable)
    {
        //util.writeToLog("clearing "+iTabIndex+"------"+iActionIndex+"------"+arrData.length);
        if(sValues[1]!=null) //alerts
            me.removeAlertIdsFromBuffer(sValues[1]);
        if(sValues[2]!=null) //show message
        {
            var objElem=document.getElementById(sSrcFldId);
            if(!objElem && iBodyRowIndex>=0)
                objElem=document.getElementById(sSrcFldId+"["+iBodyRowIndex+"]");

            //if(!objElem)
            //    moduleView.throwInvalidFieldError(sSrcFldId,iRuleId,true);

            //Validation.setClearMsgFlag(document.getElementById(arrFieldRules[i].sFieldId),0);
            Validation.clearMessage(objElem,false,null,true);

            if(isSrcBodyField && iBodyRowIndex>=0)
            {
                clBodyTable.getRow(iBodyRowIndex).style.backgroundColor="";
            }
        }
        if(sValues[3]!=null) //properties change
            me.clearFieldProperties(sValues[3],iRuleId,isSrcBodyField,iBodyRowIndex,clBodyTable,sSrcFldId);
        if(sValues[4]!=null) //field formatting
            me.clearDataFormat(sValues[4],iRuleId,iBodyRowIndex);
    };

    this.evaluateCondition=function(arrConditions,isSrcBodyField,iBodyRowIndex,iBodyFieldIndex,iRuleId)
    {
        //alert("arrConditions  "+arrConditions)

        var sExpression="";
        for(var i=0; i < arrConditions.length; i++)
        {
            var arrCLVariableDTOs=arrConditions[i];
            var iArrMultiSelectSeqIds=null;
            var iMultiSelectFldIndex=-1;
            var iConjunctionIndex=-1;
            var sConjunctionValue=null;
            var sFormula;

            for(var j=0; j < arrCLVariableDTOs.length; j++)
            {
                if(arrCLVariableDTOs[j].iType==formula.VARTYPE_SCREEN)
                {
                    var sFieldId = moduleView.getFieldId(arrCLVariableDTOs[j].sValue);
                    var objField;

                    objField = document.getElementById(sFieldId);
                    if(!objField && iBodyFieldIndex>=0)
                        objField = document.getElementById(sFieldId+"["+iBodyFieldIndex+"]");

                    if(!objField)
                        moduleView.throwInvalidFieldError(arrCLVariableDTOs[j].sValue,iRuleId,true);

                    if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_MULTI_SELECT)
                    {
                        iArrMultiSelectSeqIds=clMultiCombo.getSelectedIds(sFieldId);
                        iMultiSelectFldIndex=j;
                    }
                }
                else if(iArrMultiSelectSeqIds!=null)
                {
                    if (arrCLVariableDTOs[j].iType == formula.VARTYPE_OPERATOR)
                    {
                        if (arrCLVariableDTOs[j].sValue == "&&"
                            || arrCLVariableDTOs[j].sValue == "||")
                        {
                            iConjunctionIndex = j;
                            sConjunctionValue = arrCLVariableDTOs[j].sValue;
                            break;
                        }
                    }
                }
            }

            if(iMultiSelectFldIndex!=-1)
            {
                sFormula = "(";
                var arrCLVariableDTOs1=arrCLVariableDTOs.slice();

                if(iArrMultiSelectSeqIds!=null && iArrMultiSelectSeqIds.length>0)
                {
                    if (iConjunctionIndex != -1)
                        arrCLVariableDTOs1[iConjunctionIndex].sValue = "||";
                    else
                    {
                        iConjunctionIndex = arrCLVariableDTOs1.length;
                        arrCLVariableDTOs1[iConjunctionIndex] = new CLVariableDTO(formula.VARTYPE_OPERATOR, 0, "||");
                    }

                    for (var j = 0; j < iArrMultiSelectSeqIds.length - 1; j++)
                    {
                        arrCLVariableDTOs1[iMultiSelectFldIndex].iSubIndex = iArrMultiSelectSeqIds[j];
                        sFormula += formula.replaceVarsWithValues(arrCLVariableDTOs1, isSrcBodyField, iBodyRowIndex, null, true, false, -1, null, true, null,isSrcBodyField);
                    }


                    arrCLVariableDTOs1[iMultiSelectFldIndex].iSubIndex = iArrMultiSelectSeqIds[iArrMultiSelectSeqIds.length - 1]; //combo seqid in iSubIndex
                }
                else
                    arrCLVariableDTOs1[iMultiSelectFldIndex].iSubIndex = 0; //combo seqid in iSubIndex

                if (iConjunctionIndex != -1)
                {
                    if(sConjunctionValue!=null)
                        arrCLVariableDTOs[iConjunctionIndex].sValue = sConjunctionValue;
                    arrCLVariableDTOs1.splice(iConjunctionIndex, 1);
                }

                sFormula += formula.replaceVarsWithValues(arrCLVariableDTOs1, isSrcBodyField, iBodyRowIndex, null, true, false, -1, null, true, null,isSrcBodyField);
                sFormula += ")";
                if(sConjunctionValue!=null)
                    sFormula += sConjunctionValue;
            }
            else
            {
                sFormula = formula.replaceVarsWithValues(arrCLVariableDTOs, isSrcBodyField, iBodyRowIndex, null, true, false, -1, null, true, null,isSrcBodyField);
                //util.writeToLog("sFormula  "+sFormula)
                if (!sFormula)
                    return false;
            }

            sExpression += sFormula;
        }
        //console.log("Condition  "+sExpression);
        return eval(sExpression);
    };


    this.changeFieldProperties=function(iRuleId,arrFieldProperties,isSrcBodyField,iBodyRowIndex,clBodyTable,sSrcFldId)
    {
        var sTargetFldId;
        var elemTarget;
        // 3 values from Field Properties [Caption,Value,Display type]
        
        if(arrFieldProperties.length>0)
        {
            for(var i=0;i < arrFieldProperties.length;i++)
            {
                sTargetFldId=me.getFieldId(arrFieldProperties[i].iField);
                var isBodyField=isBodyColumn(sTargetFldId);
                if(isBodyField)
                {
                    //if(clBodyTable==null) //infinite loop issue in below for loop if different body table fields used
                        clBodyTable=moduleBody.getTableObject(sTargetFldId,true);

                    if(iBodyRowIndex>=0)
                    {
                        var iFieldIndex=formula.getBodyRowFieldIndex(iBodyRowIndex,clBodyTable);
                        elemTarget=moduleView.getElementByFieldId(sTargetFldId+"["+iFieldIndex+"]",iRuleId);//iBodyRowIndex will be '-1' when rule defined on header field to hide/disable body column. In this case rowindex is not required
                    }
                    else
                        elemTarget=moduleView.getElementByFieldId(sTargetFldId+"[0]",iRuleId);//
                }
                else
                    elemTarget=moduleView.getElementByFieldId(sTargetFldId,iRuleId);

                me.saveActualProps(elemTarget,P_TYPE_FIELD_PROP,arrFieldProperties[i].iChangeValue);

                if(isBodyField)
                {
                    if(isSrcBodyField)
                        me.setFieldValue(sTargetFldId,elemTarget,arrFieldProperties[i],false,isSrcBodyField,iBodyRowIndex,clBodyTable,sSrcFldId);
                    else
                    {
                        var iRowCount=clBodyTable.getRowCount(true);
                        for(var j= 0,iRowIndex=0;j<iRowCount;j++,iRowIndex++)
                        {
                            //var elemTarget1=document.getElementById(sTargetFldId+"["+j+"]");
                            var elemTarget1=document.getElementById(sTargetFldId+"["+iRowIndex+"]");
                            if(!elemTarget1)
                            {
                                j--;
                                continue;
                            }

                            me.setFieldValue(sTargetFldId, elemTarget1, arrFieldProperties[i], false, true, j, clBodyTable,sSrcFldId);
                        }
                    }

                    me.setBodyFieldCaption(sTargetFldId,elemTarget,false,arrFieldProperties[i].sCaption);
                    me.setBodyFieldDisplayType(sTargetFldId,elemTarget,arrFieldProperties[i].byDispType,false,isSrcBodyField,iBodyRowIndex,clBodyTable,iRuleId);
                }
                else
                {
                    me.setFieldValue(sTargetFldId,elemTarget,arrFieldProperties[i],false,isSrcBodyField,iBodyRowIndex,clBodyTable,sSrcFldId);//1 change value
                    me.setCaption(elemTarget,arrFieldProperties[i].sCaption);//2 change caption
                    me.setDisplayType(elemTarget,arrFieldProperties[i].byDispType,iRuleId);//3 Display type
                }
            }
        }
    };


    this.setBodyFieldCaption=function(sTargetFldId,elemTarget,isSetActual,sCaption)
    {
        var sTableId=moduleBody.getTableId(sTargetFldId,true);
        var clTable=sTable.getInstance(sTableId);
        var iColIndex=moduleBody.getCellIndex(sTargetFldId);

        var clHeaderElement=clTable.getHeaderElementAt(iColIndex);

        if(isSetActual)
        {
            if(clHeaderElement.getAttribute("actCaption"))
                clHeaderElement.innerHTML=clHeaderElement.getAttribute("actCaption");
        }
        else
        {
            if(sCaption)
            {
                if (clHeaderElement.getAttribute("actCaption") == null)
                    clHeaderElement.setAttribute("actCaption", clHeaderElement.innerHTML);

                clHeaderElement.innerHTML = sCaption;
            }
        }
    };

    this.setBodyFieldDisplayType=function(sTargetFldId,elemTarget,byDispType,isSetActual,isSrcBodyField,iBodyRowIndex,clBodyTable,iRuleId)
    {
        var sTableId=moduleBody.getTableId(sTargetFldId,true);

        if(isSetActual)
        {
            moduleBody.enableOrDisableRowAdd(sTableId,false);
            moduleBody.enableOrDisableRowDelete(sTableId,false);
        }
        else
        {
            if (byDispType == Constants.DISPLAYTYPE_DISABLE_ROW_ADDITION)
            {
                moduleBody.enableOrDisableRowAdd(sTableId, true);
            }
            else if (byDispType == Constants.DISPLAYTYPE_DISABLE_ROW_DELETION)
            {
                moduleBody.enableOrDisableRowDelete(sTableId, true);
            }
        }

        if(isSrcBodyField)
        {
            //util.writeToLog("setBodyFieldDisplayType==="+sTargetFldId+","+iBodyRowIndex+","+byDispType+","+isSetActual)
            if(isSetActual)
                enableOrDisableCurrentRowField(sTargetFldId,false,iBodyRowIndex,clBodyTable);
            else if(byDispType==Constants.RULES_DISP_DISABLE)
                enableOrDisableCurrentRowField(sTargetFldId,true,iBodyRowIndex,clBodyTable);
        }
        else
        {
            if(isSetActual)
            {
                var byActDispType=elemTarget.getAttribute("actDispType");
                elemTarget.setAttribute("dispType",byActDispType);

                if(elemTarget.parentNode.style.display=="none")
                    moduleBody.changeColumnVisibility(clBodyTable,sTargetFldId,false);

                moduleBody.enableOrDisableColumn(clBodyTable,sTargetFldId,false);

                moduleBody.clearMandatory(iRuleId);

                if(byActDispType!=null)
                {
                    clearHideAndDisableGroup(elemTarget,byActDispType);
                }
            }
            else
            {
                if(byDispType==Constants.RULES_DISP_HIDDEN)
                    moduleBody.changeColumnVisibility(clBodyTable,sTargetFldId,true);
                else if(byDispType==Constants.RULES_DISP_DISABLE)
                    moduleBody.enableOrDisableColumn(clBodyTable,sTargetFldId,true);
                else if(byDispType==Constants.RULES_DISP_HIDEGROUP)
                {
                    var dvGrp=moduleView.getFieldGroup(elemTarget);
                    if(dvGrp)
                        showOrHideFieldGroup(dvGrp,false);
                }
                else if(byDispType==Constants.RULES_DISP_DISABLE_GROUP)
                {
                    enableOrDisableGroup(moduleView.getFieldGroup(elemTarget),false);
                }
                else if(byDispType==Constants.RULES_DISP_NONE)
                {
                    if(elemTarget.parentNode.style.display=="none")
                    {
                        moduleBody.changeColumnVisibility(clBodyTable, sTargetFldId, false);
                    }

                    clearHideAndDisableGroup(elemTarget,byDispType);
                }
                else if(byDispType==Constants.RULES_DISP_MANDATORY)
                {
                    util.addClass(elemTarget,"mandatoryInput");
                    moduleBody.markAsMandatory(null,clBodyTable.getTableId(),false,iRuleId,elemTarget.id);

                    clearHideAndDisableGroup(elemTarget,byDispType);
                }
            }
        }
    };

    function clearHideAndDisableGroup(elemTarget,byActDispType)
    {
        var dvGrp=moduleView.getFieldGroup(elemTarget);
        if(dvGrp)
        {
            if(byActDispType!=Constants.RULES_DISP_HIDEGROUP)
                showOrHideFieldGroup(dvGrp,true);

            if(byActDispType!=Constants.RULES_DISP_DISABLE_GROUP)
                enableOrDisableGroup(dvGrp,true);
        }
    }

    function enableOrDisableGroup(dvGrp,isEnable)
    {
        if(dvGrp)
        {
            var arrInputTags = dvGrp.getElementsByTagName("INPUT");
            var arrTextAreaTags = dvGrp.getElementsByTagName("TEXTAREA");

            //var  arrInputs= Array.from(arrInputTags);

            var arrInputs = Array.prototype.slice.call(arrInputTags);

            if(arrTextAreaTags.length > 0)
                arrInputs = arrInputs.concat(Array.prototype.slice.call(arrTextAreaTags));

            if(isEnable)
            {
                if(dvGrp.getAttribute("disabledGroup"))
                {
                    for (var i = 0; i < arrInputs.length; i++)
                    {
                        if(arrInputs[i].disabled)
                            arrInputs[i].removeAttribute("disabled");
                    }
                    dvGrp.removeAttribute("disabledGroup");
                }
            }
            else
            {

                for (var i = 0; i < arrInputs.length; i++)
                    arrInputs[i].disabled = true;

                dvGrp.setAttribute("disabledGroup", true);
            }
        }
    }

    function enableOrDisableCurrentRowField(sTargetFldId,isDisable,iBodyRowIndex,clBodyTable)
    {
        var iColIndex=tablerow.getCellIndexByFieldId(sTargetFldId+"[0]");
        //var clBodyTable=moduleBody.getTableObject(sSrcFldId,true);
        var objElement=clBodyTable.getElementAt(iBodyRowIndex,iColIndex);
        if(isDisable)
        {
            objElement.disabled = true;
            moduleView.setFieldValueAsAttr(objElement,null,true);
        }
        else if(objElement.getAttribute("disabled")!=null && objElement.getAttribute("dispType")!=Constants.DISPLAYTYPE_READONLY)
            objElement.removeAttribute("disabled");
    }

    function isBodyColumn(sFieldId)
    {
        if(sFieldId.indexOf("[")!=-1)
            return true;
        return (document.getElementById(sFieldId+"[0]"))!=null;
    }

    this.changeDataFormat=function(arrFormatInfo,iRuleId,iBodyFieldIndex)
    {
        if(arrFormatInfo.length>0)
        {
            var sFldId,elemTarget;
            for(var i=0;i < arrFormatInfo.length;i++)
            {
                sFldId=me.getFieldId(arrFormatInfo[i].iField);
                elemTarget=moduleView.getElementByFieldId(sFldId,iRuleId,null,null,null,iBodyFieldIndex);

                me.saveActualProps(elemTarget,P_TYPE_DATA_FORMAT);
                me.setTextAlign(elemTarget,arrFormatInfo[i].iTextAlign);
                me.setCharCasing(elemTarget,arrFormatInfo[i].iCharacterCasing);
                me.setFont(elemTarget,arrFormatInfo[i].iFont);
                me.setBannerText(elemTarget,arrFormatInfo[i].sBannerText);
                me.setTooltip(elemTarget,arrFormatInfo[i].sToolTip);
                me.setBgColor(elemTarget,arrFormatInfo[i].sBackColor);
            }
        }
    };


    this.clearFieldProperties=function(arrFieldProperties,iRuleId,isSrcBodyField,iBodyRowIndex,clBodyTable,sSrcFldId)
    {
         if(arrFieldProperties.length>0)
        {
            for(var i=0;i < arrFieldProperties.length;i++)
            {
                var sTargetFieldId=me.getFieldId(arrFieldProperties[i].iField);
                var elemTarget;
                var isBodyField=isBodyColumn(sTargetFieldId);

                if(isBodyField)
                {
                    //if(clBodyTable==null)
                        clBodyTable=moduleBody.getTableObject(sTargetFieldId,true);


                    if(iBodyRowIndex>=0)
                    {
                        var iFieldIndex=formula.getBodyRowFieldIndex(iBodyRowIndex,clBodyTable);
                        elemTarget=moduleView.getElementByFieldId(sTargetFieldId+"["+iFieldIndex+"]",iRuleId);//iBodyRowIndex will be '-1' when rule defined on header field to hide/disable body column. In this case rowindex is not required
                    }
                    else
                        elemTarget=moduleView.getElementByFieldId(sTargetFieldId+"[0]",iRuleId);
                }
                else
                    elemTarget=moduleView.getElementByFieldId(sTargetFieldId,iRuleId);

                if(elemTarget.getAttribute("clearProps"))
                {                                  
                    if(isBodyField)
                    {
                        /*if(clBodyTable==null)
                            clBodyTable=moduleBody.getTableObject(sTargetFieldId,true);*/

                        if(isSrcBodyField)
                            me.setFieldValue(sTargetFieldId,elemTarget,arrFieldProperties[i],true,true,iBodyRowIndex,clBodyTable);
                        else
                        {
                            var iRowCount=clBodyTable.getRowCount(true);

                            for(var j= 0,iRowIndex=0;j<iRowCount;j++,iRowIndex++)
                            {
                                var elemTarget1=document.getElementById(sTargetFieldId+"["+iRowIndex+"]");
                                if(!elemTarget1)
                                {
                                    j--;
                                    continue;
                                }

                                me.setFieldValue(sTargetFieldId, elemTarget1, arrFieldProperties[i], true, true, j, clBodyTable,sSrcFldId);
                            }
                        }

                        me.setBodyFieldCaption(sTargetFieldId,elemTarget,true,arrFieldProperties[i].sCaption);
                        me.setBodyFieldDisplayType(sTargetFieldId,elemTarget,null,true,isSrcBodyField,iBodyRowIndex,clBodyTable,iRuleId);
                    }
                    else
                    {
                        //me.setFieldValue(sTargetFieldId,elemTarget,arrFieldProperties[i],true);
                        me.setFieldValue(sTargetFieldId,elemTarget,arrFieldProperties[i],true,isSrcBodyField,iBodyRowIndex,clBodyTable,sSrcFldId);//1 change value
                        me.setCaption(elemTarget,null,true);
                        me.setDisplayType(elemTarget,null,iRuleId,true);//3 Display type
                    }

                    elemTarget.removeAttribute("clearProps");
                }
            }
        }
    };

    this.clearDataFormat=function(arrFormatInfo,iRuleId,iBodyRowIndex)
    {
        if(arrFormatInfo.length>0)
        {
            var sFldId,elemTarget;
            for(var i=0;i < arrFormatInfo.length;i++)
            {
                sFldId=me.getFieldId(arrFormatInfo[i].iField);
                elemTarget=moduleView.getElementByFieldId(sFldId,iRuleId,null,null,null,iBodyRowIndex);
                if(elemTarget.getAttribute("clearFormat"))
                {
                    me.setTextAlign(elemTarget,null,true);
                    me.setCharCasing(elemTarget,null,true);
                    me.setFont(elemTarget,null,true);
                    me.setBannerText(elemTarget,null,true);
                    me.setTooltip(elemTarget,null,true);
                    me.setBgColor(elemTarget,null,true);
                    elemTarget.removeAttribute("clearFormat");
                }
            }
        }
    };


    this.saveActualProps=function(elemTarget,iType,iChangeValueType)
    {
        if(iType==P_TYPE_DATA_FORMAT)
            elemTarget.setAttribute("clearFormat",true);
        else
            elemTarget.setAttribute("clearProps",true);

        //Storing actual properties. Will be saved only once
        if(iType==P_TYPE_FIELD_PROP)
        {
            elemTarget.setAttribute("actDispType", elemTarget.getAttribute("dispType"));

            if(iChangeValueType!=Constants.CHANGEVAL_NONE)
            {

                //writeToLog("adding P_TYPE_FIELD_PROP"+iTabIndex+":"+iRowIndex)
                if (elemTarget.getAttribute("ctrltype") == Constants.CONTROLTYPE_CHECKBOX)
                    elemTarget.setAttribute("actValue", elemTarget.checked ? "1" : "0");
                else if (elemTarget.getAttribute("ctrltype") == Constants.CONTROLTYPE_COMBOBOX)
                    elemTarget.setAttribute("actValue", getComboInstance(elemTarget.id).getSelectedId());
                else
                    elemTarget.setAttribute("actValue", elemTarget.value);
            }

            elemTarget.setAttribute("changeValue", iChangeValueType);

            //alert("caption "+moduleView.getCaptionField(elemTarget).innerHTML+"------"+elemTarget.id)
            if(moduleView.getCaptionField(elemTarget))
                elemTarget.setAttribute("actCaption",moduleView.getCaptionField(elemTarget).innerHTML);
        }
        else if(iType==P_TYPE_DATA_FORMAT)
        {
            if(elemTarget.style.align)
                elemTarget.setAttribute("actAlign",elemTarget.style.align);
            if(elemTarget.style.textTransform)
                elemTarget.setAttribute("actCharCasing",elemTarget.style.textTransform);
            if(elemTarget.style.font)
                elemTarget.setAttribute("actFont",elemTarget.style.font);
            if(elemTarget.getAttribute("bannerText"))
                elemTarget.setAttribute("actBanner",elemTarget.getAttribute("bannerText"));
            if(elemTarget.getAttribute("tooltip"))
                elemTarget.setAttribute("actTooltip",elemTarget.getAttribute("tooltip"));
            if(elemTarget.style.backgroundColor)
                elemTarget.setAttribute("actBgcolor",elemTarget.style.backgroundColor);
        }
    };

    this.isComboSeqIdsCondition=function(arrCLVariableDTOs)
    {
        var isComboItems=false;
        for(var i=0; i < arrCLVariableDTOs.length; i++)
        {
            if (arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFCVAL_FUNCTION)
            {
                isComboItems=true;
                break;
            }
        }
        return isComboItems;
    };

    this.isComboItems=function(arrCLVariableDTOs)
    {
        var isComboItems=false;
        for(var i=0; i < arrCLVariableDTOs.length; i++)
        {
            if (arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFC_ITEMS_FUNCTION)
            {
                isComboItems=true;
                break;
            }
        }
        return isComboItems;
    };

    this.setFieldValue=function(sTargetFldId,elemTarget,arrFieldProperties,isSetActual,isSrcBodyField,iBodyRowIndex,clBodyTable,sSrcFldId)
    {
        var sValue=null;
        var isDoNotPickerFromServer=false;
        var isTargetBodyField=elemTarget.id.indexOf("[")!=-1;

        if(isSetActual)
        {
            if( elemTarget.getAttribute("changeValue")==Constants.CHANGEVAL_NONE)
               return;

            sValue = elemTarget.getAttribute("actValue");
            if (arrFieldProperties.iChangeValue==Constants.CHANGEVAL_FORMULA)
            {
                var arrCLVariableDTOs=eval(arrFieldProperties.sValue);
                var objCombo;
                if(me.isComboSeqIdsCondition(arrCLVariableDTOs))
                {
                    objCombo=getComboInstance(elemTarget.id);
                    objCombo.clearSelection();
                    objCombo.removeAllItems();
                    objCombo.setCondModuleSeqIds(null);
                }
                else if(me.isComboItems(arrCLVariableDTOs))
                {
                    objCombo=getComboInstance(elemTarget.id);
                    objCombo.clearSelection();
                    objCombo.removeAllItems();
                }
            }

            if(elemTarget.getAttribute("isSkipClear"))
                return;
        }
        else if(arrFieldProperties.iChangeValue!=Constants.CHANGEVAL_NONE)
        {
            if(arrFieldProperties.iChangeValue==Constants.CHANGEVAL_FIELD) //set value of another field
            {
                if(arrFieldProperties.sLinkFldName)
                {
                    sValue = arrFieldProperties.sLinkFldName;//.iLinkId;
                    if (sValue.indexOf("|") != -1)
                        sValue = sValue.substring(sValue.indexOf("|") + 1, sValue.lastIndexOf("|"));

                    var iBodyFieldIndex = -1;
                    if (iBodyRowIndex >= 0)
                        iBodyFieldIndex = moduleBody.getBodyFieldIndex(clBodyTable, sSrcFldId, iBodyRowIndex);

                    if (iBodyFieldIndex >= 0 && document.getElementById("F" + sValue + "[" + iBodyFieldIndex + "]"))
                        sValue = moduleView.getFieldValueAsString("F" + sValue + "[" + iBodyFieldIndex + "]");
                    else
                        sValue = moduleView.getFieldValueAsString("F" + sValue);
                }
            }
            else if (arrFieldProperties.iChangeValue==Constants.CHANGEVAL_VALUE)//set value given in value column
            {
                if(elemTarget.getAttribute("datatype") == Constants.DATATYPE_MASTER)
                    sValue=arrFieldProperties.sValueName;
                else
                    sValue=arrFieldProperties.sValue;
                //util.writeToLog("arrFieldProperties.sValue=="+arrFieldProperties.sValue)
            }
            else if (arrFieldProperties.iChangeValue==Constants.CHANGEVAL_FORMULA)
            {
                if(arrFieldProperties.sValue)
                {
                    var arrCLVariableDTOs = eval(arrFieldProperties.sValue);
                    var sId = elemTarget.id;
                    var iBodyFieldIndex = -1;
                    if (sId.indexOf("[") != -1)
                        iBodyFieldIndex = sId.substring(sId.indexOf("[") + 1, sId.indexOf("]"));
                    else if (isSrcBodyField)
                        iBodyFieldIndex = moduleBody.getBodyFieldIndex(clBodyTable, sSrcFldId, iBodyRowIndex);


                    var isTargetBodyField = isBodyColumn(elemTarget.id);

                    formula.sCurrentFieldIdId = sSrcFldId;
                    var sFormula = formula.replaceVarsWithValues(arrCLVariableDTOs, isSrcBodyField, iBodyRowIndex, elemTarget.id, false, false, iBodyFieldIndex, null, false, null, isTargetBodyField);
                    formula.sCurrentFieldIdId = null;

                    if (sFormula != null)
                    {
                        var objCombo;
                        if (me.isComboSeqIdsCondition(arrCLVariableDTOs))
                        {
                            objCombo = getComboInstance(elemTarget.id);

                            if (objCombo.getSelectedId() > 0)// && sFormula.length > 0)
                                sValue = objCombo.getSelectedId();
                                //sValue = objCombo.getSelectedItem() + "|" + objCombo.getSelectedId();

                            objCombo.clearSelection();
                            objCombo.removeAllItems();
                            isDoNotPickerFromServer=true;

                            var sCSVSeqIds = eval(sFormula);

                            if (sCSVSeqIds)
                                objCombo.setCondModuleSeqIds(sCSVSeqIds);
                            else
                                objCombo.setCondModuleSeqIds(null);

                            //objCombo.fillCombo(sNamesArray, iIds);
                            //for(var i=0; i < arrComboItems.length; i++)
                            //objCombo.checkAndAddItem(arrComboItems[i],false);

                        }
                        else if (me.isComboItems(arrCLVariableDTOs))
                        {
                            objCombo = getComboInstance(elemTarget.id);
                            if (objCombo.iMasterType != Genernal_Master)
                                objCombo.iSqlfcMasterType = objCombo.iMasterType;
                            //elemTarget.setAttribute("sqlItemsType",objCombo.iMasterType);

                            objCombo.setMasterType(Genernal_Master);
                            if (objCombo.getSelectedId() > 0)// && sFormula.length > 0)
                                sValue = objCombo.getSelectedId();
                                //sValue = objCombo.getSelectedItem() + "|" + objCombo.getSelectedId();
                            objCombo.clearSelection();
                            objCombo.removeAllItems();
                            isDoNotPickerFromServer=true;

                            var sComboItems = eval(sFormula);

                            if (sComboItems)
                            {
                                var arrComboItems = sComboItems.split(",");
                                var sNamesArray = [];
                                var iIdsArray = [];
                                var sItem;
                                for (var i = 0; i < arrComboItems.length; i++)
                                {
                                    sItem = arrComboItems[i];
                                    sNamesArray[sNamesArray.length] = sItem.substring(0, sItem.indexOf("|"));
                                    iIdsArray[iIdsArray.length] = sItem.substring(sItem.indexOf("|") + 1);
                                }

                                objCombo.fillCombo(sNamesArray, iIdsArray);
                            }


                        }
                        else
                        {
                            if (sFormula)
                            {
                                sValue = eval(sFormula);

                                var iDataType = elemTarget.getAttribute("datatype");
                                elemTarget.setAttribute("isSkipClear", arrCLVariableDTOs[0].isAlwaysRefresh() == false);

                                if (iDataType == Constants.DATATYPE_TEXT && sValue == "0")
                                    sValue = "";
                                else if (iDataType == Constants.DATATYPE_DATETIME)
                                {
                                    var isUTCDate = false;
                                    for (var i = 0; i < arrCLVariableDTOs.length; i++)
                                    {
                                        if (arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFC_FUNCTION
                                            || arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFCB_FUNCTION)
                                        {
                                            isUTCDate = true;
                                            break;
                                        }
                                    }

                                    if(sValue)
                                        sValue = dateUtils.convertLongToDateTime(sValue, clAppBuffer.getDateFormat(), isUTCDate);
                                }
                                else if ((isContainsDateVar(arrCLVariableDTOs) || iDataType == Constants.DATATYPE_DATE))
                                    sValue = dateUtils.convertIntToDate(sValue, clAppBuffer.getDateFormat());
                                else if ((isContainsDateVar(arrCLVariableDTOs) || iDataType == Constants.DATATYPE_TIME))
                                {
                                    if (elemTarget.getAttribute("ctrltype") == Constants.CONTROLTYPE_DURATION)
                                        sValue = dateUtils.convertInttoTime(sValue, Constants.TIME_HHMM);
                                    else
                                        sValue = dateUtils.convertInttoTime(sValue, clAppBuffer.getTimeFormat());
                                }
                            }
                            else
                                sValue = "";
                        }
                    }
                    else
                    {
                        if (me.isComboSeqIdsCondition(arrCLVariableDTOs))
                        {
                            objCombo = getComboInstance(elemTarget.id);
                            objCombo.clearSelection();
                            objCombo.removeAllItems();
                            objCombo.setCondModuleSeqIds(null);
                        }
                        else if (me.isComboItems(arrCLVariableDTOs))
                        {
                            objCombo = getComboInstance(elemTarget.id);
                            objCombo.setMasterType(Genernal_Master);
                            objCombo.clearSelection();
                            objCombo.removeAllItems();
                        }
                        else
                            return;
                    }
                }
            }
        }

        //util.writeToLog("setFieldValue="+sValue+","+elemTarget.id+","+iBodyRowIndex+","+isSetActual);

        //if(arrFieldProperties.iChangeValue!=Constants.CHANGEVAL_NONE)
        if(arrFieldProperties.iChangeValue==Constants.CHANGEVAL_FIELD
                || arrFieldProperties.iChangeValue==Constants.CHANGEVAL_VALUE
                || arrFieldProperties.iChangeValue==Constants.CHANGEVAL_FORMULA)
        {
            if(isTargetBodyField)//isSrcBodyField)
            {
                var sId=elemTarget.id;
                var iBodyFieldIndex=sId.substring(sId.indexOf("[")+1,sId.indexOf("]"));
                setBodyFieldValue(sTargetFldId,iBodyRowIndex,sValue,clBodyTable,iBodyFieldIndex,isDoNotPickerFromServer);
            }
            else
            {
                setHeaderFieldValue(elemTarget,sValue,isDoNotPickerFromServer,sSrcFldId);
                if(elemTarget.getAttribute("datatype")==Constants.DATATYPE_FRACTION)
                        checkNoOfDecimals(elemTarget,elemTarget.getAttribute("noOfDec"));
            }
        }                        
    };

    function setHeaderFieldValue(elemTarget,sValue,isDoNotPickerFromServer,sSrcFldId)
    {
        //console.log("setHeaderFieldValue src= "+ sSrcFldId +","+elemTarget.id+"===="+sValue);
        moduleView.setFieldValueAsString(elemTarget.id,sValue,null,null,isDoNotPickerFromServer,sSrcFldId);
        //console.log("evaluate target src= "+ sSrcFldId +","+elemTarget.id+"===="+sValue);
        formula.evaluateTargetExpr([elemTarget.id],false,1);
    }

    function setBodyFieldValue(sTargetFldId,iRowIndex,sValue,clBodyTable,iBodyFieldIndex,isDoNotPickerFromServer)
    {
        //console.log("setBodyFieldValue  "+ sTargetFldId +","+iRowIndex+"===="+sValue);
        moduleBody.setColValue(sTargetFldId,iRowIndex,sValue,clBodyTable,null,null,null,isDoNotPickerFromServer);
        /*formula.iBodyRowIndex=iRowIndex;
        formula.iBodyFieldIndex=iBodyFieldIndex;
        formula.evaluateTargetExpr([sTargetFldId],true,1);
        formula.iBodyRowIndex=null;
        formula.iBodyFieldIndex=null;*/
    }


    function isContainsDateVar(arrCLVariableDTOs)
    {
        for(var i=0; i < arrCLVariableDTOs.length;i++)
        {
            if(arrCLVariableDTOs[i].iType==formula.VARTYPE_DATE)
            {
                return true;
            }
        }
        return false;
    }

    this.setCaption=function(elemTarget,sCaption,isSetActual)
    {
        if(moduleView.getCaptionField(elemTarget))
        {           
            if(isSetActual)
                moduleView.getCaptionField(elemTarget).innerHTML=elemTarget.getAttribute("actCaption");
            else if(sCaption)
                moduleView.getCaptionField(elemTarget).innerHTML=sCaption;
        }
    };

    this.setDisplayType=function(elemTarget,byDispType,iRuleId,isSetActual)
    {
        /*var objCaptionField=moduleView.getCaptionField(elemTarget);
        if(!objCaptionField)
            return;*/
        
        //var objLookupTd=objCaptionField.parentNode.nextSibling.nextSibling;
        var dvGrp;

        var byActDispType=elemTarget.getAttribute("actDispType");

        if(isSetActual)
        {

            elemTarget.setAttribute("dispType",byActDispType);

            if(byActDispType!=Constants.RULES_DISP_MANDATORY && util.hasClass(elemTarget,"mandatoryInput"))
            {
                util.removeClass(elemTarget,"mandatoryInput");
                moduleView.removeValidation(iRuleId);
            }

            setActualFieldDisplay(byActDispType,elemTarget);
            
            if(byActDispType!=null) //byActDispType==null ||
            {
                clearHideAndDisableGroup(elemTarget,byActDispType);
            }
        }
        else 
        {               
            if(byDispType==Constants.RULES_DISP_MANDATORY)
            {
                setActualFieldDisplay(byActDispType,elemTarget);

                clearHideAndDisableGroup(elemTarget,byDispType);

                util.addClass(elemTarget,"mandatoryInput");
                moduleView.addValidation(elemTarget.id,null,null,iRuleId);
            }
            else if(byDispType==Constants.RULES_DISP_HIDDEN)
            {
                moduleView.setFieldDisplay(elemTarget,true);
                /*if(elemTarget.getAttribute("ctrltype")==Constants.CONTROLTYPE_RADIOBUTTON || elemTarget.getAttribute("ctrltype")==Constants.CONTROLTYPE_RADIO_WITH_IMAGE)
                {
                    toggleRadioButtons(elemTarget.id,false);
                }
                else
                {
                    elemTarget.style.display="none";
                    var objTD=elemTarget.parentNode;
                    objTD.style.display="none";
                }
                
                objCaptionField.parentNode.style.display="none";
                objCaptionField.style.display="none";

                if(objLookupTd)
                    objLookupTd.style.display="none";

                me.hideFieldRowIfEmpty(elemTarget);
                */
            }
            else if(byDispType==Constants.RULES_DISP_DISABLE)
            {
                if(elemTarget.getAttribute("ctrltype")==Constants.CONTROLTYPE_RADIOBUTTON || elemTarget.getAttribute("ctrltype")==Constants.CONTROLTYPE_RADIO_WITH_IMAGE)
                {
                    enableDisableRadioButtons(elemTarget.id,false);
                }
                else if(elemTarget.getAttribute("ctrltype")==Constants.CONTROLTYPE_TIMEPICKER)
                {
                    clTime.setEnable(false,elemTarget.id);
                }
                else
                {
                    elemTarget.disabled = true;
                    moduleView.setFieldValueAsAttr(elemTarget,null,true);
                }
            }
            else if(byDispType==Constants.RULES_DISP_HIDEGROUP)
            {
                dvGrp=moduleView.getFieldGroup(elemTarget);

                if(dvGrp)
                    showOrHideFieldGroup(dvGrp,false);
            }
            else if(byDispType==Constants.RULES_DISP_DISABLE_GROUP)
            {
                dvGrp=moduleView.getFieldGroup(elemTarget);
                enableOrDisableGroup(dvGrp,false);
            }
            else if(byDispType==Constants.RULES_DISP_NONE)
            {
                if(elemTarget.style.display=="none")
                {
                    moduleView.setFieldDisplay(elemTarget,false);
                    //showField(elemTarget, objCaptionField, objLookupTd);
                }

                clearHideAndDisableGroup(elemTarget,byDispType);
            }

        }
    };

    function showOrHideFieldGroup(dvGrp,isShow)
    {
        dvGrp.style.display = isShow?"":"none";
        //if(document.getElementById("viewIn") && document.getElementById("viewIn").value==Constants.MODULE_IN_DLG)
        if(document.getElementById("isTabPaneView") && document.getElementById("isTabPaneView").value=="1")
        {
            var iTabIndex=dvGrp.id.substring(dvGrp.id.length-1);
            var iModuleId=document.getElementById("moduleId").value;
            tabbedPane.showHide(isShow,iModuleId+"moduleRenderTab",iTabIndex);
        }
    }

    function setActualFieldDisplay(byActDispType,elemTarget)
    {
        if(byActDispType!=Constants.RULES_DISP_HIDDEN && elemTarget.style.display=="none")
        {
            moduleView.setFieldDisplay(elemTarget,false);
        }


        if(byActDispType!=Constants.DISPLAYTYPE_READONLY && elemTarget.disabled)
        {
            if(elemTarget.getAttribute("ctrltype")==Constants.CONTROLTYPE_RADIOBUTTON || elemTarget.getAttribute("ctrltype")==Constants.CONTROLTYPE_RADIO_WITH_IMAGE)
            {
                enableDisableRadioButtons(elemTarget.id,true);
            }
            else if(elemTarget.getAttribute("ctrltype")==Constants.CONTROLTYPE_TIMEPICKER)
            {
                clTime.setEnable(true,elemTarget.id);
            }
            else
                elemTarget.removeAttribute("disabled");
        }
    }


    function enableDisableRadioButtons(sFieldId,isEnable)
    {
        var arrRadioButtonFields=moduleView.getRadioButtonFields(sFieldId);
        for(var i=0; i < arrRadioButtonFields.length; i++)
        {
            if(isEnable)
            {
                if(arrRadioButtonFields[i].disabled)
                    arrRadioButtonFields[i].removeAttribute("disabled");
            }
            else
            {
                arrRadioButtonFields[i].disabled = true;
            }
        }
    }




    this.setTextAlign=function(elemTarget,iTextAlign,isSetActual)
    {
        if(isSetActual)
            elemTarget.style.textAlign=elemTarget.getAttribute("actAlign");
        else if(iTextAlign)
        {
            if(iTextAlign==Constants.TEXTALIGN_CENTER)
                elemTarget.style.textAlign="center";
            else if(iTextAlign==Constants.TEXTALIGN_RIGHT)
                elemTarget.style.textAlign="right";
        }
        else
            elemTarget.style.textAlign="left";
    };


    this.setCharCasing=function(elemTarget,iCharCasing,isSetActual)
    {
        if(isSetActual)
            elemTarget.style.textTransform=elemTarget.getAttribute("actCharCasing");
        else if(iCharCasing)
        {
            if(iCharCasing==Constants.CHARCASING_UPPER)
                elemTarget.style.textTransform="uppercase";
            else if(iCharCasing==Constants.CHARCASING_LOWER)
                elemTarget.style.textTransform="lowercase";
        }
        else
            elemTarget.style.textTransform="none";
    };


    this.setFont=function(elemTarget,sFont,isSetActual)
    {
        if(isSetActual)
        {
//            elemTarget.style.textTransform=elemTarget.getAttribute("actCharCasing");
        }
        else if(sFont)
            alert("Font setting has not yet been implemented.");
    };

    this.setBannerText=function(elemTarget,sBannerText,isSetActual)
    {
        if(isSetActual)
            elemTarget.setAttribute("bannerText",elemTarget.getAttribute("actBannerText"));
        else if(sBannerText)
            elemTarget.setAttribute("bannerText",sBannerText);
        /*if(elemTarget.value=="")
            elemTarget.value=elemTarget.getAttribute("bannerText");//TODO: add event handlers to show and clear banner text */
    };

    this.setTooltip=function(elemTarget,sTooltip,isSetActual)
    {
        if(isSetActual)
            elemTarget.title=elemTarget.getAttribute("actTooltip");
        else if(sTooltip)
            elemTarget.title=sTooltip;
    };

    this.setBgColor=function(elemTarget,sBgColor,isSetActual)
    {
        if(isSetActual)
            elemTarget.style.backgroundColor=elemTarget.getAttribute("actBgcolor");
        else if(sBgColor)
            elemTarget.style.backgroundColor=sBgColor;
    };

    
    this.putAlertIdsInBuffer=function(arrAlertsInfo)
    {
        //alert("sendAlert="+arrAlertsInfo)
        for(var i=0; i < arrAlertsInfo.length; i++)
            me.iArrAlertIds[me.iArrAlertIds.length]=arrAlertsInfo[i].iRuleAlertId;
    };

    this.removeAlertIdsFromBuffer=function(arrAlertsInfo)
    {
        for(var i=0;i<arrAlertsInfo.length;i++)
        {
            for(var j=0; j < me.iArrAlertIds.length; j++)
            {
                if(me.iArrAlertIds[j]==arrAlertsInfo[i].iRuleAlertId)
                {
                    me.iArrAlertIds[j].splice(j,1);
                    break;
                }
            }
        }
    };


   this.getFieldId=function(sFieldId)
   {
       return "F"+sFieldId;
   };

    this.addEventListener=function(sFieldId,sVariableName,iEvtType,iRuleId)
    {
        var iCount=0;
        var sActualFieldId;
        if(sVariableName.indexOf("B")!=-1)
            sActualFieldId=sFieldId+"["+iCount+"]";
        else
            sActualFieldId=sFieldId;

        var objField=document.getElementById(sActualFieldId);
        if(!objField)
            moduleView.throwInvalidFieldError(sActualFieldId,iRuleId);

        var iCtrlType;
        var iDataType;
        while(objField) //attaching to all the rows in case of body field
        {
            iCtrlType=objField.getAttribute("ctrltype");
            iDataType=objField.getAttribute("datatype");


            if(iDataType == Constants.DATATYPE_MASTER || iCtrlType == Constants.CONTROLTYPE_COMBOBOX || iCtrlType == Constants.CONTROLTYPE_OPTIONCTRL)
            {
                if(iCount==0)
                {
                    var objCombo = getComboInstance(sActualFieldId);
                    if(iEvtType==cross.EVENT_ONFOCUS)
                        objCombo.setOnFocusScript("moduleRules.evaluateRule(" + iRuleId + ",evt)"); //+",'"+sFieldId+"')");
                    else //commented since moduleRules.evaluateRule will be called from formula.evaluateTarget after executing getServerVarValues
                        objCombo.setOnLostScript("moduleRules.evaluateRule(" + iRuleId + ",evt)"); //+",'"+sFieldId+"')");
                }
            }
            else if(iCtrlType == Constants.CONTROLTYPE_CHECKBOX && iEvtType==cross.EVENT_ONFOCUS)
                cross.addListener(objField,cross.EVENT_ONCLICK,moduleRules.evaluateRule,false,[iRuleId],Constants.SCOPE_SCREEN);
            else
            {
                /* if(iDataType==Constants.DATATYPE_NUMBER || iDataType==Constants.DATATYPE_FRACTION || iDataType==Constants.DATATYPE_BIGNUMBER)
                {
                    if(iDataType==Constants.DATATYPE_FRACTION)
                    {
                        cross.addListener(objField, iEvtType, checkNoOfDecimals, false, [objField,objField.getAttribute("noofdecimals")]);//,sFieldId
                    }

                    cross.addListener(objField,iEvtType,formatNumber,false,[objField]);//,sFieldId
                }*/
                cross.addListener(objField,iEvtType,moduleRules.evaluateRule,false,[iRuleId],Constants.SCOPE_SCREEN);//,sFieldId
            }

            iCount++;
             if(sVariableName.indexOf("B")!=-1)
             {
                 sActualFieldId=sFieldId+"["+iCount+"]";
                 objField=document.getElementById(sActualFieldId);
             }
            else
             {
                 sActualFieldId=null;
                 objField=null;
             }
        }
    };


    this.onSaveEvalRules=function()
    {
        var iStatus=moduleView.STATUS_CONTINUE;
        if(arrOnSaveRuleIds)
        {
            for(var i=0; i < arrOnSaveRuleIds.length; i++)
            {
                if(me.evaluateRule(arrOnSaveRuleIds[i])!=Constants.MSG_SUCCESS)
                    iStatus=moduleView.STATUS_STOP_SUBMIT;
            }
        }
        return [iStatus];
    };

    this.clear=function()
    {
        me.iArrAlertIds=[];
    };
};


function CLRules(iRuleId,sFieldId,iApplyOn,sConditionAndActions,sVariableName)
{
    this.ruleId=iRuleId;
    this.linkTypeId=sFieldId;
    this.applyOn=iApplyOn;
    this.tabs=sConditionAndActions;
    this.variableName=sVariableName;

    var iTransId=document.getElementById("transId").value>0;

    if(util.checkBit(iApplyOn,Constants.APPLYON_LOAD))
    {
        if(util.checkBit(iApplyOn,Constants.APPLYON_NEWRECORD))
        {
            if(iTransId==0)
                moduleRules.addOnloadRule(iRuleId);
        }

        if(util.checkBit(iApplyOn,Constants.APPLYON_ONEDIT))
        {
            if(iTransId>0)
                moduleRules.addOnloadRule(iRuleId);
        }
        else if(util.checkBit(iApplyOn,Constants.APPLYON_NEWRECORD)==false)
            moduleRules.addOnloadRule(iRuleId);
    }
    /*else if(util.checkBit(iApplyOn,Constants.APPLYON_NEWRECORD))
    {
        if(document.getElementById("transId").value==0)
            moduleRules.addOnloadRule(iRuleId);
    }*/
    /*else if(util.checkBit(iApplyOn,Constants.APPLYON_ONEDIT))
    {
        if(iTransId>0)
            moduleRules.addOnloadRule(iRuleId);
    }*/

        //moduleRules.evaluateRule(iRuleId);//,sFieldId);


    //if(util.checkBit(iApplyOn,Constants.APPLYON_LOAD)==false)
    //{
        if (util.checkBit(iApplyOn, Constants.APPLYON_ONLEAVE))
        {
            moduleRules.addEventListener(sFieldId, sVariableName, cross.EVENT_ONBLUR, iRuleId);
            moduleRules.arrFieldRules[sFieldId]={"ruleId":iRuleId,"applyOn":iApplyOn};
        }

        if (util.checkBit(iApplyOn, Constants.APPLYON_ONENTER))
        {
            moduleRules.arrFieldRules[sFieldId]={"ruleId":iRuleId,"applyOn":iApplyOn};

            var objField = document.getElementById(sFieldId);
            if (objField && (objField.getAttribute("ctrltype") == Constants.CONTROLTYPE_RADIOBUTTON || objField.getAttribute("ctrltype") == Constants.CONTROLTYPE_RADIO_WITH_IMAGE))
            {
                var arrRadioButtonFields = moduleView.getRadioButtonFields(sFieldId);
                for (var i = 0; i < arrRadioButtonFields.length; i++)
                    moduleRules.addEventListener(arrRadioButtonFields[i].id, sVariableName, cross.EVENT_ONCLICK, iRuleId);

                /*var iCount=1;
                 do
                 {
                 moduleRules.addEventListener(objField.id,sVariableName,cross.EVENT_ONCLICK,iRuleId);
                 objField=document.getElementById(sFieldId+"_"+iCount);
                 iCount++;
                 }
                 while(objField);*/
            }
            else if (objField && objField.getAttribute("ctrltype") == Constants.CONTROLTYPE_CHECKBOX)
                moduleRules.addEventListener(sFieldId, sVariableName, cross.EVENT_ONCLICK, iRuleId);
            else
                moduleRules.addEventListener(sFieldId, sVariableName, cross.EVENT_ONFOCUS, iRuleId);
        }
    //}

    if(util.checkBit(iApplyOn,Constants.APPLYON_BEFORESAVE))// || util.checkBit(iApplyOn,Constants.APPLYON_NEWRECORD) || util.checkBit(iApplyOn,Constants.APPLYON_ONEDIT)
    {
        var isAddRule=false;

        if(util.checkBit(iApplyOn,Constants.APPLYON_NEWRECORD))
        {
            if(document.getElementById("transId").value==0)
                isAddRule = true;
        }

        if(util.checkBit(iApplyOn,Constants.APPLYON_ONEDIT))
        {
            if(document.getElementById("transId").value>0)
                isAddRule = true;
        }
        else if(util.checkBit(iApplyOn,Constants.APPLYON_NEWRECORD)==false)
            isAddRule=true;


        if(isAddRule)
        {
            /*if(!moduleRules.getOnSaveRules())
            {
                var iModuleId=document.getElementById("moduleId").value;
                var clModuleCallback=moduleCallback.getInstance(iModuleId);
                clModuleCallback.setScriptBeforeSave(moduleRules.onSaveEvalRules);
            }*/
            moduleRules.addOnSaveRule(iRuleId);
        }
    }

    //cross.addListener(document.getElementById(sFieldId),cross.EVENT_ONFOCUS,moduleRules.evaluateRule,false,[iRuleId,sFieldId]);


};





var formula=new function()
{
    var me=this;
    this.VARTYPE_OPERATOR = 1;
    this.VARTYPE_FIXED_VALUE = 2;
    this.VARTYPE_SCREEN= 3;
    this.VARTYPE_SERVER= 4;
    this.VARTYPE_FORMULA = 5; //used in case of rule defined as field value equal to output of some formula
    this.VARTYPE_OPERATOR_CONST= 6;  //consants defined in IConstants.IOperator      
    this.VARTYPE_AMPERSAND= 7;
    this.VARTYPE_DATE= 8;
    this.VARTYPE_AT_THE_RATE= 9;
    this.VARTYPE_FUNCTION= 10;
    this.VARTYPE_FUNCTION_PARAM= 11;
    this.VARTYPE_SQLFC_FUNCTION= 12;
    this.VARTYPE_SQLFCB_FUNCTION= 13;
    this.VARTYPE_SQLFCVAL_FUNCTION= 14;
    this.VARTYPE_PERCENTILE = 15;
    this.VARTYPE_SQLFC_ITEMS_FUNCTION = 16;

    //date variables
    this.DATE_VAR_NOW=101;

    //this.VARTYPE_FIXED_COMBO_VALUE= 11;
//    this.CONJUNCTION = 8; //And,or,not values. used in rules

    this.arrExpressions=null; //stores array of formulas with fieldid as key.
    this.arrServerVariables={}; //stores comma separated variables with moduleid as key, used when connecting to server to retrieve selected seqid values
    this.arrTargetVariables=[]; //comma separated filedids of target fields based on src fieldid


    this.arrVarValues={};//stores server variable values based on moduleid_seqid. Ex: {'2306_57':[10000,2222]};
    this.arrSQLVarValues={};//stores SQL function call results

    this.sMasterFldIds={}; //stores ids of all the mastertype fields which are used when reading data from buffer. (For easily retrieving fieldid based on moduletype)
    this.iArrAllServerModuleIds=null;
    //this.iArrIsBodyFlds=null;
    this.hasOnloadServerVars=false;
    this.iArrCurrentModuleIds=null; //stores moduleids temporary when connecting to server for retrieving values
    this.iArrCurrentSeqIds=null;

    this.iBodyRowIndex=null;//holds row index based on position in the table(event based) 
    this.iBodyFieldIndex=null;//holds field index based on field-id in current row i.e. for F35000[2] this value will be 2
    this.sCurrentFieldIdId=null;//holds current combobox fieldid on which onblur event is fired 
    this.iCurrentFldModuleId=null;//holds current combobox fieldid on which onblur event is fired

    this.fnDependencyParamsCallback=null;
    this.iPreviousSeqId=0;
    this.isComboItemChanged=false;
    // masterIds [0]=[
    //     2035-
    //TransId['256']=101
    //

    this.init=function(isLoadServerValuesOnEdit)
    {
        //if(me.arrExpressions)
        //{
        var arrValues=moduleView.getModuleTransIds(null,true);
        var iArrServerVarModuleIds=arrValues[0];
        var iArrServerVarSeqIds=arrValues[1];
        this.iArrAllServerModuleIds=arrValues[2];
        this.sMasterFldIds=arrValues[3];
        var iArrBodyTableIds=arrValues[4];
        //this.iArrIsBodyFlds=arrValues[4];

        me.addTargetListeners();

        if(iArrServerVarModuleIds!=null && (moduleView.getTransId()==0 || isLoadServerValuesOnEdit) )
        {
            me.hasOnloadServerVars=true;
            me.connect(iArrServerVarModuleIds,iArrServerVarSeqIds,-1,null,false,null,iArrBodyTableIds);
        }
        //else
        //  moduleRules.evalOnloadRules();
        //}
    };

    this.getAllServerModuleIds=function()
    {
        return me.iArrAllServerModuleIds;
    }

    this.setDependencyParamsCallback=function(fnCallback)
    {
        this.fnDependencyParamsCallback=fnCallback;
    };

    this.hasOnloadVariables=function()
    {
        return me.hasOnloadServerVars;
    };

    this.setServerVariables=function(arrServerVariables)
    {
        if(arrServerVariables)
            this.arrServerVariables=eval(arrServerVariables);
    };

    this.setTargetVariables=function(arrTargetVariables)
    {
        if(arrTargetVariables)
            this.arrTargetVariables=eval(arrTargetVariables);
    };

    this.addTargetListeners=function()
    {
        var arrTargetVariables=me.arrTargetVariables;

        if(arrTargetVariables)
        {
            var sFieldId,objField;
            for(var i=0; i < arrTargetVariables.length; i++)
            {
                //alert(arrTargetVariables[i][0]);
                sFieldId=moduleView.getFieldId(arrTargetVariables[i][0]);
                if(sFieldId) //if field-id is found, it is screen level variable
                {
                    if(this.isBodyVariable(arrTargetVariables[i][0])) //body field
                    {
                        var iRowIndex=0;
                        objField=document.getElementById(sFieldId+"["+iRowIndex+"]");
                        if(!objField)
                            moduleView.throwInvalidFieldError(sFieldId+"["+iRowIndex+"]",0,false);

                        while(objField)
                        {
                            this.addTargetListener(objField,arrTargetVariables[i][1],cross.EVENT_ONBLUR);
                            iRowIndex++;
                            objField=document.getElementById(sFieldId+"["+iRowIndex+"]");
                        }
                    }
                    else
                    {
                        objField = moduleView.getElementByFieldId(sFieldId);
                        this.addTargetListener(objField,arrTargetVariables[i][1],cross.EVENT_ONBLUR);
                    }
                    arrTargetVariables[i][0]=[sFieldId];
                }
                else //for server variables respective module-id will be there at 0th position
                {
                    //alert(arrTargetVariables[i][0]+"----"+me.sMasterFldIds[arrTargetVariables[i][0]])
                    var sArrFieldIds = arrTargetVariables[i][0];
                    if(sArrFieldIds.indexOf("_")!=-1)//multiple master combos with variable prefix
                    {
                        sArrFieldIds = sArrFieldIds.split(",");

                        var arrSrcFields=[];
                        var sVarName;
                        for(var j=0; j < sArrFieldIds.length; j++)
                        {
                            if(sArrFieldIds[j].indexOf("_")!=-1)
                            {
                                sVarName=sArrFieldIds[j].substring(sArrFieldIds[j].indexOf("_")+1);
                                sFieldId=moduleView.getFieldId(sVarName);
                                if(this.isBodyVariable(sVarName)) //body field
                                {
                                    objField=moduleView.getElementByFieldId(sFieldId+"[0]");
                                    this.addTargetListener(objField,arrTargetVariables[i][1],cross.EVENT_ONBLUR);
                                    arrSrcFields[arrSrcFields.length] = sFieldId;

                                    /*var iRowIndex=0;
                                    objField=document.getElementById(sFieldId+"["+iRowIndex+"]");

                                    while(objField)
                                    {
                                        this.addTargetListener(objField,arrTargetVariables[i][1],cross.EVENT_ONBLUR);
                                        iRowIndex++;
                                        objField=document.getElementById(sFieldId+"["+iRowIndex+"]");
                                    }*/

                                }
                                else
                                {
                                    objField = moduleView.getElementByFieldId(sFieldId);
                                    this.addTargetListener(objField, arrTargetVariables[i][1], cross.EVENT_ONBLUR);
                                    arrSrcFields[arrSrcFields.length] = sFieldId;


                                    //arrTargetVariables[i][0]=arrTargetVariables[i][0]+sFieldId+",";
                                }
                            }
                            else
                            {
                                arrSrcFields[arrSrcFields.length]=sArrFieldIds.splice(j, 1);
                                j--;
                            }
                        }

                        arrTargetVariables[i][0] = arrSrcFields;
                        //if(sArrFieldIds.length>0)
                            //arrTargetVariables[i][0]=sArrFieldIds.join(",");
                    }
                    else
                        arrTargetVariables[i][0]=me.sMasterFldIds[arrTargetVariables[i][0]];
                }

            }

            // this.arrTargetVariables=arrTargetVariables;
        }
    };


    this.addFieldListener=function(objField,sFieldId,iEvtType)
    {
        if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_COMBOBOX
            || objField.getAttribute("ctrltype")== Constants.CONTROLTYPE_OPTIONCTRL)
        {
            var objCombo=getComboInstance(sFieldId);
            if(objCombo==null)
                objCombo=getComboInstance(sFieldId+"[0]");
            objCombo.setOnFocusScript("formula.evaluate(\""+sFieldId+"\",false,false,null,0,evt)"); //+",'"+sFieldId+"')");
        }
        else
            cross.addListener(objField,iEvtType,formula.evaluate,true,[sFieldId,false,false,null,0],Constants.SCOPE_SCREEN);//cross.EVENT_ONBLUR
    };


    this.addTargetListener=function(objField,sArrTargetFieldIds,iEvtType)
    {
        //var sArrTargetFieldIds=sTargetFieldId.split(",");
        //util.writeToLog("addTargetListener  "+objField.id+"======"+sTargetFieldId)
        if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_COMBOBOX
            || objField.getAttribute("ctrltype")== Constants.CONTROLTYPE_OPTIONCTRL)
        {
            var objCombo=getComboInstance(objField.id);
            if(iEvtType==cross.EVENT_ONFOCUS)
                objCombo.setOnFocusScript("formula.evaluateTarget(\""+objField.id+"\",\""+sArrTargetFieldIds+"\",false,0,evt)");
            else //if(iEvtType==cross.EVENT_ONBLUR)
                objCombo.setOnLostScript("formula.evaluateTarget(\""+objField.id+"\",\""+sArrTargetFieldIds+"\",false,0,evt)");

        }
        else
        {
            var iDataType=objField.getAttribute("datatype");
            if(iDataType==Constants.DATATYPE_NUMBER || iDataType==Constants.DATATYPE_FRACTION || iDataType==Constants.DATATYPE_BIGNUMBER)
            {
                //registering formatNumber and checkNoOfDecimals callback functions since onblur events attached as attributes in JSP are getting lost when event attached in JS
                if(iDataType==Constants.DATATYPE_FRACTION)
                {
                    //added Constants.SCOPE_SCREEN to addListener
                    cross.addListener(objField, iEvtType, checkNoOfDecimals, false, [objField,objField.getAttribute("noofdecimals")],Constants.SCOPE_SCREEN);//,sFieldId
                }

                cross.addListener(objField,iEvtType,formatNumber,false,[objField],Constants.SCOPE_SCREEN);//,sFieldId
            }

            cross.addListener(objField, iEvtType, me.evaluateTarget, true, [objField.id, sArrTargetFieldIds, false, 0],Constants.SCOPE_SCREEN);//cross.EVENT_ONBLUR
        }

    };


    this.evaluateTarget=function(sSrcFieldId,sArrTargetFieldIds,isRefresh,iRecursionLevel,e)
    {
        if(sSrcFieldId.indexOf("[")!=-1)
            sSrcFieldId = sSrcFieldId.substring(0,sSrcFieldId.indexOf("["));

        //console.warn("evaluateTarget  "+sArrTargetFieldIds+",src="+sSrcFieldId);

        sArrTargetFieldIds = sArrTargetFieldIds.split(",");

        for(var i=0; i < sArrTargetFieldIds.length; i++)
        {
            //util.writeToLog(sSrcFieldId+"!="+sArrTargetFieldIds[i])
            if(sSrcFieldId!=sArrTargetFieldIds[i])
            {
                //console.log("evaluateTarget=="+sSrcFieldId+","+sArrTargetFieldIds[i]);
                formula.evaluate(sArrTargetFieldIds[i], isRefresh, true, sSrcFieldId, iRecursionLevel, e);
            }
            /*if(sSrcFieldId!=sArrTargetFieldIds[i])
            {
                if(me.arrExpressions && me.arrExpressions[sArrTargetFieldIds[i]])
                {
                    var arrCLVariableDTOs = me.arrExpressions[sArrTargetFieldIds[i]].expr;
                    var sBaseFieldId;
                    for(var j=0; j < arrCLVariableDTOs.length; j++)
                    {
                        if(arrCLVariableDTOs[j].iType==formula.VARTYPE_SCREEN
                            || arrCLVariableDTOs[j].iType==formula.VARTYPE_SERVER)
                        {
                            if(arrCLVariableDTOs[j].sVariablePrefix != null)
                            {
                                if(sSrcFieldId != moduleView.getFieldId(arrCLVariableDTOs[j].sVariablePrefix)) //sArrTargetFieldIds[i]==moduleView.getFieldId(arrCLVariableDTOs[j].sValue) &&
                                {
                                    return;
                                }
                            }
                        }
                    }

                    formula.evaluate(sArrTargetFieldIds[i], isRefresh, true, sSrcFieldId, iRecursionLevel, e);
                }
            }*/
        }
    };

    this.addFormula=function(sFieldId,sExpression,sBodyTableId)
    {
        //alert("addFormula  "+sFieldId+"--------"+sExpression)
        sExpression=eval(sExpression);
        if(!this.arrExpressions)
            this.arrExpressions={};

        var objField=document.getElementById(sFieldId);
        if(!objField && !sBodyTableId)
        {
            var clTable=moduleBody.getTableObject(sFieldId,true);
            sBodyTableId=clTable.getTableId();
        }

        this.arrExpressions[sFieldId]={"expr":sExpression,"isBodyExpr":sBodyTableId!=null};

        if(sBodyTableId)
        {
            var objTable=sTable.getInstance(sBodyTableId);
            var iRowCount=objTable.getRowCount(true);
            var iDataType;

            for(var i=0; i < iRowCount;i++)
            {
                objField = document.getElementById(sFieldId+"["+i+"]");
                iDataType = objField.getAttribute("datatype");

                if(iDataType == Constants.DATATYPE_MASTER)
                {
                    if(i==0 && objField)
                        me.addFieldListener(objField, sFieldId, cross.EVENT_ONFOCUS);
                }
                else if(objField && iDataType != Constants.DATATYPE_DOCVIEWER && iDataType != Constants.DATATYPE_PICTURE)
                    me.addFieldListener(objField,sFieldId,cross.EVENT_ONFOCUS);

                //me.addTargetListener(objField,sFieldId,cross.EVENT_ONFOCUS);

                //cross.addListener(document.getElementById(sFieldId+"["+i+"]"),cross.EVENT_ONFOCUS,this.evaluate,true,[sFieldId,false,false]);
            }
        }
        else
        {
            iDataType = objField.getAttribute("datatype");
            if(iDataType != Constants.DATATYPE_DOCVIEWER && iDataType != Constants.DATATYPE_PICTURE)
                me.addFieldListener(objField,sFieldId,cross.EVENT_ONFOCUS);
            //me.addTargetListener(objField,sFieldId,cross.EVENT_ONFOCUS);
        }
        //cross.addListener(document.getElementById(sFieldId),cross.EVENT_ONFOCUS,this.evaluate,true,[sFieldId,false,false]);
    };





    this.setPreviousSeqId=function(elemCombo,e)
    {
        me.iPreviousSeqId=getComboInstance(elemCombo.id).getSelectedId();
        me.isComboItemChanged=false;
    };



    //this.getSQLVariableValues=function(arrVariables,iRowIndex,iBodyFieldIndex,isSendAllBodyRows,sURLParams,sFldId,isBodyExpr,e)
    this.getSQLVariableValues=function(clSQLVariableDTO,iRowIndex,iBodyFieldIndex,isSendAllBodyRows,sURLParams,sFldId,isBodyExpr,e)
    {
        var isConnect=false;

        if(!sURLParams)
            sURLParams="";
        else
            sURLParams+="&";

        var iArrModuleIds=[];
        var iArrSeqIds=[];
        var iArrTableIds=[];
        var sValue=null;
        var clCombo=null;

        if(clSQLVariableDTO.iModuleId > 0)
        {
            var sComboFieldId=null;
            if(clSQLVariableDTO.sVariablePrefix!=null)
                sComboFieldId=moduleView.getFieldId(clSQLVariableDTO.sVariablePrefix);
            clCombo = me.getModuleComboInstance(clSQLVariableDTO.iModuleId,sComboFieldId,clSQLVariableDTO.iSubIndex,isBodyExpr || clSQLVariableDTO.isBodyField,iBodyFieldIndex);
            if(clCombo)
            {
                //sValue = me.getValueFromBuffer2(clSQLVariableDTO.iModuleId, clCombo.getSelectedId(), clSQLVariableDTO.iSubIndex);
                sValue = me.getSQLVariableValue2(clSQLVariableDTO.sValue,clSQLVariableDTO.iModuleId,clCombo.getSelectedId());
                iArrModuleIds[iArrModuleIds.length]=clSQLVariableDTO.iModuleId;
                iArrSeqIds[iArrSeqIds.length]=clCombo.getSelectedId();
                iArrTableIds[iArrTableIds.length]=0;
            }
            //sValue = me.getValueFromBuffer(clSQLVariableDTO.iModuleId, clCombo.getFieldId(), clSQLVariableDTO.iSubIndex, isBodyExpr || clSQLVariableDTO.isBodyField, iBodyFieldIndex);
        }
        else
        {
            //iArrModuleIds[iArrModuleIds.length]=0;
        }

        if(!sValue)
        {
            sURLParams += "fv.SQLVariables=" + clSQLVariableDTO.sValue + "&";
            isConnect=true;
        }


        if(isConnect)
        {
            var arrSQLParams=moduleView.getSQLParams();
            //alert("arrSQLParams  "+arrSQLParams)

            var objField;
            var sFieldName;
            var iBodyTableIndex=-1;
            var iBodyFieldCount=0;
            var sBodyTableId;
            var iArrValidRows=null;
            var clTable=null;
            var iTotalRowCount=0;

            if(!iRowIndex && iRowIndex!=0)
            {
                iRowIndex = -1;
                me.iBodyFieldIndex=null;
                me.iBodyRowIndex=null;
            }
            else
            {
                me.iBodyFieldIndex=iBodyFieldIndex;
                me.iBodyRowIndex=iRowIndex;
            }

            sURLParams+="fv.currentRow="+iRowIndex+"&";
            if(isSendAllBodyRows)
                sURLParams+="fv.isAllBodyRows=true&";

            var sSrcTableId=null;

            for(var i=0,iCount=0; i < arrSQLParams.length; i++)
            {
                objField=document.getElementById("F"+arrSQLParams[i]);
                if(objField)
                {
                    sValue=moduleView.getFieldValueAsString("F"+arrSQLParams[i]);
                    sFieldName=objField.name;
                    var sAttrValue=document.getElementById(sFieldName.substring(0,sFieldName.lastIndexOf("."))+".attr").value;
                    sURLParams+="fv.f["+iCount+"].attr="+sAttrValue+"&fv.f["+iCount+"].value="+sValue+"&";
                    iCount++;
                }
                else if(iBodyFieldIndex>=0 || isSendAllBodyRows)//|| (isBodyExpr && isSendAllBodyRows))
                {
                    if(sSrcTableId==null && sFldId!=null)
                    {
                        var objTable=moduleBody.getTableObject(sFldId,true);
                        if(objTable)
                            sSrcTableId=objTable.getTableId();
                    }

                    if(iBodyFieldIndex>=0)
                        objField=document.getElementById("F"+arrSQLParams[i]+"["+iBodyFieldIndex+"]");
                    else
                        objField=document.getElementById("F"+arrSQLParams[i]+"[0]"); //for SQLFCB defined on header field, all the rows needs to be sent

                    if(objField)
                    {
                        if(sSrcTableId!=null)
                        {
                            clTable=moduleBody.getTableObject(objField.id,false);
                            if(clTable.getTableId()!=sSrcTableId) //sending only current body SQL Params
                                continue;
                        }
                        //else if(clTable==null)

                        clTable=moduleBody.getTableObject(objField.id,false);

                        if(iArrValidRows==null)
                        {
                            iArrValidRows=[];

                            //clTable=moduleBody.getTableObject(objField.id,false);

                            if(isSendAllBodyRows) //for SQLFC function,sending only current row values. For SQLFCB function sending all the valid rows
                            {
                                iTotalRowCount=clTable.getRowCount()-1;
                                var arrColIndexes=moduleBody.getMandatoryColumns(clTable);
                                for(var iBodyRowIndex=0; iBodyRowIndex < iTotalRowCount; iBodyRowIndex++)
                                {
                                    if(iRowIndex>=0 && iBodyRowIndex!=iRowIndex) //checking validation for rows other than current row or for all rows in case of SQLFCB defined on header field
                                    {
                                        if(moduleBody.checkRowValidation(arrColIndexes,iBodyRowIndex,clTable,false))
                                            iArrValidRows[iArrValidRows.length]=iBodyRowIndex;
                                    }
                                    else
                                        iArrValidRows[iArrValidRows.length]=iBodyRowIndex;
                                }
                            }
                            else
                                iArrValidRows[0]=iRowIndex;//by default sending current row
                        }

                        //sValue=moduleView.getFieldValueAsString(objField.id);
                        sFieldName=objField.name;
                        var objCell=document.getElementById("F"+arrSQLParams[i]+"[0]").parentNode;
                        while(objCell.getAttribute("coltype")==null)
                            objCell=objCell.parentNode;


                        var iCellIndex=objCell.cellIndex;
                        //util.writeToLog(objField.id+"  iCellIndex "+iCellIndex);
                        sFieldName=sFieldName.substring(0,sFieldName.indexOf("].")+1);
                        var isSetBodyTableId=true;
                        if(sBodyTableId!=null)
                        {
                            if(sBodyTableId==document.getElementById(sFieldName+".tableId").value)
                                isSetBodyTableId=false;
                        }

                        if(isSetBodyTableId)
                        {
                            iBodyTableIndex=iCount;
                            sBodyTableId=document.getElementById(sFieldName+".tableId").value;
                            sURLParams+="fv.b["+iBodyTableIndex+"].tableId="+sBodyTableId+"&";//b[18].tableId
                            iCount++;
                            iBodyFieldCount=0;
                        }

                        if(sSrcTableId==null)
                            sSrcTableId=moduleBody.getTableId(objField.id,false);//for before save SQLFCB rule table id will not be there

                        var iHiddenColumns=3;
                        var objColTypeRow = document.getElementById(sSrcTableId).tBodies[0].rows[0];
                        var iFieldIndex = iCellIndex-iHiddenColumns;//ignoring SNo,iBodyId and iSequence columns;

                        for(var c= 0,iColType=0; c < iCellIndex; c++)
                        {
                            iColType = objColTypeRow.cells[c].getAttribute("coltype");
                            if(iColType==TYPE_BUTTON) //ignoring link button
                            {
                                iFieldIndex--;
                                break;
                            }
                        }



                        var sFieldId=document.getElementById(sFieldName+".f["+iFieldIndex+"].fieldId").value;
                        var sTagValue=document.getElementById(sFieldName+".f["+iFieldIndex+"].tagValue").value;


                        sURLParams+="fv.b["+iBodyTableIndex+"].f["+iBodyFieldCount+"].fieldId="+sFieldId+"&fv.b["+iBodyTableIndex+"].f["+iBodyFieldCount+"].tagValue="+sTagValue+"&";//b[18].f[0].fieldId,b[18].f[0].tagValue
                        //sURLParams+="fv.b["+iBodyTableIndex+"].r[0].values="+sValue+"&";//b[18].r[0].values //hardcoded '0' since sending only one row values

                        clTable=moduleBody.getTableObject(sFldId,true);
                        if(clTable==null)
                            clTable=moduleBody.getTableObject(objField.id,false);
                        for(var j=0; j < iArrValidRows.length; j++)
                        {
                            //sValue=moduleView.getFieldValueAsString(objField.id);
                            sValue=clTable.getValueAt(iArrValidRows[j],iCellIndex,false,0,null,true);

                            sURLParams+="fv.b["+iBodyTableIndex+"].r["+iArrValidRows[j]+"].values="+sValue+"&";//b[18].r[0].values //hardcoded '0' since sending only one row values
                        }

                        iBodyFieldCount++;
                        iArrValidRows=null;
                    }
                    else
                        util.writeToConsole("Invalid body fieldid "+"F"+arrSQLParams[i]+"["+iBodyFieldIndex+"]");
                }
                else
                    util.writeToConsole("Invalid fieldid "+arrSQLParams[i]);
            }

            //util.writeToConsole("SQL Fn params: "+sURLParams);
            //alert(sURLParams)
            me.connect(iArrModuleIds,iArrSeqIds,iBodyFieldIndex,sURLParams,true,true,iArrTableIds,e);
        }
        else
            me.evalComboTargetExpr(e);

    };


    this.handleQuantityChange=function(objQty,e)
    {
        //if(clProductsTable.isQtRangeEnabled())
        //{
        var iTableId=0;
        var sTableId = moduleBody.getTableId(objQty.id,false);
        if(sTableId!=null)
            iTableId = document.getElementById(sTableId).getAttribute("tableId");

        var sProductFieldId = clProductsTable.getProductFieldId(iTableId);

        if (sProductFieldId != null)
        {
            me.isComboItemChanged = true;
            me.iPreviousSeqId = 0;

            var sId = objQty.id;
            var iFieldIndex = sId.substring(sId.indexOf("[") + 1, sId.indexOf("]"));

            var objProductCombo = document.getElementById(sProductFieldId + "[" + iFieldIndex + "]");
            me.getServerVarValue2(objProductCombo.id, true, e);
        }
        //}
    };

    this.getServerVarValue=function(elemCombo,e)
    {
        var sElemId=elemCombo.id;

        if(me.iPreviousSeqId > 0 && me.iPreviousSeqId!=getComboInstance(elemCombo.id).getSelectedId())
            me.isComboItemChanged=true;
        me.iPreviousSeqId=0;

        //util.writeToLog("setting me.iBodyRowIndex  "+me.iBodyRowIndex)
        me.getServerVarValue2(sElemId,false,e);
    };

    this.getServerVarValue2=function(sElemId,isAlwaysConnect,e)
    {
        var iTableId=0;
        if(sElemId.indexOf("[")!=-1)
        {
            me.iBodyFieldIndex=sElemId.substring(sElemId.indexOf("[")+1,sElemId.indexOf("]"));
            me.iBodyRowIndex=me.getBodyRowIndex(true,e,sElemId);
            me.sCurrentFieldIdId=sElemId.substring(0,sElemId.indexOf("["));
            iTableId=moduleBody.getIntTableId(sElemId,false);
        }
        else
            me.sCurrentFieldIdId=sElemId;

        var objCombo=getComboInstance(sElemId);
        //var elemTarget=document.getElementById(sElemId);
        var iModuleId=objCombo.getMasterType();//elemCombo.getAttribute("mastertype");

        if(iModuleId==Genernal_Master && objCombo.iSqlfcMasterType>0)
            iModuleId=objCombo.iSqlfcMasterType;

        var iSeqId=objCombo.getSelectedId();
        if(iSeqId > 0)  //added condition since evaluateTargetExpr is getting called many times
        {
            //  alert("iSeqId="+iSeqId);
            var sURLParams = null;
            var sVariables = me.arrServerVariables[iModuleId];

            if (me.fnDependencyParamsCallback != null)
            {
                var sArrAdditionalParams = me.fnDependencyParamsCallback(sVariables);
                if (sArrAdditionalParams)
                {
                    sURLParams = "";
                    var sAdditionalParams;
                    for (var i = 0; i < sArrAdditionalParams.length; i++)
                    {
                        sAdditionalParams = sArrAdditionalParams[i];
                        sURLParams += "fv.dependencyFields=" + sAdditionalParams[0] + "&fv.dependencyFieldValues=" + sAdditionalParams[1] + "&";
                    }
                }
            }

            me.iCurrentFldModuleId = iModuleId;
            me.connect([iModuleId], [iSeqId], me.iBodyFieldIndex, sURLParams, isAlwaysConnect, false, [iTableId], e);
        }

    };

    this.connect=function(iArrModuleIds,iArrSeqIds,iBodyFieldIndex,sURLParams,isAlwaysConnect,isSQLVariables,iArrBodyTableIds,e)
    {
        //util.writeToLog("connect")
        //alert(iSeqId)
        var sQuery="";
        var isConnect=false;
        if(isAlwaysConnect)
            isConnect=true;

        if(iArrModuleIds)
        {
            if(iBodyFieldIndex==null)
                iBodyFieldIndex=-1;

            //var iUnitFieldId = moduleView.getUnitFieldId(); //only one unit field is handled. If 2nd body table contains one more Unit field then that fieldid will be used
            var isProductHandled=false;
            var iPrevTableId=-1;
            var iBodyCount=-1;

            for(var i=0;i<iArrModuleIds.length; i++)
            {
                var iModuleId = iArrModuleIds[i];
                var iSeqId = iArrSeqIds[i];

                if(iPrevTableId!=iArrBodyTableIds[i])
                {
                    iPrevTableId=iArrBodyTableIds[i];
                    iBodyCount++;
                }

                if( (iModuleId==Constants.PRODUCTS || clProductsTable.isModuleLinkedToProduct(iModuleId)))//iSeqId > 0 &&
                {
                    if(!isProductHandled)
                    {
                        if (me.arrServerVariables[iModuleId] || me.arrServerVariables[Constants.PRODUCTS])
                        {
                            var objProductComboBox = null;
                            var iProductSeqId = 0;
                            var iBodyModuleIds = null;
                            if (isAlwaysConnect)
                                isConnect = true;

                            var sProductFieldId = me.sCurrentFieldIdId;

                            if (iModuleId == Constants.PRODUCTS)
                            {
                                iProductSeqId = iSeqId;
                            }
                            else
                            {
                                sProductFieldId = clProductsTable.getProductFieldId(iArrBodyTableIds[i]);
                                //me.sCurrentFieldIdId = sProductFieldId;
                                if (iBodyFieldIndex >= 0)
                                {
                                    objProductComboBox = getComboInstance(sProductFieldId + "[" + iBodyFieldIndex + "]");
                                    iProductSeqId = objProductComboBox.getSelectedId();
                                }
                            }

                            if (iBodyFieldIndex >= 0 && clProductsTable.isProductRowEmpty(iBodyFieldIndex, sProductFieldId))
                                continue;


                            var isCacheExists = true;

                            if (iModuleId == Constants.PRODUCTS)
                                isCacheExists = me.arrVarValues[clProductsTable.getProductValuesKey(Constants.PRODUCTS, iProductSeqId, iBodyFieldIndex, me.sCurrentFieldIdId)] != null;
                            else
                            {
                                if (me.arrServerVariables[iModuleId])
                                    isCacheExists = me.arrVarValues[iModuleId + "_" + iSeqId] != null; //checking current module cache

                                if (isCacheExists && iProductSeqId > 0) //checking product cache if any other module changed
                                    isCacheExists = me.arrVarValues[clProductsTable.getProductValuesKey(Constants.PRODUCTS, iProductSeqId, iBodyFieldIndex, sProductFieldId)] != null;
                            }


                            if (!isCacheExists || isConnect)
                            {
                                var sVariables = me.arrServerVariables[Constants.PRODUCTS];
                                var isAddQty = false;
                                var iProductTableId = 0;


                                if (me.sCurrentFieldIdId)
                                {
                                    if (sVariables && sVariables.indexOf("QF8") != -1) //sending qty field by default for retrieving product cost price
                                    {
                                        isAddQty = true;
                                        iProductTableId = moduleBody.getIntTableId(me.sCurrentFieldIdId, true);
                                        iBodyModuleIds = clProductsTable.getProductLinkedModuleIds(iProductTableId, iModuleId);
                                    }
                                }

                                if (iBodyFieldIndex >= 0)
                                    sQuery += "&" + me.getQueryVarPrefix(iArrBodyTableIds[i], iBodyCount, 0) + ".rowIndex=" + iBodyFieldIndex;

                                if (me.arrServerVariables[iModuleId])
                                {
                                    sQuery += "&" + me.getQueryVarPrefix(iArrBodyTableIds[i], iBodyCount, -1) + ".moduleTypes=" + iModuleId
                                        + "&" + me.getQueryVarPrefix(iArrBodyTableIds[i], iBodyCount, 0) + ".seqIds=" + iSeqId
                                        + "&" + me.getQueryVarPrefix(iArrBodyTableIds[i], iBodyCount, -1) + ".csvVariables=" + me.arrServerVariables[iModuleId];
                                    isConnect = true;
                                }

                                if (iModuleId == Constants.PRODUCTS) //sending units variables along with product variables
                                {
                                    if (me.arrServerVariables[iModuleId])
                                    {
                                        if (me.arrServerVariables[Constants.UNITS_MODULE])
                                            sQuery += "," + me.arrServerVariables[Constants.UNITS_MODULE]; //this should be added first

                                        sQuery += me.getProductDependencyFields(isAddQty, iBodyModuleIds, 0, iBodyFieldIndex, iArrBodyTableIds[i], iBodyCount, true);
                                    }
                                }
                                else //adding product on units onblur
                                {
                                    if (objProductComboBox) //body expr,units onblur
                                    {
                                        sQuery += "&" + me.getQueryVarPrefix(iArrBodyTableIds[i], iBodyCount, -1) + ".moduleTypes=" + Constants.PRODUCTS
                                            + "&" + me.getQueryVarPrefix(iArrBodyTableIds[i], iBodyCount, 0) + ".seqIds=" + objProductComboBox.getSelectedId()
                                            + "&" + me.getQueryVarPrefix(iArrBodyTableIds[i], iBodyCount, -1) + ".csvVariables=" + me.arrServerVariables[Constants.PRODUCTS];

                                        sQuery += me.getProductDependencyFields(isAddQty, iBodyModuleIds, 0, iBodyFieldIndex, iArrBodyTableIds[i], iBodyCount, true);
                                        isConnect = true;
                                    }
                                    else if (me.sCurrentFieldIdId && iBodyFieldIndex == -1)
                                    {  //formula triggered from header to body

                                        var clTable = moduleBody.getTableObject(me.sCurrentFieldIdId, true);

                                        if (clTable)
                                        {
                                            var iRowCount = clTable.getRowCount(true);
                                            iProductTableId = iArrBodyTableIds[i];

                                            if (iProductTableId == 0)
                                                iProductTableId = moduleBody.getIntTableId(me.sCurrentFieldIdId, true);
                                            me.sCurrentFieldIdId = "";

                                            var isAddModuleType = true;
                                            for (var r = 0; r < iRowCount; r++)
                                            {
                                                var sProdFldId = sProductFieldId + "[" + r + "]";
                                                objProductComboBox = getComboInstance(sProdFldId);

                                                if (objProductComboBox.getSelectedId() > 0)
                                                {
                                                    if (isAddModuleType)
                                                    {
                                                        sQuery += "&" + me.getQueryVarPrefix(iProductTableId, iBodyCount, -1) + ".moduleTypes=" + Constants.PRODUCTS;
                                                        sQuery += "&" + me.getQueryVarPrefix(iProductTableId, iBodyCount, -1) + ".csvVariables=" + me.arrServerVariables[Constants.PRODUCTS];

                                                        if (iBodyModuleIds != null)
                                                        {
                                                            for (var d = 0; d < iBodyModuleIds.length; d++)
                                                            {
                                                                if (me.arrServerVariables[iBodyModuleIds[d][0]] != null && iBodyModuleIds[d][0] != Constants.PRODUCTS)
                                                                {
                                                                    sQuery += "&" + me.getQueryVarPrefix(iProductTableId, iBodyCount, -1) + ".moduleTypes=" + iBodyModuleIds[d][0];
                                                                    sQuery += "&" + me.getQueryVarPrefix(iProductTableId, iBodyCount, -1) + ".csvVariables=" + me.arrServerVariables[iBodyModuleIds[d][0]];
                                                                }
                                                            }
                                                        }

                                                        isAddModuleType = false;
                                                        isConnect = true;
                                                    }

                                                    sQuery += "&" + me.getQueryVarPrefix(iProductTableId, iBodyCount, r) + ".rowIndex=" + r;
                                                    sQuery += "&" + me.getQueryVarPrefix(iProductTableId, iBodyCount, r) + ".seqIds=" + objProductComboBox.getSelectedId();

                                                    if (iBodyModuleIds != null)
                                                    {
                                                        for (var d = 0; d < iBodyModuleIds.length; d++)
                                                        {
                                                            if (me.arrServerVariables[iBodyModuleIds[d][0]] != null && iBodyModuleIds[d][0] != Constants.PRODUCTS)
                                                            {
                                                                var objCombo = getComboInstance(iBodyModuleIds[d][1] + "[" + r + "]");
                                                                if (objCombo && objCombo.getSelectedId() > 0)
                                                                    sQuery += "&" + me.getQueryVarPrefix(iProductTableId, iBodyCount, r) + ".seqIds=" + objCombo.getSelectedId();
                                                                else
                                                                    sQuery += "&" + me.getQueryVarPrefix(iProductTableId, iBodyCount, r) + ".seqIds=0";
                                                            }
                                                        }
                                                    }

                                                    if (me.sCurrentFieldIdId)
                                                    {
                                                        if (me.sCurrentFieldIdId.indexOf(sProductFieldId) == -1)
                                                            me.sCurrentFieldIdId += "," + sProductFieldId;
                                                    }
                                                    else
                                                        me.sCurrentFieldIdId = sProductFieldId;

                                                    sQuery += me.getProductDependencyFields(isAddQty, iBodyModuleIds, r, r, iProductTableId, iBodyCount, r == 0);

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        isProductHandled = true;
                    }
                }
                else if((me.arrServerVariables[iModuleId] && iSeqId>0 && !me.arrVarValues[iModuleId+"_"+iSeqId]) || isAlwaysConnect || isSQLVariables)
                {
                    if(me.arrServerVariables[iModuleId])
                    {
                        sQuery += "&"+me.getQueryVarPrefix(iArrBodyTableIds[i],iBodyCount,-1)+".moduleTypes=" + iModuleId
                                + "&"+me.getQueryVarPrefix(iArrBodyTableIds[i],iBodyCount,0)+".seqIds=" + iSeqId
                                + "&"+me.getQueryVarPrefix(iArrBodyTableIds[i],iBodyCount,-1)+".csvVariables=" + me.arrServerVariables[iModuleId];

                    }

                    //if (iModuleId == Constants.PRODUCTS && !isProductHandled)
                    //    sQuery += me.getProductDependencyFields(isAddQty,iQtyFieldId,iBodyModuleIds,r);

                    isConnect=true;

                    if(isAlwaysConnect && me.arrVarValues[iModuleId+"_"+iSeqId])
                        me.arrVarValues[iModuleId+"_"+iSeqId]=null;
                }
                //else
                //    sQuery+="&";


            }
            me.iArrCurrentModuleIds=iArrModuleIds;
            me.iArrCurrentSeqIds=iArrSeqIds;
        }

        var byActionType=0;
        if(sURLParams)
        {
            sQuery+="&"+sURLParams;
            isConnect=true;
            byActionType=ACTION_LOADING;
        }

        //util.writeToLog("isConnect=="+isConnect+"------"+sQuery);

        if(isConnect)
        {
            sQuery+="&reqType=1"; //used for DTO initialization purpose in ctl
            sQuery+="&fv.moduleType="+document.getElementById("moduleId").value;
            sQuery+="&fv.transId="+document.getElementById("transId").value;

            var sBodyModuleIds=",";

            for(var i=0;i<me.iArrAllServerModuleIds.length; i++)
            {
                var sArrFieldIds=me.sMasterFldIds[me.iArrAllServerModuleIds[i]];
                for(var j=0; j < sArrFieldIds.length; j++)
                {
                    var sFieldId=sArrFieldIds[j];

                    /*if(me.iArrIsBodyFlds[i]==true)
                     {
                     if(iBodyFieldIndex!=null & iBodyFieldIndex>=0)
                     sFieldId+="["+iBodyFieldIndex+"]";
                     else
                     continue;
                     }*/
                    //                alert(me.iArrAllServerModuleIds.length)

                    var objComboBox=getComboInstance(sFieldId);

                    if(objComboBox==null && (iBodyFieldIndex!=null && iBodyFieldIndex>=0))
                    {
                        sFieldId+="["+iBodyFieldIndex+"]";
                        objComboBox=getComboInstance(sFieldId);
                    }


                    if(objComboBox!=null)
                    {
                        var iSelectedSeqId=objComboBox.getSelectedId();
                        sQuery+="&fv.allModuleTypes="+me.iArrAllServerModuleIds[i]+"&fv.allModuleSeqIds="+(iSelectedSeqId>0?iSelectedSeqId:0)+"&";
                    }
                    /*else if(iBodyFieldIndex==null || iBodyFieldIndex==-1) //onpage load get form all module types with body master type fields also
                    {
                        if(sBodyModuleIds.indexOf(","+me.iArrAllServerModuleIds[i]+",")==-1 && document.getElementById(sFieldId+"[0]"))
                        {
                            var arrColValues=moduleBody.getColValueOfAllRows(sFieldId, false, null, null, true);
                            if(arrColValues!=null)
                            {
                                for (var k = 0; k < arrColValues.length; k++)
                                {
                                    if(arrColValues[k]>0)
                                        sQuery += "&fv.allModuleTypes=" + me.iArrAllServerModuleIds[i] + "&fv.allModuleSeqIds=" + arrColValues[k] + "&";
                                }
                            }

                            sBodyModuleIds+=me.iArrAllServerModuleIds[i]+",";
                        }
                    }*/
                }
            }
            util.writeToConsole("getValues: "+sQuery);
            //alert("sQuery  "+sQuery)
            //util.toggleBackground(true);
            //util.toggleLoadStatus(false,null);
            con.sendPostRequest("module/m!getVariableValues_nrf.do",sQuery,null,"formula.handleResponse",null,"fstatus",null,true,true,null,false,[isSQLVariables]);
        }
        else
            me.evalComboTargetExpr(e);

    };

    this.getQueryVarPrefix=function(iBodyTableId,iBodyCount,iRowIndex)
    {
        if(iBodyTableId>0)
        {
            if(iRowIndex!=null && iRowIndex>=0)
                return "fv.body[" + iBodyCount + "].rows[" + iRowIndex + "]";
            return "fv.body[" + iBodyCount + "]";
        }
        return "fv";
    };

    this.getProductDependencyFields=function(isAddQty,iBodyModuleIds,iRowIndex,iBodyFieldIndex,iBodyTableId,iBodyCount,isAddDepField)
    {
        var sParams="";

        //if(iRowIndex>=0 && iBodyFieldIndex==-1)
        //    iBodyFieldIndex=iRowIndex;

        if (isAddQty)
        {
            var iQty=0;
            var iQtyFieldId = clProductsTable.getQtyFieldId();//"35134";//qty fieldid
            var iQtyTableId = clProductsTable.getQtyTableId();

            if(isAddDepField)
                sParams += "&"+me.getQueryVarPrefix(iBodyTableId,iBodyCount,-1)+".dependencyFields=0";// + iQtyFieldId;

            if (iQtyFieldId > 0 && iBodyFieldIndex!=-1 && iBodyTableId==iQtyTableId)
                iQty = util.parseNumberValue(document.getElementById("F" + iQtyFieldId + "[" + iBodyFieldIndex + "]").value);

            if(!iQty)
                iQty=1;

            sParams += "&"+me.getQueryVarPrefix(iBodyTableId,iBodyCount,iRowIndex)+".dependencyFieldValues=" + iQty;
        }

        if (iBodyModuleIds != null)
        {
            for (var i = 0; i < iBodyModuleIds.length; i++)
            {
                var iBodyModuleId=iBodyModuleIds[i][0];
                var iBodyFieldId=iBodyModuleIds[i][1];
                var objCombo=getComboInstance(iBodyFieldId);
                if(!objCombo && iBodyFieldIndex!=-1)
                    objCombo= getComboInstance(iBodyFieldId + "[" + iBodyFieldIndex + "]");

                if(objCombo!=null)
                {
                    var iBodySeqId = objCombo.getSelectedId();

                    //if(me.arrServerVariables[iBodyModuleId])
                    {
                        if (isAddDepField)
                            sParams += "&" + me.getQueryVarPrefix(iBodyTableId, iBodyCount, -1) + ".dependencyFields=" + iBodyModuleId;
                        sParams += "&" + me.getQueryVarPrefix(iBodyTableId, iBodyCount, iRowIndex) + ".dependencyFieldValues=" + iBodySeqId;

                        /*sParams += "&" + me.getQueryVarPrefix(iBodyTableId, iBodyCount, -1) + ".moduleTypes=" + iBodyModuleId + "&" + me.getQueryVarPrefix(iBodyTableId, iBodyCount, r) + ".seqIds=" + iBodySeqId
                         + "&" + me.getQueryVarPrefix(iBodyTableId, iBodyCount, r) + ".csvVariables=" + me.arrServerVariables[iBodyModuleId];*/
                    }
                }
            }
        }


        return sParams;
    };

    this.handleResponse=function(sResponse,iStatusCode,sMsg,appValue,objReqCache)
    {
        me.handleVariableValues(sResponse);
        if(objReqCache[0]==true)//clearing moduleids for sql variables
        {
            me.iArrCurrentModuleIds=null;
            me.iArrCurrentSeqIds=null;
        }
        window.event=null; //making event object to null since it contains XMLRequest event when AJAX request is made. While evaluating target there will be an issue if e is present
        //moduleRules.evalOnloadRules();
        me.evalComboTargetExpr(null);
        //util.toggleBackground(false);
    };


    this.evalComboTargetExpr=function(e)
    {
        //if(me.iArrCurrentModuleIds)
        //{
            //util.writeToLog("sCurrentFieldIdId  "+me.sCurrentFieldIdId)

            var sCurrentFieldIdId=me.sCurrentFieldIdId;
            var iArrCurrentModuleIds=me.iArrCurrentModuleIds;
            var iArrCurrentSeqIds=me.iArrCurrentSeqIds;
            var iCurrentFldModuleId=me.iCurrentFldModuleId;

            me.sCurrentFieldIdId=null;
            me.iArrCurrentModuleIds=null;
            me.iArrCurrentSeqIds=null;
            me.iCurrentFldModuleId=null;

            if(sCurrentFieldIdId!=null && sCurrentFieldIdId)
            {
                //console.error("from evalComboTargetExpr sCurrentFieldIdId "+sCurrentFieldIdId);
                if(sCurrentFieldIdId.indexOf(",")!=-1)
                    me.evaluateTargetExpr(sCurrentFieldIdId.split(","),false,0,e);
                else
                    me.evaluateTargetExpr([sCurrentFieldIdId],false,0,e);
            }

            if(iArrCurrentModuleIds)
            {
                var sArrFieldIds=[];

                for(var i=0;i < iArrCurrentModuleIds.length; i++)
                {
                    if(iCurrentFldModuleId==iArrCurrentModuleIds[i])
                        continue;

                    var sTypewiseFieldIds=me.sMasterFldIds[iArrCurrentModuleIds[i]];
                    for(var j=0; j < sTypewiseFieldIds.length; j++)
                        sArrFieldIds[sArrFieldIds.length]=sTypewiseFieldIds[j];
                }

                //console.error("from evalComboTargetExpr "+sArrFieldIds);
                me.evaluateTargetExpr(sArrFieldIds,false,0,e);
            }

            me.iBodyRowIndex=null;
            me.iBodyFieldIndex=null;

        //}
    };

    this.handleVariableValues=function(sResponse)
    {
        /*var clArrFormulaVarDTOs=eval(sResponse);
        if(typeof clArrFormulaVarDTOs == "string")
            clArrFormulaVarDTOs=eval(clArrFormulaVarDTOs);

        var clFormulaVarDTO=clArrFormulaVarDTOs[0];

//        alert(clFormulaVarDTO.iModuleTypes)
//        alert(clFormulaVarDTO.iSeqIds)
        //alert(clFormulaVarDTO.sValues)

        var iArrModuleTypes=eval("["+clFormulaVarDTO.iModuleTypes+"]");
        var iArrSeqIds=eval("["+clFormulaVarDTO.iSeqIds+"]");
        var sArrValues=eval("["+clFormulaVarDTO.sValues+"]");
        var iBodyRowIndexes=null;
*/


         /*if(clFormulaVarDTO.clBodyRows)
        {
            iBodyRowIndexes = clFormulaVarDTO.clBodyRows[0];
        }*/

        /*var sArrDependencyFldValues=null;
        if(clFormulaVarDTO.sDependencyFldValues)
            sArrDependencyFldValues=eval("["+clFormulaVarDTO.sDependencyFldValues+"]");*/

        var clFormulaVarDTO;
        if(typeof sResponse=="string")
        {
            //sResponse.replace(\\u0027)
            clFormulaVarDTO = eval(sResponse); //commented JSON.parse for js issue when  string contains Arabic characters
            //clFormulaVarDTO = JSON.parse(sResponse);
        }
        else
            clFormulaVarDTO=sResponse;

        var iArrModuleTypes=clFormulaVarDTO.moduleTypes;
        var iArrSeqIds=clFormulaVarDTO.seqIds;
        var sArrValues=clFormulaVarDTO.values;
        var clBodyModules=clFormulaVarDTO.bodyModules;

        var sProductValueKey;

        if(iArrModuleTypes!=null)
        {
            for (var j = 0; j < iArrModuleTypes.length; j++)
            {
                if (iArrModuleTypes[j] == Constants.PRODUCTS)
                {
                    sProductValueKey = clProductsTable.getProductValuesKey(iArrModuleTypes[j], iArrSeqIds[j], -1, me.sCurrentFieldIdId);
                    me.setProductVariableValues(sProductValueKey, eval(sArrValues[j]));
                }
                else
                    me.setVariableValues(iArrModuleTypes[j], iArrSeqIds[j], eval(sArrValues[j]));
            }
        }

        if(clBodyModules!=null)
        {
            for(var j=0; j < clBodyModules.length; j++)
            {
                var clBody=clBodyModules[j];
                iArrModuleTypes=clBody.moduleTypes;
                var clBodyRows=clBody.rows;

                for(var k=0; k < clBodyRows.length;k++)
                {
                    if(clBodyRows[k]==null)
                        continue;

                    iArrSeqIds=clBodyRows[k].seqIds;
                    sArrValues=clBodyRows[k].values;
                    //if(sArrValues!=null)
                    //    sArrValues=sArrValues[0].split(",");

                    for(var l=0; l < iArrModuleTypes.length; l++)
                    {
                        if (iArrModuleTypes[l] == Constants.PRODUCTS)
                        {
                            sProductValueKey = clProductsTable.getProductValuesKey(iArrModuleTypes[l], iArrSeqIds[l], clBodyRows[k].rowIndex, me.sCurrentFieldIdId);
                            me.setProductVariableValues(sProductValueKey, eval(sArrValues[l]));
                        }
                        else
                            me.setVariableValues(iArrModuleTypes[l], iArrSeqIds[l], eval(sArrValues[l]));
                    }
                }
            }
        }

        //formula.arrSQLVarValues={};

        if(clFormulaVarDTO.sqlVariables)
        {
            var sArrSQLVariables=clFormulaVarDTO.sqlVariables;
            var sArrSQLVariableValues=clFormulaVarDTO.sqlVariableValues;

            for(var j=0; j < sArrSQLVariableValues.length; j++)
            {
                me.setSQLVariableValues(sArrSQLVariables[j], sArrSQLVariableValues[j], me.iArrCurrentModuleIds[j], me.iArrCurrentSeqIds[j]);
            }
        }
    };


    this.getModuleComboInstance=function(iModuleId,sFieldId,iSubIndex,isBodyExpr,iBodyFieldIndex)
    {
        if(!sFieldId)
        {
            var sArrFieldIds=this.sMasterFldIds[iModuleId];//-Constants.ACCOUNTS];
            if(!sArrFieldIds)
                moduleView.throwInvalidFieldError(null,iModuleId,false,true,iModuleId);
            sFieldId=sArrFieldIds[0];
        }

        if( !document.getElementById(sFieldId) && isBodyExpr && iBodyFieldIndex>=0)
            sFieldId+="["+iBodyFieldIndex+"]";

        //alert(sFieldId)

        return getComboInstance(sFieldId);
    };

    this.getValueFromBuffer=function(iModuleId,sFieldId,iSubIndex,isBodyExpr,iBodyFieldIndex,sCurrentFieldIdId)
    {
        var clCombo=me.getModuleComboInstance(iModuleId,sFieldId,iSubIndex,isBodyExpr,iBodyFieldIndex);
        if(clCombo)
            return me.getValueFromBuffer2(iModuleId, clCombo.getSelectedId(),iSubIndex,sFieldId,iBodyFieldIndex,sCurrentFieldIdId);
        return 0;
    };

    this.getValueFromBuffer2=function(iModuleId,iSeqId,iSubIndex,sFieldId,iBodyFieldIndex,sCurrentFieldIdId)
    {
        //util.writeToLog(sFieldId+"-----------"+iSeqId)
        var sKey;
        if(iModuleId==Constants.PRODUCTS)
        {
            if(sCurrentFieldIdId==null)
                sCurrentFieldIdId = sFieldId;
            sKey = clProductsTable.getProductValuesKey(iModuleId, iSeqId, iBodyFieldIndex, sCurrentFieldIdId);//me.sCurrentFieldIdId);
        }
        else
            sKey=iModuleId+"_"+iSeqId;

        var sValueArray=formula.arrVarValues[sKey];

        //util.writeToLog("getValueFromBuffer iRowIndex sFieldId "+iRowIndex+"--------"+sFieldId+"-------"+(iModuleId+"_"+iSeqId)+"-------"+isBodyExpr);
        if(sValueArray)
        {
            //util.writeToLog("getValueFromBuffer "+sValueArray[iSubIndex]);
            return sValueArray[iSubIndex];
        }
    };

    this.removeVariableValues=function(iModuleId,iSeqId)
    {
        formula.arrVarValues[iModuleId+"_"+iSeqId]=null;
    };

    this.setVariableValues=function(iModuleId,iSeqId,sArrValues)
    {
        formula.arrVarValues[iModuleId+"_"+iSeqId]=sArrValues;
    };

    this.setProductVariableValues=function(sKey,sArrValues)
    {
        formula.arrVarValues[sKey]=sArrValues;
    };

    this.setSQLVariableValues=function(sSQLVar,sValue,iModuleId,iSeqId)
    {
        if(iModuleId > 0)
            formula.arrSQLVarValues[sSQLVar+"_"+iModuleId+"_"+iSeqId]=sValue;
        else
            formula.arrSQLVarValues[sSQLVar]=sValue;
    };

    this.getSQLVariableValue=function(sSQLVar,iModuleId,sFieldId,iSubIndex,isBodyExpr,iBodyFieldIndex)
    {
        var iSeqId=0;
        if(iModuleId > 0)
        {
            var clCombo=me.getModuleComboInstance(iModuleId,sFieldId,iSubIndex,isBodyExpr,iBodyFieldIndex);
            iSeqId=clCombo.getSelectedId();
        }

        return me.getSQLVariableValue2(sSQLVar,iModuleId,iSeqId);
    };


    this.getSQLVariableValue2=function(sSQLVar,iModuleId,iSeqId)
    {
        var sValue;
        if(iModuleId > 0)
            sValue = formula.arrSQLVarValues[sSQLVar + "_" + iModuleId + "_" + iSeqId];
        else
            sValue = formula.arrSQLVarValues[sSQLVar];

        if(sValue)
            return sValue;
        else
            return "";
    };

    this.getBodyRowIndex=function(isBodyExpr,e,sElemId)
    {
        var iRowIndex=-1;
        if(isBodyExpr && e && e.type!="load" && !(e.currentTarget instanceof XMLHttpRequest))
        {
            var objInput;
            if(sElemId)
                objInput=document.getElementById(sElemId);
            else
                objInput=cross.getSrcElement(e);

            var objTr=objInput;

            if(objInput.getAttribute("ctrltype")
                    && (objInput.getAttribute("ctrltype")==Constants.CONTROLTYPE_DURATION || objInput.getAttribute("ctrltype")==Constants.CONTROLTYPE_TIMEPICKER))
            {
                while(objTr && objTr.nodeName!="TR")
                    objTr=objTr.parentNode;
            }

            objTr=objTr.parentNode;

            while(objTr && objTr.nodeName!="TR")
                objTr=objTr.parentNode;
            if(objTr && objTr.rowIndex >= 0)
                iRowIndex=objTr.rowIndex-1;
        }
        else if(me.iBodyRowIndex!=null && me.iBodyRowIndex>=0)
            iRowIndex=me.iBodyRowIndex;

        return iRowIndex;
    };

    this.getBodyRowFieldIndex=function(iBodyRowIndex,clTable)
    {
        var objInput=clTable.getElementAt(iBodyRowIndex,3);//3=first column index in body table, 0=sno,1=bodyid,2=seq
        var sId=objInput.id;
        if(sId && sId.indexOf("[")!=-1)
            return sId.substring(sId.indexOf("[")+1,sId.indexOf("]"));
        return -1;
    }

    this.replaceVarsWithValues=function(arrCLVariableDTOs,isBodyExpr,iRowIndex,sFldId,isRefresh,isTargetExpr,iBodyFieldIndex,sSrcFieldId,isEvalCondition,e,isTargetBodyField)
    {
        var isSendAllBodyRows=false;
        var arrSQLVariables=[];
        var arrSQLBodyVariables=[];

        for(var i=0; i < arrCLVariableDTOs.length; i++)
        {
            if(arrCLVariableDTOs[i].iType==formula.VARTYPE_SQLFC_FUNCTION
                || arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFCB_FUNCTION
                || arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFCVAL_FUNCTION
                || arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFC_ITEMS_FUNCTION
                )
            {
                //clSQLVariableDTO=arrCLVariableDTOs[i];
                if(arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFCB_FUNCTION
                    || arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFCVAL_FUNCTION
                    || arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFC_ITEMS_FUNCTION
                    )
                {
                    isRefresh=true;
                    isSendAllBodyRows = true;
                }

                if(arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFCB_FUNCTION)
                    arrSQLBodyVariables[arrSQLVariables.length]=arrCLVariableDTOs[i];
                else
                    arrSQLVariables[arrSQLVariables.length]=arrCLVariableDTOs[i];
            }
        }

        //alert("arrSQLVariables.length  "+arrSQLVariables.length)
        var sExpression;

        if(arrCLVariableDTOs[0].isAlwaysConnect())
        {
            //formula.sValue
            var sFieldId;
            if(arrCLVariableDTOs[1].iModuleId>0)
                sFieldId=me.sMasterFldIds[arrCLVariableDTOs[1].iModuleId.toString()];
            else
                sFieldId=moduleView.getFieldId(arrCLVariableDTOs[1].sValue);


            sFieldId=sFieldId[0];

            if(sFieldId!=sSrcFieldId)//!isTargetExpr &&)
            {
                if (iBodyFieldIndex >= 0)
                    sFieldId = sFieldId + "[" + iBodyFieldIndex + "]";
                formula.getServerVarValue2(sFieldId, true, e);
            }
        }

        sExpression=replaceVariables();

        function replaceVariables()
        {
            var sExpression="";
            var sValue;
            var clPrevVariableDTO=null;
            var clNextVariableDTO=null;
            var i=0;

            /*if(isTargetExpr)
             {
             if(arrCLVariableDTOs[0].isEvaluateTarget()==false)
             return null;
             }
             else*/
            var isEvaluate=false;
            if(arrCLVariableDTOs[0].isAlwaysRefresh() || arrCLVariableDTOs[0].isAlwaysConnect())
            {
                isRefresh=true;
                i++;
            }
            else if(arrCLVariableDTOs[0].iType==formula.VARTYPE_DATE || me.isComboItemChanged)
                isRefresh=true;
            else if(arrCLVariableDTOs[0].iType==formula.VARTYPE_FUNCTION)
            {
                isRefresh=true;
                isEvaluate=true;
            }

            if(!isRefresh)
            {
                if(sFldId)
                {
                    var sFieldId=sFldId;
                    if(isBodyExpr && sFieldId.indexOf("[")==-1)
                    {
                        if(iBodyFieldIndex==-1)
                            iBodyFieldIndex=0;//for invalid field alert msg when defined header field to body formula(setValueToAllColumns)
                        sFieldId+="["+iBodyFieldIndex+"]";
                    }

                    var sCurrentValue=moduleView.getFieldValueAsString(sFieldId);
                    //util.writeToLog(sFieldId+"-------"+sCurrentValue)
                    if(util.trim(sCurrentValue).length>0)
                    {
                        //util.writeToLog("return null");
                        if(isNaN(sCurrentValue))
                            return null;
                        else if(parseInt(sCurrentValue)!=0)
                            return null;
                    }
                }
                else
                    return null;
            }


            if(arrSQLVariables.length>0)
            {
                for(var j=0; j < arrSQLVariables.length; j++)
                    me.getSQLVariableValues(arrSQLVariables[j], iRowIndex, iBodyFieldIndex, false, null, sFldId, isBodyExpr, e);
            }

            if(arrSQLBodyVariables.length>0)
            {
                for(var j=0; j < arrSQLBodyVariables.length; j++)
                    me.getSQLVariableValues(arrSQLBodyVariables[j], iRowIndex, iBodyFieldIndex, isSendAllBodyRows, null, sFldId, isBodyExpr, e);
            }

            /*if(arrSQLVariables.length>0)
             me.getSQLVariableValues(arrSQLVariables,iRowIndex,iBodyFieldIndex,false,null,sFldId,isBodyExpr,e);
             if(arrSQLBodyVariables.length>0)
             me.getSQLVariableValues(arrSQLBodyVariables,iRowIndex,iBodyFieldIndex,true,null,sFldId,isBodyExpr,e);*/

            for(; i < arrCLVariableDTOs.length; i++)
            {
                if(arrCLVariableDTOs[i].sVariablePrefix!=null && sSrcFieldId!=null)
                {
                    if(moduleView.getFieldId(arrCLVariableDTOs[i].sVariablePrefix)!=sSrcFieldId)
                    {
                        //util.writeToLog("abort evaluation "+moduleView.getFieldId(arrCLVariableDTOs[i].sVariablePrefix)+"==="+sSrcFieldId)
                        isEvaluate=false;
                        sExpression="";
                        break;
                    }
                }

                if((i+1) < arrCLVariableDTOs.length)
                    clNextVariableDTO=arrCLVariableDTOs[i+1];
                else
                    clNextVariableDTO=null;

                sValue=arrCLVariableDTOs[i].getValue(isBodyExpr,iRowIndex,clPrevVariableDTO,clNextVariableDTO,iBodyFieldIndex,isEvalCondition,e,isTargetBodyField); //will return single value based on current variable/operator
                //util.writeToLog(arrCLVariableDTOs[i].iType+"----------"+arrCLVariableDTOs[i].sValue+"--------------"+sValue)

                if(typeof sValue == "object") //in case of 'ISBLANK','IS_NOTBLANK',BEGINS AND DOESNOT_BEGINSWITH operators, both operator and operand are added. For this kind of operators return type will be array.
                {
                    sValue=sValue[0]; //will have two values operator and comparision value
                    i++;
                }
                sExpression+=sValue;
                clPrevVariableDTO=arrCLVariableDTOs[i];
            }

            //util.writeToLog("sExpression after parsing "+sFldId+": "+sExpression);

            if(isEvaluate && sExpression)
                sExpression=eval(sExpression);

            //util.writeToLog("sExpression after evaluate "+sFldId+": "+sExpression);

            return sExpression;
        }

        return sExpression;
    };



    /**
     * This function is  used for evaluating expression
     * sFieldId -- fieldid for which expression to be evaluated
     * isRefresh -- is refresh
     * isTargetExpr -- true for target field
     * sSrcFieldId -- src fieldid in case of target expression
     * */
    this.evaluate=function(sFieldId,isRefresh,isTargetExpr,sSrcFieldId,iRecursionLevel,e)
    {
        //util.writeToLog("eval  "+sFieldId);
        //util.writeToLog("eval  "+sFieldId+",isTargetExpr:"+isTargetExpr+",SrcField:"+sSrcFieldId+","+me.arrExpressions[sFieldId]);
        if (!me.arrExpressions || !me.arrExpressions[sFieldId])
            return false;

        e = cross.getEvent(e);
        var arrCLVariableDTOs = me.arrExpressions[sFieldId].expr;
        var isBodyExpr = formula.arrExpressions[sFieldId].isBodyExpr;
        var isEvalBodyExpr = isBodyExpr;
        var clTable=null;

        if (sSrcFieldId)
        {
            //checking for src field is also body field. if it is body field, evaluating row wise expression
            isEvalBodyExpr = isBodyColumn(sSrcFieldId);//sSrcFieldId.indexOf("[")!=-1;//(formula.arrExpressions[sSrcFieldId] && formula.arrExpressions[sSrcFieldId].isBodyExpr);
            clTable = moduleBody.getTableObject(sSrcFieldId, true);
        }


        //util.writeToLog("Eval field:"+sFieldId+",SrcField:"+sSrcFieldId+",isTargetExpr:"+isTargetExpr+",isEvalBodyExpr:"+isEvalBodyExpr+","+isBodyExpr)
        var iRowIndex = -1;
        var iBodyFieldIndex = -1;
        var objField;
        var iRowCount = 1;

        //util.writeToLog("isEvalBodyExpr && isBodyExpr "+isEvalBodyExpr +","+isBodyExpr+","+sFieldId+","+me.iBodyRowIndex);
        if (isEvalBodyExpr)// && isBodyExpr) //sSrcFieldId will be null for
        {
            if (me.iBodyRowIndex != null && me.iBodyRowIndex >= 0)
                iRowIndex = me.iBodyRowIndex;
            else
                iRowIndex = me.getBodyRowIndex(isBodyExpr, e);

            if (iRowIndex >= 0)
            {
                iRowCount = iRowIndex + 1;
                iBodyFieldIndex = me.iBodyFieldIndex;
                if (iBodyFieldIndex == null && e != null)
                {
                    var objInput = cross.getSrcElement(e);
                    var sId = objInput.id;
                    if (!sId)
                        return;

                    if (sId.indexOf("[") != -1)
                        iBodyFieldIndex = sId.substring(sId.indexOf("[") + 1, sId.indexOf("]"));
                }
            }
            else
            {
                if (clTable) //looping all the rows in bodytable
                {
                    iRowIndex = 0;
                    iBodyFieldIndex=-1;
                    iRowCount = clTable.getRowCount(true);
                }
            }
        }

        for (; iRowIndex < iRowCount; iRowIndex++)
        {
            if(isEvalBodyExpr && (iBodyFieldIndex==-1  || iBodyFieldIndex==null) && clTable)
            {
                //if(document.getElementById(sFieldId+"["+iRowIndex+"]")) //in case of delete row field will not be there with given row index
                if(sSrcFieldId)
                    iBodyFieldIndex = moduleBody.getBodyFieldIndex(clTable, sSrcFieldId, iRowIndex);

                if(iBodyFieldIndex==-1)
                    iBodyFieldIndex = moduleBody.getBodyFieldIndex(clTable, sFieldId, iRowIndex);
            }

            //util.writeToLog("eval "+sFieldId+"-------"+isBodyExpr+"---------"+isEvalBodyExpr+"   iRowIndex  "+iRowIndex+","+me.iBodyRowIndex)
            var sFormula = me.replaceVarsWithValues(arrCLVariableDTOs, isBodyExpr, iRowIndex, sFieldId, isRefresh, isTargetExpr, iBodyFieldIndex, sSrcFieldId, false, e, isBodyExpr);
            //util.writeToLog("*******"+sFieldId+"*******"+iRowIndex+"*******"+sFormula);

            //util.writeToLog("evaluate formula for "+isEvalBodyExpr+","+sFieldId+","+sSrcFieldId+","+isBodyExpr+","+iRowIndex+":"+sFormula);

            if (sFormula)
            {
                //util.writeToLog("evaluate formula: "+sFormula+" ,src:"+sSrcFieldId+",field:"+sFieldId+",iRowIndex:"+iRowIndex)
                var sValue = eval(sFormula);
                if (sValue == "NaN" || sValue == Infinity)
                    sValue = "0";

                //util.writeToLog("sFormula,sValue:"+sFormula+","+sValue);
                if (isBodyExpr && iRowIndex >= 0) //setting value for row level event in body table
                {
                    var sImgURL = null;
                    var sDisplayName = null;

                    if (sValue)
                    {
                        objField = moduleView.getElementByFieldId(sFieldId + "[0]");
                        var iDataType = objField.getAttribute("datatype");
                        if (iDataType == Constants.DATATYPE_DATE)
                            sValue = dateUtils.convertIntToDate(sValue, clAppBuffer.getDateFormat());
                        else if (iDataType == Constants.DATATYPE_DATETIME)
                            sValue = dateUtils.convertLongToDateTime(sValue, clAppBuffer.getDateFormat());
                        else if (iDataType == Constants.DATATYPE_PICTURE || iDataType == Constants.DATATYPE_DOCVIEWER)
                        {
                            if (sValue.indexOf("|") != -1)
                            {
                                sImgURL = sValue.substring(0, sValue.indexOf("|"));
                                sDisplayName = sValue.substring(sValue.lastIndexOf("|") + 1);
                                sValue = sValue.substring(sValue.indexOf("|") + 1);
                            }
                            else
                                sImgURL = sValue;
                        }
                    }

                    moduleBody.setColValue(sFieldId, iRowIndex, sValue, null, 0, sImgURL, sDisplayName);
                }
                else
                {
                    objField = document.getElementById(sFieldId);
                    //util.writeToLog("isBodyColumn(sSrcFieldId) "+sSrcFieldId+","+isBodyColumn(sSrcFieldId)+","+document.getElementById(sSrcFieldId+"[0]")+","+objField);
                    if (objField) //setting header field value
                    {
                        //util.writeToLog("evaluate "+sFieldId+":"+sFormula);
                        if (sValue)
                        {
                            if (objField.getAttribute("datatype") == Constants.DATATYPE_DATE)
                                sValue = dateUtils.convertIntToDate(sValue, clAppBuffer.getDateFormat());
                            else if (objField.getAttribute("datatype") == Constants.DATATYPE_TIME)
                            {
                                if (objField.getAttribute("ctrltype") == Constants.CONTROLTYPE_DURATION)
                                    sValue = dateUtils.convertInttoTime(sValue, Constants.TIME_HHMM);
                                else
                                    sValue = dateUtils.convertInttoTime(sValue, clAppBuffer.getTimeFormat());
                            }
                            else if (objField.getAttribute("datatype") == Constants.DATATYPE_DATETIME)
                            {
                                var isUTCDate = false;
                                for (var i = 0; i < arrCLVariableDTOs.length; i++)
                                {
                                    if (arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFC_FUNCTION
                                        || arrCLVariableDTOs[i].iType == formula.VARTYPE_SQLFCB_FUNCTION)
                                    {
                                        isUTCDate = true;
                                        break;
                                    }
                                }

                                sValue = dateUtils.convertLongToDateTime(sValue, clAppBuffer.getDateFormat(), isUTCDate);
                            }
                        }
                        moduleView.setFieldValueAsString(sFieldId, sValue);
                        //objField.value=eval(sFormula);*/

                        if (objField.getAttribute("datatype") == Constants.DATATYPE_FRACTION)
                            checkNoOfDecimals(objField, objField.getAttribute("noOfDec"));
                    }
                    else if (!isBodyColumn(sSrcFieldId))//setting same value to all body rows (ex: amt/no.of installments)
                    {
                        objField = moduleView.getElementByFieldId(sFieldId + "[0]");
                            //util.writeToLog("set all columns "+sFieldId+","+sValue);
                        moduleBody.setValueToAllColumns(sFieldId, sValue);

                    }
                }

                if (!iRecursionLevel || iRecursionLevel < 4)
                {
                    //console.error("from evaluate "+sFieldId+","+iRecursionLevel+","+sSrcFieldId);
                    if (isTargetExpr)
                    {
                        //util.writeToLog("isTargetExpr  "+sFieldId)
                        if (isBodyColumn(sFieldId))
                            objField = moduleView.getElementByFieldId(sFieldId + "[0]");
                        else
                            objField = moduleView.getElementByFieldId(sFieldId);

                        if (objField.getAttribute("datatype") != Constants.DATATYPE_MASTER)
                            me.evaluateTargetExpr([sFieldId], true, iRecursionLevel + 1, e);
                    }
                    else
                        me.evaluateTargetExpr([sFieldId], true, iRecursionLevel + 1, e);
                }
            }
            iBodyFieldIndex=-1;
        }

        if(e)
            cross.cancelBubble(e,true);
        return false;
    };

    function isBodyColumn(sFieldId)
    {
        if(sFieldId)
        {
            if(sFieldId.indexOf("[")!=-1 || document.getElementById(sFieldId+"[0]")!=null)
                return true;
        }
        return false;
    }

    this.evaluateTargetExpr=function(sArrSrcFieldIds,isRefresh,iRecursionLevel,e)
    {
        //console.warn("evaluateTargetExpr  "+sArrSrcFieldIds+","+iRecursionLevel);

        for(var i=0; i < sArrSrcFieldIds.length; i++)
        {
            //util.writeToLog("sArrSrcFieldIds=="+sArrSrcFieldIds+"==="+i);

            var arrTargetVariables=formula.arrTargetVariables;
            var isTargetEvaluated=false;

            for(var j=0; j < arrTargetVariables.length; j++)
            {
                var sArrSrcFldIds=arrTargetVariables[j][0]; //multiple in case of multiple fields with same master type

                if(sArrSrcFldIds)
                {
                    var k;
                    for(k=0; k< sArrSrcFldIds.length; k++ )
                    {
                        //util.writeToLog("evaluateTargetExpr=="+sArrSrcFldIds[k]+"=="+sArrSrcFieldIds[i]);

                        if(sArrSrcFldIds[k]==sArrSrcFieldIds[i])
                        {
                            var sArrTargetFieldIds=arrTargetVariables[j][1];//.split(",");
                            console.warn("src==>target  "+sArrSrcFieldIds[i]+"="+sArrTargetFieldIds+", indexes ["+i+","+j+","+k+"]");
                            me.evaluateTarget(sArrSrcFieldIds[i],sArrTargetFieldIds,isRefresh,iRecursionLevel,e); //not calling recursively since going in infinite loop in some backups (CPDL)
                            isTargetEvaluated=true;
                            break;
                        }
                    }

                    //if( k < sArrSrcFldIds.length)
                    //    break;
                }

                if(isTargetEvaluated)
                    break;
            }
        }
    };

    this.evaluateTargetExpr_old=function(sArrFieldIds,isRefresh)
    {
        for(var i=0; i < sArrFieldIds.length; i++)
        {
            var arrTargetVariables=formula.arrTargetVariables;
            for(var j=0; j < arrTargetVariables.length; j++)
            {
                //alert(arrTargetVariables[j][0]+"=="+sArrFieldIds[i]);
                var sArrTypewiseFieldIds=sArrFieldIds[i];
                for(var k=0; k < sArrTypewiseFieldIds.length; k++)
                {
                    if(arrTargetVariables[j][0]==sArrTypewiseFieldIds[k])
                    {
                        var sArrSrcFieldIds=arrTargetVariables[j][1];//.split(",");
                        me.evaluateTarget(sArrTypewiseFieldIds[k],sArrSrcFieldIds,isRefresh,null);
                        /*for(var k=0; k < sArrSrcFieldIds.length; k++)
                         {
                         util.writeToLog("evaluate trgt:"+sArrSrcFieldIds[k])
                         formula.evaluate(sArrSrcFieldIds[k],isRefresh,true,sArrFieldIds[i],null);
                         }*/
                    }
                }
            }
        }
    };

    this.isBodyVariable=function(sVarName)
    {
        if(sVarName)
            return sVarName.indexOf("B")!=-1;
        return false;
    };


    this.handleRowDelete=function(objRow,iRowIndex)
    {
        //alert(objRow)
        if(objRow)
        {
            me.iBodyRowIndex=iRowIndex;

            var sFieldIds=[];
            for(var i=moduleBody.START_HIDDEN_COLUMNS; i < objRow.cells.length; i++)
            {
                var objCell=objRow.cells[i];
                var sId;
                for(var j=0; j < objCell.childNodes.length; j++)
                {
                    var objChildNode=objCell.childNodes[j];

                    if(objChildNode.nodeName=="INPUT")
                    {
                        objChildNode.value="";
                        sId=objChildNode.id;
                        if(sId.substring(0,1)=="F" && sId.indexOf("]Id")==-1)
                        {
                            sFieldIds[sFieldIds.length] = sId.substring(0, sId.indexOf("["));
                            //if(iRowIndex==0 && me.iBodyFieldIndex==null)
                            //    me.iBodyFieldIndex = sId.substring(sId.indexOf("[") + 1, sId.indexOf("]"));
                        }
                    }
                }
            }



            me.iBodyFieldIndex=0;
            me.iBodyRowIndex=0;

            me.evaluateTargetExpr(sFieldIds,false,0,null);

            me.iBodyFieldIndex=null;
            me.iBodyRowIndex=null;


        }
    };

    this.getComparison=function(iOperatorId,isBodyExpr,iRowIndex,clSrcVariableDTO,clTargetVariableDTO,iBodyFieldIndex,e)
    {
        var iSrcFieldCtrlType=0;
        var iSrcFieldDataType=0;
        if(clSrcVariableDTO!=null)
        {
            if(clSrcVariableDTO.iType==formula.VARTYPE_SCREEN)
            {
                var sFieldId=moduleView.getFieldId(clSrcVariableDTO.sValue);
                var objSrcField;
                if(clSrcVariableDTO.isBodyField)//isBodyExpr)
                    objSrcField=document.getElementById(sFieldId+"[0]");
                else
                    objSrcField=document.getElementById(sFieldId);
                iSrcFieldCtrlType=objSrcField.getAttribute("ctrltype");
                iSrcFieldDataType=objSrcField.getAttribute("datatype");
            }
        }

        var sCompareValue=null;
        if(clTargetVariableDTO)
            sCompareValue=clTargetVariableDTO.getValue(isBodyExpr,iRowIndex,null,null,iBodyFieldIndex,false,e);

        switch (parseInt(iOperatorId,10))
        {
            case Constants.IOPERATOR_EQUALTO:
                return " == ";
            case Constants.IOPERATOR_NOTEQUALTO:
                return " != ";
            case Constants.IOPERATOR_LESSTHAN:
                return " < ";
            case Constants.IOPERATOR_LESSTHANOREQUALTO:
                return " <= ";
            case Constants.IOPERATOR_GREATERTHAN:
                return " > ";
            case Constants.IOPERATOR_GREATERTHANOREQUALTO:
                return " >= ";
            case Constants.IOPERATOR_ISBLANK:
            {
                if(iSrcFieldDataType==Constants.DATATYPE_MASTER || iSrcFieldCtrlType==Constants.CONTROLTYPE_COMBOBOX || iSrcFieldCtrlType == Constants.CONTROLTYPE_OPTIONCTRL)
                    return [" <= '0' "];
                else if(iSrcFieldDataType==Constants.DATATYPE_DATE || iSrcFieldDataType==Constants.DATATYPE_TIME || iSrcFieldDataType==Constants.DATATYPE_DATETIME)
                    return [" == '0' "];
                else
                    return [".replace(/^\\s+|\\s+$/) == ''"];
            }
            case Constants.IOPERATOR_ISNOTBLANK:
            {
                if(iSrcFieldDataType==Constants.DATATYPE_MASTER || iSrcFieldCtrlType==Constants.CONTROLTYPE_COMBOBOX || iSrcFieldCtrlType == Constants.CONTROLTYPE_OPTIONCTRL)
                    return [" > '0' "];
                else if(iSrcFieldDataType==Constants.DATATYPE_DATE || iSrcFieldDataType==Constants.DATATYPE_TIME || iSrcFieldDataType==Constants.DATATYPE_DATETIME)
                    return [" > '0' "];
                else
                    return [".replace(/^\\s+|\\s+$/) != ''"];
            }
            case Constants.IOPERATOR_CONTAINING:
                return [".indexOf(" + sCompareValue + ")!=-1"];
            case Constants.IOPERATOR_NOTCONTAINING:
                return [".indexOf(" + sCompareValue + ")==-1"];
            case Constants.IOPERATOR_BEGINSWITH:
                return [".substr(0,"+(sCompareValue.length-2)+")=="+sCompareValue];
            case Constants.IOPERATOR_DOESNOTBEGINSWITH:
                return [".substr(0,"+(sCompareValue.length-2)+")!="+sCompareValue];
            case Constants.IOPERATOR_MATCHPATTERN:
            {
                sCompareValue=sCompareValue.substr(1,sCompareValue.length-2);
                return [".search("+sCompareValue+")!=-1"];
            }
            case Constants.IOPERATOR_DOESNOTMATCHPATTERN:
            {
                //util.writeToLog(sCompareValue)
                sCompareValue=sCompareValue.substr(1,sCompareValue.length-2);
                return [".search("+sCompareValue+")==-1"];
            }
        }

        return null;
    };

    this.getDateValue=function(iType)
    {
        var iAddDays=-999999;
        var iValue=0;

        iType=parseInt(iType,10);
        //alert("getDateValue  "+iType)
        switch(iType)
        {
            case Constants.IDATE.DAY_CURRENT:
            {
                iAddDays=0;
                break;
            }
            case Constants.IDATE.DAY_PREVIOUS:
            {
                iAddDays=-1;
                break;
            }
            case Constants.IDATE.DAY_NEXT:
            {
                iAddDays=1;
                break;
            }
            case Constants.IDATE.DAY_PREVIOUS_SEVEN:
            {
                iAddDays=-7;
                break;
            }
            case Constants.IDATE.DAY_NEXT_SEVEN:
            {
                iAddDays=7;
                break;
            }
            case Constants.IDATE.DAY_PREVIOUS_THIRTY:
            {
                iAddDays=-30;
                break;
            }
            case Constants.IDATE.DAY_NEXT_THIRTY:
            {
                iAddDays=30;
                break;
            }
            case Constants.IDATE.DAY_PREVIOUS_SIXTY:
            {
                iAddDays=-60;
                break;
            }
            case Constants.IDATE.DAY_NEXT_SIXTY:
            {
                iAddDays=60;
                break;
            }
            case Constants.IDATE.DAY_PREVIOUS_NINETY:
            {
                iAddDays=-90;
                break;
            }
            case Constants.IDATE.DAY_NEXT_NINETY:
            {
                iAddDays=90;
                break;
            }
            case formula.DATE_VAR_NOW:
            {
                iValue=new Date().getTime();
                //iAddDays=0;
                break;
            }
            /*case Constants.IDATE.MONTH_CURRENT:
             case Constants.IDATE.YEAR_CURRENT:*/
        }

        if(iAddDays!=-999999)
            iValue=dateUtils.getCurrentDateToInt(iAddDays);
        return iValue;
    };

};



function CLVariableDTO(iType,iModuleId,sValue,iSubIndex,isBodyField,sVariablePrefix)//,iLinkFieldId)
{
//    alert(iType+","+iModuleId+","+sValue)
    var me=this;
    this.iType=iType; //operator/variable
    this.iModuleId=iModuleId;
    this.sValue=sValue;  //Fieldid in case of server or screen level variable
    this.iSubIndex=iSubIndex; //holds current variable index(comma count) in list of variables of a module. Ex: if [2306]=var1,var2,var3 and current field is var2, it will store index '1'
    this.isBodyField=isBodyField;
    this.sVariablePrefix=sVariablePrefix;
    //this.iLinkFieldId=iLinkFieldId;

    this.getValue=function(isBodyExpr,iRowIndex,clPrevVariableDTO,clNextVariableDTO,iBodyFieldIndex,isEvalCondition,e,isTargetBodyField)
    {
        var sValue="";
        //alert(iType)
        switch(iType)
        {
            case formula.VARTYPE_OPERATOR:
            {
                sValue=me.sValue;
                break;
            }
            case formula.VARTYPE_FIXED_VALUE:
            {
                sValue=me.sValue;
                if(isNaN(sValue))
                    sValue="'"+sValue+"'";
                break;
            }
            /*case formula.VARTYPE_FIXED_COMBO_VALUE:
             {
             sValue=me.sValue;
             break;
             }*/
            case formula.VARTYPE_SCREEN:
            {
                sValue=moduleView.getFieldId(me.sValue);
                if(!sValue)
                    moduleView.throwInvalidFieldError(me.sValue,0,false);

                var iDataType=Constants.DATATYPE_TEXT;
                var iCtrlType;
                var objField;
                //alert(isBodyExpr+"-------"+sValue);

                //if( !isBodyExpr && this.isBodyField)  //bodyfield variable used in headerfield, returning sum of bodyfield column value that is used in header formula
                if( !isTargetBodyField && this.isBodyField)  //bodyfield variable used in headerfield, returning sum of bodyfield column value that is used in header formula
                {
                    objField=moduleView.getElementByFieldId(sValue+"[0]");
                    iDataType=objField.getAttribute("datatype");
                    iCtrlType=objField.getAttribute("ctrltype");

                    if(iBodyFieldIndex!=null && iBodyFieldIndex>=0)
                        objField=moduleView.getElementByFieldId(sValue+"["+iBodyFieldIndex +"]");
                    else
                    {
                        if(!iRowIndex || iRowIndex<0)
                            iRowIndex=0;
                        objField = moduleView.getElementByFieldId(sValue + "[" + iRowIndex + "]");
                    }



                    if(iDataType==Constants.DATATYPE_NUMBER
                        || iDataType==Constants.DATATYPE_FRACTION
                        || iDataType==Constants.DATATYPE_BIGNUMBER)
                    {
                        return moduleBody.getColumnSumValue(sValue, e);
                    }
                    else
                    {
                        if(iCtrlType==Constants.CONTROLTYPE_COMBOBOX
                            || iCtrlType==Constants.CONTROLTYPE_OPTIONCTRL)
                            sValue=getComboInstance(objField.id).getSelectedMasterName();
                        else
                        {
                            sValue=objField.value;
                        }
                    }
                }
                else
                {
                    if(isBodyExpr && this.isBodyField) //body formula evaluation
                    {
                        //sValue=moduleBody.getColValue(sValue,iRowIndex);
                        objField=moduleView.getElementByFieldId(sValue+"[0]");
                        iDataType=objField.getAttribute("datatype");

                        if(!iRowIndex || iRowIndex<0)
                            iRowIndex=0;

                        if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_COMBOBOX
                            || objField.getAttribute("ctrltype")== Constants.CONTROLTYPE_OPTIONCTRL)
                        {
                            if(iBodyFieldIndex==-1)
                            {
                                var clTable=moduleBody.getTableObject(objField.id);
                                iBodyFieldIndex = moduleBody.getBodyFieldIndex(clTable, sValue, iRowIndex);
                            }

                            if(iBodyFieldIndex>=0)
                                sValue = getComboInstance(sValue + "[" + iBodyFieldIndex + "]").getSelectedId();
                            else
                                sValue = getComboInstance(sValue + "[" + iRowIndex + "]").getSelectedId();
                        }
                        else
                            sValue=moduleBody.getColValue(sValue,iRowIndex);
                        //sValue=moduleView.getElementByFieldId(sValue+"["+iRowIndex+"]").value;
                        //sValue=moduleView.getElementByFieldId(sValue+"["+iRowIndex+"]").value;
                        //util.writeToLog(me.sValue+","+iRowIndex+","+sValue)
                    }
                    else
                    {
                        objField=moduleView.getElementByFieldId(sValue);
                        iDataType=objField.getAttribute("datatype");
                        if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_COMBOBOX
                            || objField.getAttribute("ctrltype")== Constants.CONTROLTYPE_OPTIONCTRL)
                            sValue=moduleView.getFieldValueAsString(sValue);
                        else if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_MULTI_SELECT)
                        {
                            sValue=me.iSubIndex;//using iSubIndex for seqid purpose in case of multi select
                        }
                        else if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_RADIOBUTTON
                            || objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_RADIO_WITH_IMAGE)
                        {
                            var objRadioBtn=objField;
                            var iCount=1;
                            while(objRadioBtn)
                            {
                                if(objRadioBtn.checked)
                                {
                                    sValue=objRadioBtn.value;
                                    break;
                                }
                                objRadioBtn=document.getElementById(objField.id+"_"+iCount);
                                iCount++;
                            }

                            if(!objRadioBtn)
                                sValue="0";
                        }
                        else if(objField.getAttribute("ctrltype")==Constants.CONTROLTYPE_CHECKBOX)
                        {
                            if(objField.checked) //checkbox rule conditions will be defined as == '1' for checked and =='0' for unchecked
                                sValue="1";
                            else
                                sValue="0";
                        }
                        else
                            sValue=objField.value;
                    }
                }

                sValue=getValueBasedOnType(iDataType,sValue);
                break;
            }
            case formula.VARTYPE_SERVER:
            {
                var sFieldId=null;
                if(me.sVariablePrefix!=null)
                    sFieldId=moduleView.getFieldId(me.sVariablePrefix);
                sValue=formula.getValueFromBuffer(me.iModuleId,sFieldId,me.iSubIndex,isBodyExpr,iBodyFieldIndex,formula.sCurrentFieldIdId);
                //util.writeToLog(me.iModuleId+"========"+me.iSubIndex+"======="+me.sValue+"======="+sValue)
                sValue=getValueBasedOnType(Constants.DATATYPE_TEXT,sValue);
                break;
            }
            case formula.VARTYPE_OPERATOR_CONST:
            {
                sValue=formula.getComparison(me.sValue,isBodyExpr,iRowIndex,clPrevVariableDTO,clNextVariableDTO,iBodyFieldIndex,e);
                if(sValue==null)
                    alert("Comparison of '"+me.sValue+"' not yet implemented");
                break;
            }
            case formula.VARTYPE_FORMULA:
            {
                //util.writeToLog("get Value FORMULA  "+me.sValue)
                sValue=formula.replaceVarsWithValues(eval(me.sValue),isBodyExpr,iRowIndex,null,false,false,-1,null,false,e,isTargetBodyField);
                //util.writeToLog("after get Value FORMULA  "+sValue)
                sValue=getValueBasedOnType(Constants.DATATYPE_TEXT,sValue);
                if(sValue && isEvalCondition)
                    sValue=eval(sValue);
                break;
            }
            case formula.VARTYPE_DATE:
            {
                //alert("VARTYPE_DATE  "+me.sValue)
                sValue=formula.getDateValue(me.sValue);
                break;
            }
            case formula.VARTYPE_FUNCTION:
            case formula.VARTYPE_FUNCTION_PARAM:
            {
                //alert(me.sValue)
                sValue=me.sValue;
                break;
            }
            case formula.VARTYPE_SQLFC_FUNCTION:
            case formula.VARTYPE_SQLFCB_FUNCTION:
            case formula.VARTYPE_SQLFCVAL_FUNCTION:
            case formula.VARTYPE_SQLFC_ITEMS_FUNCTION:
            {
                var sFieldId=null;
                if(me.sVariablePrefix!=null)
                    sFieldId=moduleView.getFieldId(me.sVariablePrefix);
                //sValue=formula.getSQLVariableValue(me.sValue,me.iModuleId,sFieldId,me.iSubIndex); X`
                sValue=formula.getSQLVariableValue(me.sValue,me.iModuleId,sFieldId,me.iSubIndex,isBodyExpr || isBodyField,iBodyFieldIndex);
                //alert("SQLFC value of "+me.sValue+"==="+sValue)
                if(!sValue)
                    sValue="";
                break;
            }
        }

        function getValueBasedOnType(iDataType,sValue)
        {
            if(!sValue)
                sValue="";
            if(iDataType==Constants.DATATYPE_NUMBER
                || iDataType==Constants.DATATYPE_FRACTION
                || iDataType==Constants.DATATYPE_BIGNUMBER)
            {
                if(!sValue)
                    sValue="0";
                else
                    sValue=util.parseNumberValue(sValue);
            }
            else if(iDataType==Constants.DATATYPE_DATE)
                sValue=dateUtils.convertDatetoInt(sValue);
            else if(iDataType==Constants.DATATYPE_TIME)
                sValue=dateUtils.convertTimeToInt(sValue);
            else if(iDataType==Constants.DATATYPE_DATETIME)
            {
                if(sValue)
                    sValue=util.getDateObject(sValue,true,true).getTime();
                else
                    sValue="0";
            }
            //sValue=dateUtils.convertDateTimetoInt(sValue,null,null,true);
            else if(sValue.length==0 || isNaN(sValue))
            {
                if(sValue.indexOf("'")!=-1)
                    sValue=sValue.replace(/\'/g, "\\'");
                sValue="'"+sValue+"'";
            }
            else if(util.startsWith(sValue,'0')) //added for evaluation issue for phone no. starts with 0
                sValue="'"+sValue+"'";

            return sValue;
        }

        if(sValue && clNextVariableDTO && clNextVariableDTO.iType==formula.VARTYPE_OPERATOR_CONST)
        {
            var iOperatorId=parseInt(clNextVariableDTO.sValue);
            if(iOperatorId==Constants.IOPERATOR_ISBLANK || iOperatorId==Constants.IOPERATOR_ISNOTBLANK
                || iOperatorId==Constants.IOPERATOR_BEGINSWITH || iOperatorId==Constants.IOPERATOR_DOESNOTBEGINSWITH
                || iOperatorId==Constants.IOPERATOR_CONTAINING || iOperatorId==Constants.IOPERATOR_NOTCONTAINING)
            {
                if(iDataType!=Constants.DATATYPE_MASTER && iDataType!=Constants.DATATYPE_DATE && iDataType!=Constants.DATATYPE_TIME && iDataType!=Constants.DATATYPE_DATETIME)
                {
                    if (sValue.indexOf("\'") == -1)//isNaN(sValue) &&
                        sValue = "'" + sValue + "'";
                }
            }
        }
        return sValue;
    };

    this.isAlwaysRefresh=function()
    {
        if(me.iType==formula.VARTYPE_AMPERSAND)
            return true;
        return false;
    };

    //Not implemented yet
    this.isEvaluateTarget=function()
    {
        if(me.iType==formula.VARTYPE_AT_THE_RATE)
            return true;
        return false;
    };

    this.isAlwaysConnect=function()
    {
        if(me.iType==formula.VARTYPE_PERCENTILE)
            return true;
        return false;
    };

    /*this.isComboItems=function()
     {
     if(me.iType==formula.VARTYPE_SQLFCVAL_FUNCTION)
     return true;
     return false;
     }*/
}


function CLFormulaVarDTO(iModuleTypes,iSeqIds,sValues,sSQLVariables,sSQLVariableValues)
{
    this.iModuleTypes=iModuleTypes;
    this.iSeqIds=iSeqIds;
    this.sValues=sValues;
    this.sSQLVariables=sSQLVariables;
    this.sSQLVariableValues=sSQLVariableValues;
}


function CLFormulaVarBodyDTO(iModuleTypes,iTableId,clBodyRows)
{
    this.iModuleTypes=iModuleTypes;
    this.iTableId=iTableId;
    this.clBodyRows=clBodyRows;
}

function CLFormulaVarBodyRowDTO(iRowIndex,iBodySeqIds,sValues)
{
    this.iRowIndex=iRowIndex;
    this.iBodySeqIds=iBodySeqIds;
    this.sValues=sValues;
}

namespace("Focus.crm");

Focus.crm.extmodule=new function()
{
    // External module constants
    var me=this;
    this.SRC_URL=0;                     /// bSourceType in cCrm_LayoutActions
    this.SRC_JAVASCRIPT=1;
    this.SRC_JAVASERVICE=2;
    this.SRC_WEBSERVICE=3;
    this.SRC_PROCEDURE=4;
    this.SRC_WORKFLOW=10;

    this.DISP_CURRENT_WINDOW = 0;         /// iDisplayType in cCrm_LayoutActions
    this.DISP_DIALOG = 1;
    this.DISP_NEW_WINDOW = 2; //Focus.ext.DISP_NOHEADER = 2;
    this.DISP_BACK_GROUND = 3;
    this.DISP_OVERLAY = 4;

    this.SAVE_BEFORE=1;
    this.SAVE_AFTER=2;

    this.ACTION_TYPE_ON_FIELD_ENTER=12;
    this.ACTION_TYPE_ON_FIELD_EXIT=13;
    this.ACTION_TYPE_ON_LOAD=14;

    this.RESP_SUCCESS=1;

    // functions for initializing
    this.init=function(iModuleId,sArrModuleSaveActionDTOs,sArrExternalJSEvtHandlers)
    {

        if(sArrModuleSaveActionDTOs)
        {
            var clModuleCallback=moduleCallback.getInstance(iModuleId);
            var clModuleSaveActionDTO;
            sArrModuleSaveActionDTOs=eval(sArrModuleSaveActionDTOs);

            //alert(sArrModuleSaveActionDTOs);

            for(var i=0;i < sArrModuleSaveActionDTOs.length; i++)
            {
                clModuleSaveActionDTO=sArrModuleSaveActionDTOs[i];

                if(clModuleSaveActionDTO.iSaveType==me.SAVE_BEFORE)
                {
                    me.handleBeforeSave.clModuleSaveActionDTO=clModuleSaveActionDTO;
                    clModuleCallback.setScriptBeforeSave(me.handleBeforeSave);
                }
                else if(clModuleSaveActionDTO.iSaveType==me.SAVE_AFTER)
                {
                    me.handleAfterSave.clModuleSaveActionDTO=clModuleSaveActionDTO;
                    clModuleCallback.setScriptAfterSave(me.handleAfterSave);
                }
            }
        }

        if(sArrExternalJSEvtHandlers)
        {
            sArrExternalJSEvtHandlers=eval(sArrExternalJSEvtHandlers);


            for(var i=0;i < sArrExternalJSEvtHandlers.length; i++)
            {
                clModuleSaveActionDTO=sArrExternalJSEvtHandlers[i];

                if(clModuleSaveActionDTO.iActionType==me.ACTION_TYPE_ON_LOAD)
                {
                    me.extModuleEvtCallback(null,clModuleSaveActionDTO.sSource,true);
                }
                else if(clModuleSaveActionDTO.iActionType==me.ACTION_TYPE_ON_FIELD_ENTER)
                {
                    me.addFieldListener("F"+clModuleSaveActionDTO.iFieldId,cross.EVENT_ONFOCUS,clModuleSaveActionDTO.sSource);
                }
                else if(clModuleSaveActionDTO.iActionType==me.ACTION_TYPE_ON_FIELD_EXIT)
                {
                    me.addFieldListener("F"+clModuleSaveActionDTO.iFieldId,cross.EVENT_ONBLUR,clModuleSaveActionDTO.sSource);
                }
            }
        }
    };

    this.addFieldListener=function(sFieldId,iActionType,sCallback)
    {
        var objField=document.getElementById(sFieldId);

        if(objField)
        {
            var iEvtType;
            if(iActionType==me.ACTION_TYPE_ON_FIELD_ENTER)
                iEvtType=cross.EVENT_ONFOCUS;
            else
                iEvtType=cross.EVENT_ONBLUR;

            if (objField.getAttribute("ctrltype") == Constants.CONTROLTYPE_COMBOBOX
                || objField.getAttribute("ctrltype") == Constants.CONTROLTYPE_OPTIONCTRL)
            {
                var objCombo = getComboInstance(sFieldId);
                if (objCombo == null)
                    objCombo = getComboInstance(sFieldId + "[0]");
                if(iEvtType==cross.EVENT_ONFOCUS)
                    objCombo.setOnFocusScript("Focus.crm.extmodule.extModuleEvtCallback(\"" + sFieldId + "\",\""+sCallback+"\",false,"+iActionType+",evt)"); //+",'"+sFieldId+"')");
                else
                    objCombo.setOnLostScript("Focus.crm.extmodule.extModuleEvtCallback(\"" + sFieldId + "\",\""+sCallback+"\",false,"+iActionType+",evt)"); //+",'"+sFieldId+"')");
            }
            else
                cross.addListener(objField,iEvtType, me.extModuleEvtCallback, true, [sFieldId, sCallback,false,iActionType]);//cross.EVENT_ONBLUR
        }
    };

    this.extModuleEvtCallback=function(sFieldId,sCallback,isOnLoad,iActionType,e)
    {
        //alert("in extModuleEvtCallback "+sFieldId);
        //msg.showToastMsg("in extModuleEvtCallback "+sFieldId);
        if(isOnLoad)
            eval(sCallback)();
        else
            eval(sCallback)(sFieldId,iActionType);

    };

    this.handleAction=function(iModuleId,iBaseModuleId,byLayoutType,iSourceType,sSource,iDisplayType,sTitle,iWidth,iHeight,iActionId)
    {
        var isContinueExecution=false;
        if(iSourceType==me.SRC_JAVASCRIPT || iSourceType==me.SRC_WORKFLOW)
        {
            if(iSourceType==me.SRC_WORKFLOW)
                isContinueExecution=eval(sSource)(iActionId,byLayoutType,iModuleId);
            else
                isContinueExecution=eval(sSource)();
            if(isContinueExecution==undefined)
            {
                isContinueExecution=true;
            }
        }
        else
        {
            this.showView(iModuleId,iBaseModuleId,byLayoutType,iSourceType,sSource,null,iDisplayType,sTitle,iWidth,iHeight);
            isContinueExecution=true;
        }
        return isContinueExecution;
    };

    //Function for displaying view. Invoked from button,Link,Action-List handler functions and module saving
    this.showView=function(iModuleId,iBaseModuleId,byLayoutType,iSourceType,sSource,sSourceParams,iDisplayType,sTitle,iWidth,iHeight,iTransId)
    {
        //var iTransId=0;//=moduleView.getTransId();
        if(byLayoutType==Constants.EDIT_LAYOUT || byLayoutType==Constants.DETAILED_LAYOUT)
        {
            if((!iTransId || iTransId<=0) && document.getElementById("transId"))
                iTransId = document.getElementById("transId").value;//moduleView.getTransId();
            iTransId = util.getAPITransId(iTransId,iModuleId,0);
        }
        else if(byLayoutType==Constants.LIST_LAYOUT)
        {
            var arrTransIds=listView.getTransIds();
            if(arrTransIds)
            {
                var iListViewModuleId=listView.getModuleId();
                var arrAPITransIds=[];
                for(var i=0; i < arrTransIds.length; i++)
                    arrAPITransIds[i]=util.getAPITransId(arrTransIds[i],iListViewModuleId,0);
                iTransId=arrAPITransIds.join(",");
            }
        }
        else if(byLayoutType==Constants.RELATEDMODULE_LAYOUT)
        {
            iTransId=listView.getTransId("listReportTab_"+iModuleId);
            iTransId=util.getAPITransId(iTransId,iModuleId,0);

           /* if(listView.getTransId("listReportTab_"+iModuleId)!=null && listView.getTransId("listReportTab_"+iModuleId)!=0)
            {
                if(!me.checkMultiRows("listReportTab_"+iModuleId))
                   return false;
            }
            else
            {
                Validation.showMessage("Select atleast one record",Validation.ERROR_MSG,null,Validation.ERROR_MANDATORY,true);
                return false;
            }*/
        }
        var sUrl=null;
        //alert(iSourceType+"---"+sSource+"---"+sSourceParams+"--"+iDisplayType)

        if(iSourceType==me.SRC_URL)
        {
            /*sUrl+=(sUrl.indexOf("?")==-1)?"?":"&";
            sUrl+="moduleId="+iModuleId+"&transId="+iTransId;*/

            sUrl=sSource+(sSourceParams?sSourceParams:"");

            if (sUrl.indexOf("getCloudUserRegistration") != -1)
            {
                var iTransIds=listHandler.getSelectedTransIds();
                if (me.validateRowSelection(iTransIds, false)) {
                    //iTransId=iTransIds[0];
                    iTransId = util.getAPITransId(iTransIds[0], iListViewModuleId, 0);
                }
                else
                    return false;
            }
            /*else if (sUrl.indexOf("getEmailWallet") != -1)
             {

                var iTransIds=listHandler.getSelectedTransIds();
                if(me.validateRowSelection(iTransIds,false))
                    iTransId=iTransIds[0];
                else
                    return false;
            }*/

            if(iTransId)
                sUrl+="&transId="+iTransId;

            if(byLayoutType==Constants.RELATEDMODULE_LAYOUT)
            {
                sUrl+="&baseModuleId="+iBaseModuleId;
                sUrl+="&baseTransId="+util.getAPITransId(document.getElementById("transId").value,iBaseModuleId,0);//moduleView.getTransId()
            }

            //alert(sUrl);

            if(iDisplayType==me.DISP_CURRENT_WINDOW)
            {
                displayInCurrentWindow(sUrl);
            }
            else if(iDisplayType==me.DISP_DIALOG)
            {
                displayInDialogbox(sUrl,sTitle,iWidth,iHeight);
            }else if(iDisplayType == me.DISP_OVERLAY)
            {
                displayInOverlay(sUrl,sTitle);
            }
            else if(iDisplayType == me.DISP_NEW_WINDOW)
            {
                //var iModuleId=document.getElementById("moduleId").value;

                /*sUrl+=(sUrl.indexOf("?")==-1)?"?":"&";
                sUrl+="moduleId="+iModuleId+"&transId="+iTransId;*/


                //sUrl="module/module!moveToView.do?moduleId="+iModuleId+"&transId="+iTransId+"&viewType="+iViewType;
                if(sUrl.indexOf("www")==-1 && sUrl.indexOf("http")==-1)
                    window.open(clAppBuffer.getContextPath()+"/"+sUrl);
                else
                    window.open(sUrl);
            }
        }
        /*else if(iSourceType==me.SRC_JAVASCRIPT)
        {
            eval(sSource)();
        }*/

    };

    this.checkMultiRows = function(sTableId)
    {
        var clTable = new sTable(sTableId);
        var iRowCnt = clTable.getRowCount();
        var iCount=0;
        for(var i=0;i<iRowCnt;i++)
        {
            if(clTable.getValueAt(i,0))
            {
                iCount++;
            }
        }
        if(iCount>1)
        {
            msg.showMessage(0,"Multiple record selection is not allowed for selected action.");
            return false;
        }
        return true;
    }

    this.validateRowSelection=function(iTransIds,isAllowMultiple)
    {
        if(!iTransIds)
            iTransIds=me.getSelectedTransIds();

        if(!iTransIds || iTransIds.length==0)
        {
            msg.showMessage(0,"Select atleast one record.");
            return false;
        }
        else if(iTransIds.length > 1 && !isAllowMultiple)
        {
            msg.showMessage(0,"Multiple record selection is not allowed for selected action.");
            return false;
        }
        return true;
    };

    // Invoked before saving module data
    this.handleBeforeSave=function()
    {
        var iModuleId=document.getElementById("moduleId").value;
        var clModuleSaveActionDTO=me.handleBeforeSave.clModuleSaveActionDTO;
        var isContinue=me.handleAction(iModuleId,0,Constants.EDIT_LAYOUT,clModuleSaveActionDTO.iSourceType,clModuleSaveActionDTO.sSource,clModuleSaveActionDTO.iDisplayType);
        me.iSaveType=clModuleSaveActionDTO.iSaveType;
        me.iDisplayType=clModuleSaveActionDTO.iDisplayType;
        //this.isWaitForPositiveResp=isWaitForPositiveResp;

        var arrReturn=null;
        if(isContinue)
        {
            arrReturn[0]=Constants.IModule.STATUS_CONTINUE;
        }
        return arrReturn;
    };

    this.handleAfterSave=function(fnAfterSave)
    {
        var clModuleSaveActionDTO;
        if(fnAfterSave)
            clModuleSaveActionDTO=fnAfterSave;
        else
            clModuleSaveActionDTO=me.handleAfterSave.clModuleSaveActionDTO;

        var iModuleId=document.getElementById("moduleId").value;
        //alert(clModuleSaveActionDTO.iSourceType+"----------"+clModuleSaveActionDTO.sSource+"----------"+clModuleSaveActionDTO.iDisplayType)
        me.handleAction(iModuleId,0,Constants.EDIT_LAYOUT,clModuleSaveActionDTO.iSourceType,clModuleSaveActionDTO.sSource,clModuleSaveActionDTO.iDisplayType,clModuleSaveActionDTO.sTitle);
        me.iSaveType=clModuleSaveActionDTO.iSaveType;
        me.iDisplayType=clModuleSaveActionDTO.iDisplayType;
        //this.isWaitForPositiveResp=isWaitForPositiveResp;
        return null;
    };

    this.handleResponse=function(iResponse)
    {
        //!this.isWaitForPositiveResp ||
        if(iResponse==me.RESP_SUCCESS)
        {
            if(me.iSaveType==me.SAVE_BEFORE)
            {
                var isSaving=moduleView.doSave();
                if(!isSaving)
                    util.toggleBackground(false);
            }
            else
            {
                if(me.iDisplayType==me.DISP_DIALOG)
                    getDialogBox("ext").hide();
            }
            //Invoke function to continue module saving
        }
    };

    this.showExtModuleView=function(sResponse)
    {
        var dvContentView=document.getElementById("dvContentView");
        var dvExtModuleView=document.getElementById("dvExtModuleView");
        if(!dvExtModuleView)
        {
            dvExtModuleView=document.createElement("div");
            dvExtModuleView.id="dvExtModuleView";
            dvExtModuleView.style.display="none";
            dvContentView.parentNode.insertBefore(dvExtModuleView,dvContentView);
        }

        initAllCombos=null;
        dvContentView.style.display="none";
        var sInnerHtml="<div align='left'><a href='javascript:void(0)' onclick='Focus.crm.extmodule.toggleView(false)'>Back to previous page</a></div>";
        sInnerHtml+=sResponse;
        dvExtModuleView.innerHTML=sInnerHtml;
        loadResources(dvExtModuleView, util.onScriptsLoad); //TODO: clear previous resources
        me.toggleView(true);
    };
    this.refreshListView = function(sResponse)
    {
        if(sResponse)
        msg.showMessage(0,sResponse);
        else
            listView.getRefresh();
    };
    
    this.toggleView=function(isShowExternalView)
    {
        if(isShowExternalView)
        {
            document.getElementById("dvContentView").style.display="none";
            document.getElementById("dvExtModuleView").style.display="block";
        }
        else
        {
            document.getElementById("dvExtModuleView").style.display="none";
            document.getElementById("dvContentView").style.display="block";
        }
    };

     this.moveToView=function(iViewType)
    {
        me.closeDialog();
        me.backtoView(iViewType);
        /*var iModuleId=document.getElementById("moduleId").value;
        var iTransId=moduleView.getTransId();
        var sUrl="module/module!moveToView.do?moduleId="+iModuleId+"&transId="+iTransId+"&viewType="+iViewType;
        //alert(sUrl)
        home.setCenterUI(sUrl);*/
    };

    this.backtoView= function(iViewType)
    {
        var iModuleId=document.getElementById("moduleId").value;
        var iTransId=document.getElementById("transId").value;//moduleView.getTransId();
        var sUrl="module/module!moveToView.do?moduleId="+iModuleId+"&transId="+iTransId+"&viewType="+iViewType;
        //alert(sUrl)
        home.setCenterUI(sUrl);
    };

    this.closeDialog=function()
    {
        getDialogBox("ext").hide();
    };

    //// external Module for ErrorModule////////
    this.onClkTransferError=function(sUrl)
    {
       this.onClkTransfer(sUrl,0);
    };
    
    this.onClkTransferDevTask=function(sUrl)
    {
      this.onClkTransfer(sUrl,1);
    };

    this.onClkTransfer=function(sUrl,byFlag)
    {
      var iTransIds=listHandler.getSelectedTransIds();
        if(listHandler.validateRowSelection(iTransIds,true))
        {
            var arrActions = new Array();
            arrActions[0] = MsgHandler.getMsg(MsgConstants.TRANSFER,0,0)+"|clTransferErrors.onClkTransferErrors";//3rd param onwards===attributes
            arrActions[1] = MsgHandler.getMsg(MsgConstants.CANCEL,0,0)+"|";

            var sParam = "?transIds="+iTransIds;
            sParam += "&moduleId="+listHandler.getModuleId();
            sParam += "&flag="+byFlag;
            var addRandomSelection;
            addRandomSelection = new DialogBox("dlgTransferError",":. "+MsgHandler.getMsg(MsgConstants.TRANSFER)+" .:",140,160,370,260,sUrl+sParam,true,null,true,true,arrActions);

            addRandomSelection.setCenter();
            addRandomSelection.show();
        }
    }

    /* Internal functions */

    // Internal function displaying external link in main window
    function displayInCurrentWindow(sUrl)
    {
        var bVendorStatus = sUrl.indexOf('updateVendorStatus')!=-1;
        var bRepost = sUrl.indexOf('repostCartDetails')!=-1;
        //todo need to remove once dynamic js file including is done !
        var iTransIds;
        if( sUrl.indexOf('hillview')!=-1 || bVendorStatus ||bRepost)
        {
            iTransIds=listView.getTransIds("listReportTab_1");
            if(listHandler.validateRowSelection(iTransIds,false))
            {
                sUrl+=(sUrl.indexOf("?")==-1)?"?":"&";
                sUrl+="transIds="+iTransIds;
                if(bVendorStatus || bRepost)
                    con.sendPostRequest(sUrl,null,null,Focus.crm.extmodule.refreshListView,false,null,null,false,true,bRepost?ACTION_POSTING:ACTION_UPDATE);
                else
                    home.setCenterUI(sUrl,null,true);
            }
        }
        else if( sUrl.indexOf('getPlanUpgradeDet')!=-1)
        {
            iTransIds=listView.getTransIds("listReportTab_1");
            if(listHandler.validateRowSelection(iTransIds,false))
            {
                sUrl+=(sUrl.indexOf("?")==-1)?"?":"&";
                sUrl+="transIds="+iTransIds+"&isOppo=true";
                home.setCenterUI(sUrl,null,true);
            }
        }
        else
           home.setCenterUI(sUrl,null,true);
        //con.sendPostRequest(sUrl,null,null,"Focus.crm.extmodule.showExtModuleView");
    }

    // Internal function displaying external link in dialogbox
    function displayInDialogbox(sUrl,sTitle,iWidth,iHeight)
    {
        if(!sTitle)
            sTitle=" ";

        var sOnCloseFunc=null;
        var sDlgId="ext";
        if(!iWidth || !iHeight)
        {
            iWidth=500,iHeight=500;

            if(sUrl.indexOf("allotEntry")!=-1){
                iWidth=640;
                 iHeight=300;
            }
            else if(sUrl.indexOf("getQuoteDetails")!=-1)
            {
                 iWidth=300;
                 iHeight=350;
            }
            else if(sUrl.indexOf("cdidDetails")!=-1 )
            {
                 iWidth=880;
                 iHeight=600;
            }
            else if(sUrl.indexOf("getTransferError")!=-1)
            {
                 iWidth=500;
                 iHeight=380;
                sTitle = MsgHandler.getMsg(MsgConstants.TRANSFER)+" "+"Error(s)";
            }
            else if(sUrl.indexOf("multiCalls")!=-1)
            {
                 iWidth=800;
                 iHeight=400;
                sOnCloseFunc='window.frames["'+sDlgId + 'contentFrame"].Focus.crm.ext.service.onClkDialogClose';
                //sOnCloseFunc = "Focus.crm.ext.service.moveToView";
            }
            else if(sUrl.indexOf("getUnitStatus")!=-1)
                    {
                         iWidth=490;
                         iHeight=340;
                        sTitle =MsgHandler.getMsg(MsgConstants.CHNG_UNITSTATUS);
                    }
            else if(sUrl.indexOf("merge")!=-1)
            {
                 iWidth=400;
                 iHeight=280;
                sTitle = MsgHandler.getMsg(MsgConstants.MERGE)+" "+clAppBuffer.getModuleCaption(Constants.ACCOUNTS,true);
            }
            else if(sUrl.indexOf("getOpportunity")!=-1)
            {
                 iWidth=500;
                 iHeight=380;
                sTitle = MsgHandler.getMsg(MsgConstants.TRANSFER)+" "+clAppBuffer.getModuleCaption(Constants.OPPORTUNITIES,true);
            }
            else if (sUrl.indexOf("getWallet") != -1)
            {
               //var iTransIds1 = listView.getTransIds()

                var iTransIds=listView.getTransIds("listReportTab_1");
                if(!listHandler.validateRowSelection(iTransIds,false))
                    return false;
                iWidth= 650;
                iHeight=430;
            }
            else if (sUrl.indexOf("getEmailWallet") != -1)
            {
                iWidth=550;
                iHeight=550;
            }
            else if(sUrl.indexOf("promoCode")!=-1)
            {
                iWidth=680;
                iHeight=500;
            }

        }
        //alert(sUrl)

        var isDefaultTemplate=true;

        if(sUrl.indexOf("www")!=-1 || sUrl.indexOf("http://")!=-1 || sUrl.indexOf("https://")!=-1)
        {
            if(sUrl.indexOf("http://")==-1 && sUrl.indexOf("https://")==-1)
                sUrl="http://"+sUrl;
            isDefaultTemplate=false;
        }


        var dlgExtModule=new DialogBox(sDlgId, sTitle, 80,50,iWidth,iHeight,sUrl,true,"frmMaster",true,isDefaultTemplate,null);

        //var dlgExtModule=new DialogBox(sDlgId, sTitle, 80,50,iWidth,iHeight,sUrl,true,"frmMaster",true,false,null);
        if(sOnCloseFunc)
            dlgExtModule.setOnClose(sOnCloseFunc);

        dlgExtModule.setCenter();
//        dlgExtModule.isHide(true);
        dlgExtModule.show();
    }

    function displayInOverlay(sUrl,sTitle)
    {
        if(!sTitle || sTitle == null || sTitle == "null")
            sTitle=" ";
        if(sUrl.indexOf("www")!=-1 || sUrl.indexOf("http://")!=-1 || sUrl.indexOf("https://")!=-1)
        {
            if(sUrl.indexOf("http://")==-1 && sUrl.indexOf("https://")==-1)
                sUrl="http://"+sUrl;
        }
        var dvExternalReport = document.createElement("div");
        dvExternalReport.id="dvExternalReportOverlay";
        dvExternalReport.style.display="none";
        document.body.appendChild(dvExternalReport);
        clOverlay.showFrameOverlay("dvExternalReportOverlay",sUrl,"50%","95%",clOverlay.OVERLAY_RIGHT,
            50,0,null,sTitle,"dvCenter",false,null,true,true);
    }

    this.showDialog=function()
    {
        getDialogBox("ext").show();
    };

};

var clExternalAPI=new function()
{
    this.closeDialog=function()
    {
        getDialogBox("ext").hide();
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
    };
    this.showDialog=function(sUrl,iWidth,iHeight)
    {
        var sDlgId="ext";
        var isDefaultTemplate=true;
        if(sUrl.indexOf("www")!=-1 || sUrl.indexOf("http://")!=-1 || sUrl.indexOf("https://")!=-1)
        {
            if(sUrl.indexOf("http://")==-1 && sUrl.indexOf("https://")==-1)
                sUrl="http://"+sUrl;
            isDefaultTemplate=false;
        }

        var dlgExtModule=new DialogBox(sDlgId, "CRM API Dialog", 80,50,iWidth,iHeight,sUrl,true,"frmMaster",true,isDefaultTemplate,null);
        dlgExtModule.setCenter();
        dlgExtModule.show();

        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,null);
    };

    this.getAPITransId=function(iTransId,iModuleType)
    {
        clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,util.getAPITransId(iTransId,iModuleType,0))
    };

    this.getAccessToken=function(sClientId,sClientSecret,iKeyType)
    {
        if(iKeyType!=1) {
            sClientId = CryptoJS.AES.decrypt(sClientId, "crmapi").toString(CryptoJS.enc.Utf8);
            sClientSecret = CryptoJS.AES.decrypt(sClientSecret, "crmapi").toString(CryptoJS.enc.Utf8);
        }
        var sAccessToken = null;

        function resHandler(sResponse)
        {
            sAccessToken = sResponse;
        }

        var sSubmitData = "clientId="+sClientId+"&secretId="+sClientSecret;
        con.sendPostRequest("login!getAccessTokenByClientDetails.do",sSubmitData,resHandler,null,con.RESPONSE_HTML,null,null,true);
        return clCrmApiHandler.buildApiResponse(clCrmApiHandler.STATUS_SUCCESS,sAccessToken);
    };

    this.disableBackground=function(isDisable)
    {
        var isHideLoadStatus=false;

        if(isDisable)
            util.toggleBackground(true,isHideLoadStatus);
        else
            util.toggleBackground(false,isHideLoadStatus);
    };


};

function testExtModuleJSFunction()
{
    //alert("testExtModuleJSFunction");

    var dlgExtModule=new DialogBox("ext", " Dialogbox title1  ",80,50,650,480,clAppBuffer.getContextPath()+"/TestExtModule.jsp",true,"frmMaster",true,false,null);
    dlgExtModule.setCenter();
    dlgExtModule.show();
}


function CLModuleSaveActionDTO(iSaveType,iDisplayType,iSourceType,sSource,isWaitForResponse,sTitle,iActionType,iFieldId)
{
    this.iSaveType=iSaveType;
    this.iDisplayType=iDisplayType;
    this.iSourceType=iSourceType;
    this.sSource=sSource;
    this.isWaitForResponse=isWaitForResponse;
    this.sTitle=sTitle;
    this.iActionType=iActionType;
    this.iFieldId=iFieldId;
}

//alert(CLModuleSaveActionDTO)
//alert("111111 "+focus.crm.extmodule)


function test111()
{
    alert("from test111")
}
var clApprovalStatus=new function()
{
    var me=this;
    var objTD, dvApprStatus,dvContainer,g_iModuleId,g_iTransId,g_sId;
    app.registerInstance("ApprovalStatus",this);
    this.getCardview=function(thisObj,iModuleId,iTransId){
        if(iModuleId<=0)
           iModuleId=listView.getModuleId();
        objTD=thisObj;
        g_iModuleId=iModuleId;
        g_iTransId=iTransId;
        dvApprStatus=document.getElementById("dvApprStatus_"+iModuleId+"_"+iTransId);
        g_sId = "dvApprStatus_"+iModuleId+"_"+iTransId;
        dvContainer = document.getElementById("containerDiv_"+iModuleId);
        
        if(dvContainer==null)
            dvContainer = document.getElementById("containerDiv_1");

        if(dvApprStatus && util.trim(dvApprStatus.innerHTML).length>0){
            me.timer=setTimeout(function(){
                msg.showToastWindow(thisObj,dvApprStatus.innerHTML,0,null,0,
                        false,true,g_sId,Constants.PRONG_TOP,null,null,null,null,null,dvContainer);
            },800);

        }
        else{
            var sUrl;
            dvApprStatus=document.createElement("div");
            dvApprStatus.id="dvApprStatus_"+iModuleId+"_"+iTransId;
            dvApprStatus.style.display="none";
            document.body.appendChild(dvApprStatus);

            sUrl=con.getStruts2Url("module","moduleView","getApprovalStatus",null,true);
            sUrl+="?moduleId="+iModuleId+"&transId="+iTransId+"&fromListview=1";
            con.sendPostRequest(sUrl,null,null,"clApprovalStatus.setApprovalStatus");

        };
    };
        this.setApprovalStatus=function(sResponse){
            dvApprStatus.innerHTML=sResponse;
            if(util.trim(dvApprStatus.innerHTML).length>0){
               me.timer= setTimeout(function()
                {
                    msg.showToastWindow(objTD,dvApprStatus.innerHTML,0,null,0,
                            false,true,g_sId,Constants.PRONG_TOP,null,null,null,null,null,dvContainer);
                },800);
            }

        };
    this.hideCardview=function(){
        msg.removeToastWindowDlg(g_sId);
        clearTimeout(cross.timer);


//        msg.hideToastWindowDlg(false,null,objTD);
    };

};